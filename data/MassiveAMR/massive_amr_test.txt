
# ::snt find details about president barrack obama
(d2 / detail-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing :plural +
            :topic (p / person :name (n / name :op1 "barrack" :op2 "obama")
                  :ARG0-of (h / have-org-role-91
                        :ARG2 (p2 / president)))))

# ::snt how is the spouse of obama
(p / person
      :ARG0-of (h / have-rel-role-91
            :ARG1 (p2 / person :name (n / name :op1 "obama"))
            :ARG2 (s / spouse))
      :mod (a / amr-unknown))

# ::snt how many g. b. p. can i get for one dollar
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "g." :op2 "b." :op3 "p."))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "dollar")))

# ::snt how far is canada from my current location
(f / far-01
      :ARG1 (c / country :name (n / name :op1 "canada"))
      :ARG2 (l / location
            :location-of (i / i)
            :time (c2 / current))
      :extent (a / amr-unknown))

# ::snt what's the capital of kazakhstan
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c2 / country :name (n2 / name :op1 "kazakhstan"))
      :ARG2 (c3 / capital))

# ::snt keanu reeves date of birth
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "keanu" :op2 "reeves"))
      :time (a / amr-unknown))

# ::snt does spain share its border with morrocco
(b / border-01
      :ARG1 (c / country :name (n / name :op1 "spain"))
      :ARG2 (c2 / country :name (n2 / name :op1 "morrocco"))
      :polarity (a / amr-unknown))

# ::snt ok google where does sophia vergara live
(l / live-01
      :ARG0 (p / person :name (n / name :op1 "sophia" :op2 "vergara"))
      :location (a / amr-unknown))

# ::snt how big is england
(b / big-01
      :ARG1 (c / country :name (n / name :op1 "england"))
      :ARG2 (a / amr-unknown))

# ::snt what does two plus two equal
(e / equal-01
      :ARG1 (s / sum-of :op1 2 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt when will tesla come to my town
(c / come-01
      :ARG1 (c2 / company :name (n / name :op1 "tesla"))
      :ARG4 (t / town
            :location-of (i / i))
      :time (a / amr-unknown))

# ::snt denmark geographic location
(b / be-located-at-91
      :ARG1 (c / country :name (n / name :op1 "denmark"))
      :ARG2 (a / amr-unknown))

# ::snt how much is the dollar worth compared to the euro
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "dollar"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "euro")))

# ::snt define philosophy
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / philosophy))

# ::snt how much would it cost to buy a share of target
(c / cost-01
      :ARG1 (b / buy-01
            :ARG1 (s / share
                  :mod (c2 / company :name (n / name :op1 "target"))))
      :ARG2 (a / amr-unknown))

# ::snt look up economy in the dictionary
(l / look-up-05 :mode imperative
      :ARG0 (y / you)
      :ARG1 (e / economy)
      :ARG2 (d / dictionary))

# ::snt can you convert my this money into
(c / convert-01
      :ARG1 (m / money
            :mod (t / this))
      :polarity (a / amr-unknown))

# ::snt what is us dollar today
(h / have-mod-91
      :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
      :ARG2 (a / amr-unknown)
      :time (t / today))

# ::snt tell me the answer for two plus two
(e / equal-01
      :ARG1 (s / sum-of :op1 2 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt how much is lebron james worth
(w / worth-01
      :ARG1 (p / person :name (n / name :op1 "lebron" :op2 "james"))
      :ARG2 (a / amr-unknown))

# ::snt how old is tom cruise
(p / person :name (n / name :op1 "tom" :op2 "cruise")
      :age (a / amr-unknown))

# ::snt where is mount rushmore located
(b / be-located-at-91
      :ARG1 (l / location :name (n / name :op1 "mount" :op2 "rushmore"))
      :ARG2 (a / amr-unknown))

# ::snt please check the recent trend in stocks
(c / check-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (t2 / trend-01
                  :ARG1 (s / stock)
                  :time (r / recent))))

# ::snt beach
(b / beach)

# ::snt give me the description of laptop circuit
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c / circuit
            :part-of (l / laptop)))

# ::snt define and describe an ultraviolet ray
(a / and
      :op1 (d / define-01 :mode imperative
            :ARG0 (y / you)
            :ARG1 (r / ray
                  :mod (u / ultraviolet)))
      :op2 (d2 / describe-01 :mode imperative
            :ARG0 y
            :ARG1 r))

# ::snt what are pounds worth right now
(w / worth-01
      :ARG1 (c / currency :name (n / name :op1 "pounds"))
      :ARG2 (a / amr-unknown)
      :time (n2 / now
            :degree (r / right-yy)))

# ::snt check wikipedia for a definition of the word homosapien
(c / check-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (o / organization :name (n / name :op1 "wikipedia"))
      :ARG2 (t / thing
            :ARG2-of (d / define-01
                  :ARG1 (h / homosapien
                        :mod (w / word)))))

# ::snt how does the dollar compare to the pound
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "dollar"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "pound")))

# ::snt actor who acts a role
(p / person
      :ARG0-of (a / act-01
            :ARG1 (r / role)))

# ::snt what's the us dollar rate today
(r / rate-01
      :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
      :ARG2 (a / amr-unknown)
      :time (t / today))

# ::snt identify object
(i2 / identify-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (o / object))

# ::snt did kim kardashian go to the paris fashion shows this year
(g / go-02
      :ARG0 (p / person :name (n / name :op1 "kim" :op2 "kardashian"))
      :ARG4 (s / show-04
            :ARG1 (f / fashion)
            :location (c / city :name (n2 / name :op1 "paris")))
      :time (y / year
            :mod (t / this))
      :polarity (a / amr-unknown))

# ::snt give details of rock sand
(d2 / detail-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :topic (s / sand
                  :consist-of (r / rock))))

# ::snt what is a mango
(f / food-dish :name (n / name :op1 "mango")
      :mod (a / amr-unknown))

# ::snt what currency does england use
(c / currency
      :mod (a / amr-unknown)
      :ARG1-of (u / use-01
            :location (c2 / country :name (n / name :op1 "england"))))

# ::snt how many canadian dollars are in a u. s. dollar
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "canadian" :op2 "dollars"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "u." :op2 "s." :op3 "dollar")))

# ::snt list exchange rate information for the day for u. s. d. to jpy
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
            :ARG3 (c2 / currency :name (n2 / name :op1 "jpy")))
      :ARG2 (a / amr-unknown)
      :time (t / today))

# ::snt can you tell me what flabbergasted means
(m / mean-01
      :ARG1 (f / flabbergast-01)
      :ARG2 (a / amr-unknown))

# ::snt what year did robin williams pass away
(p / pass-away-16
      :ARG1 (p2 / person :name (n / name :op1 "robin" :op2 "williams"))
      :time (d / date-entity
            :year (a / amr-unknown)))

# ::snt tell me tom hanks middle name
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (n / name-01
                  :ARG1 (p / person :name (n2 / name :op1 "tom" :op2 "hanks")))
            :mod (m / middle))
      :ARG2 (i / i))

# ::snt what year did tim burton divorce helena
(d / divorce-01
      :ARG0 (p / person :name (n / name :op1 "tim" :op2 "burton"))
      :ARG1 (p2 / person :name (n2 / name :op1 "helena"))
      :time (d2 / date-entity
            :year (a / amr-unknown)))

# ::snt convert one us dollar to euro
(c / convert-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c2 / currency :quant 1 :name (n / name :op1 "us" :op2 "dollar"))
      :ARG2 (c3 / currency :name (n2 / name :op1 "euro")))

# ::snt what is the tallest mountain
(h2 / have-degree-91
      :ARG1 (m / mountain
            :mod (a / amr-unknown))
      :ARG2 (t / tall-01
            :ARG1 m)
      :ARG3 (m2 / most))

# ::snt does pink have a new baby
(h / have-03
      :ARG0 (p / person :name (n / name :op1 "pink"))
      :ARG1 (p2 / person
            :ARG1-of (n2 / new-01)
            :ARG0-of (h2 / have-rel-role-91
                  :ARG1 p
                  :ARG2 (b / baby)))
      :polarity (a / amr-unknown))

# ::snt where is new zealand located on a map
(b / be-located-at-91
      :ARG1 (c / country :name (n / name :op1 "new" :op2 "zealand"))
      :ARG2 (a / amr-unknown))

# ::snt define swerving
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / swerve-01))

# ::snt four divided by two equals two
(e / equal-01
      :ARG1 (q / quotient-of :op1 4 :op2 2)
      :ARG2 2)

# ::snt olly how old is tom cruise
(p / person :name (n / name :op1 "tom" :op2 "cruise")
      :age (a / amr-unknown))

# ::snt check currencies
(c / check-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c2 / currency :plural +))

# ::snt tell what the definition of the word massive
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (d / define-01
                  :ARG1 (m / massive
                        :mod (w / word)))))

# ::snt where is india located
(b / be-located-at-91
      :ARG1 (c / country :name (n / name :op1 "india"))
      :ARG2 (a / amr-unknown))

# ::snt how many number of fans does that person have approximately
(h / have-quant-91
      :ARG1 (p / person
            :ARG1-of (h2 / have-rel-role-91
                  :ARG0 (p2 / person
                        :mod (t / that))
                  :ARG2 (f / fan)))
      :ARG2 (a / amr-unknown)
      :ARG1-of (a2 / approximate-01))

# ::snt can you add up thirteen plus five plus nine for me
(e / equal-01
      :ARG1 (s / sum-of :op1 13 :op2 5 :op3 9)
      :ARG2 (a / amr-unknown))

# ::snt find me the definition of indefatigable
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (d / define-01
                  :ARG1 (i2 / indefatigable)))
      :ARG2 (i / i))

# ::snt what is a trebuchet
(t / trebuchet
      :mod (a / amr-unknown))

# ::snt money exchange
(e / exchange-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (m / money))

# ::snt i need the exchange rate for the us dollar and the euro
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "euro")))
      :ARG2 (a / amr-unknown))

# ::snt hey what's a head cheese
(c / cheese
      :location (h / head)
      :mod (a / amr-unknown))

# ::snt how many rivers are there in the world
(h / have-quant-91
      :ARG1 (r / river
            :part-of (w / world))
      :ARG2 (a / amr-unknown))

# ::snt which ocean touches at our continent
(t / touch-01
      :ARG1 (o / ocean
            :mod (a / amr-unknown))
      :ARG2 (c / continent
            :location-of (w / we)))

# ::snt give me the birth details of abraham lincoln
(d / detail-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing :plural +
            :topic (b / bear-02
                  :ARG1 (p / person :name (n / name :op1 "abraham" :op2 "lincoln")))))

# ::snt give me the description of a television circuit
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c / circuit
            :part-of (t / television)))

# ::snt what is the current exchange rate between the dollar and the euro
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "euro")))
      :ARG2 (a / amr-unknown)
      :time (c3 / current))

# ::snt siri what does jon snow's handsome face look like
(l / look-02
      :ARG0 (f / face
            :part-of (p / person :name (n / name :op1 "jon" :op2 "snow"))
            :mod (h / handsome))
      :ARG1 (a / amr-unknown))

# ::snt give me the opening stock price of infosys technologies today
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "infosys" :op2 "technologies")))
      :ARG2 (a / amr-unknown)
      :time (o / open-02
            :time (t / today)))

# ::snt tell me why relationships are so hard
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG0-of (c / cause-01
                  :ARG1 (h / hard-02
                        :ARG1 (r / relation-03)
                        :degree (s / so))))
      :ARG2 (i / i))

# ::snt where is south asia located
(b / be-located-at-91
      :ARG1 (w / world-region :name (n / name :op1 "south" :op2 "asia"))
      :ARG2 (a / amr-unknown))

# ::snt how much rate will be calculated
(c / calculate-01
      :ARG1 (r / rate-01
            :quant (a / amr-unknown)))

# ::snt what year was bill pullman born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "bill" :op2 "pullman"))
      :time (d / date-entity
            :year (a / amr-unknown)))

# ::snt please find out the share price of microsoft in nasdaq
(f / find-out-03 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / share
                        :mod (c / company :name (n / name :op1 "microsoft")))
                  :medium (o / organization :name (n2 / name :op1 "nasdaq")))))

# ::snt description of iphone seven
(d / describe-01
      :ARG1 (p / product :name (n / name :op1 "iphone" :op2 "seven"))
      :ARG2 (a / amr-unknown))

# ::snt how effective will be to buy nike stock
(e / effective-04
      :ARG0 (b / buy-01
            :ARG1 (s / stock
                  :mod (c / company :name (n / name :op1 "nike"))))
      :degree (a / amr-unknown))

# ::snt bypass certain passwords
(b / bypass-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / password :plural +
            :ARG1-of (k / know-01)))

# ::snt where is george w. bush from
(b / be-from-91
      :ARG1 (p / person :name (n / name :op1 "george" :op2 "w." :op3 "bush"))
      :ARG2 (a / amr-unknown))

# ::snt what is the exchange rate between us and france
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :mod (c2 / country :name (n / name :op1 "us")))
            :ARG3 (c3 / currency
                  :mod (c4 / country :name (n2 / name :op1 "france"))))
      :ARG2 (a / amr-unknown))

# ::snt how many inches are in a foot
(h / have-quant-91
      :ARG1 (d / distance-quantity
            :unit (i2 / inch))
      :ARG2 (a / amr-unknown)
      :ARG4 (d2 / distance-quantity :quant 1
            :unit (f / foot)))

# ::snt when did the statue of liberty made
(m / make-01
      :ARG1 (m2 / monument :name (n / name :op1 "statue" :op2 "of" :op3 "liberty"))
      :time (a / amr-unknown))

# ::snt what is the stock price of hdfc
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "hdfc")))
      :ARG2 (a / amr-unknown))

# ::snt how much is the euro versus the canadian dollar
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "euro"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "canadian" :op2 "dollar")))

# ::snt define word
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (w / word))

# ::snt for how many years did mahatma gandhi live
(l / live-01
      :ARG0 (p / person :name (n / name :op1 "mahatma" :op2 "gandhi"))
      :duration (t / temporal-quantity
            :quant (a / amr-unknown)
            :unit (y / year)))

# ::snt how long will it take to travel to japan from south korea
(l / long-03
      :ARG1 (t / travel-01
            :ARG2 (c / country :name (n / name :op1 "south" :op2 "korea"))
            :ARG4 (c2 / country :name (n2 / name :op1 "japan")))
      :ARG2 (a / amr-unknown))

# ::snt where is the coldest place in the world
(b / be-located-at-91
      :ARG1 (p / place
            :ARG1-of (h / have-degree-91
                  :ARG2 (c / cold-01
                        :ARG1 p)
                  :ARG3 (m / most)
                  :ARG5 (p2 / place
                        :location (w / world))))
      :ARG2 (a / amr-unknown))

# ::snt describe joe for me please
(d / describe-01 :polite + :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / person :name (n / name :op1 "joe")))

# ::snt what are the coordinates of the equator
(b / be-located-at-91
      :ARG1 (l / location :name (n / name :op1 "equator"))
      :ARG2 (c / coordinate :plural +
            :mod (a / amr-unknown)))

# ::snt where does brad pitt live
(l / live-01
      :ARG0 (p / person :name (n / name :op1 "brad" :op2 "pitt"))
      :location (a / amr-unknown))

# ::snt how many miles is it between illinois and louisiana alexa
(d / distant-02
      :ARG1 (s / state :name (n / name :op1 "illinois"))
      :ARG2 (s2 / state :name (n2 / name :op1 "louisiana"))
      :extent (d2 / distance-quantity
            :quant (a / amr-unknown)
            :unit (m / mile)))

# ::snt what's that object about
(o / object
      :mod (t / that)
      :mod (a / amr-unknown))

# ::snt current stock price intel
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "intel")))
      :ARG2 (a / amr-unknown)
      :time (c2 / current))

# ::snt one plus two equal
(e / equal-01
      :ARG1 (s / sum-of :op1 1 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt what is the exchange rate between u. s. d. and inr
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
            :ARG3 (c2 / currency :name (n2 / name :op1 "inr")))
      :ARG2 (a / amr-unknown))

# ::snt how many miles in five kilometers
(h / have-quant-91
      :ARG1 (d / distance-quantity
            :unit (m / mile))
      :ARG2 (a / amr-unknown)
      :ARG4 (d2 / distance-quantity :quant 5
            :unit (k / kilometer)))

# ::snt what is the highest mountain in asia
(h3 / have-degree-91
      :ARG1 (m / mountain
            :mod (a / amr-unknown))
      :ARG2 (h2 / high-02
            :ARG1 m)
      :ARG3 (m2 / most)
      :ARG5 (m3 / mountain
            :part-of (c / continent :name (n2 / name :op1 "asia"))))

# ::snt how do i check my currency exchange rate
(h / have-manner-91
      :ARG1 (c / check-01
            :ARG0 (i / i)
            :ARG1 (t / thing
                  :ARG2-of (r / rate-01
                        :ARG1 (e / exchange-01
                              :ARG1 (c2 / currency
                                    :poss i)))))
      :ARG2 (a / amr-unknown))

# ::snt tell me amd stock prices
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "amd")))))
      :ARG2 (i / i))

# ::snt new exchange rate
(r / rate-01
      :ARG1 (e / exchange-01)
      :ARG1-of (n / new-01))

# ::snt how far in steps is home from here
(f / far-01
      :ARG1 (h / home)
      :ARG2 (h2 / here)
      :extent (d / distance-quantity
            :quant (a / amr-unknown)
            :unit (s2 / step)))

# ::snt how many centimeter make one foot
(h / have-quant-91
      :ARG1 (d / distance-quantity
            :unit (c / centimeter))
      :ARG2 (a / amr-unknown)
      :ARG4 (d2 / distance-quantity :quant 1
            :unit (f / foot)))

# ::snt who is the prime minister of russia
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c / country :name (n2 / name :op1 "russia"))
      :ARG2 (m / minister
            :mod (p2 / prime)))

# ::snt what is the definition of succinct
(d / define-01
      :ARG1 (s / succinct)
      :ARG2 (a / amr-unknown))

# ::snt give me the definition of the word haughty
(d / define-01
      :ARG1 (h / haughty
            :mod (w / word))
      :ARG2 (a / amr-unknown))

# ::snt olly what is the capital of california
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (s / state :name (n / name :op1 "california"))
      :ARG2 (c2 / capital))

# ::snt what are the measurements of a queen mattress
(m / measure-01
      :ARG1 (m2 / mattress
            :mod (q / queen))
      :ARG3 (a / amr-unknown))

# ::snt where is johncena from
(b / be-from-91
      :ARG1 (p / person :name (n / name :op1 "johncena"))
      :ARG2 (a / amr-unknown))

# ::snt give me the opening stock price of sony
(g / give-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "sony")))
                  :time (o / open-02)))
      :ARG2 (i / i))

# ::snt where is north dakota
(b / be-located-at-91
      :ARG1 (s / state :name (n / name :op1 "north" :op2 "dakota"))
      :ARG2 (a / amr-unknown))

# ::snt is mount everest the tallest mountain in the united states
(h2 / have-degree-91
      :ARG1 (m / mountain :name (n / name :op1 "mount" :op2 "everest"))
      :ARG2 (t / tall-01
            :ARG1 m)
      :ARG3 (m2 / most)
      :ARG5 (m3 / mountain
            :part-of (c / country :name (n2 / name :op1 "united" :op2 "states")))
      :polarity (a / amr-unknown))

# ::snt tell me the definition of arrow
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (d / define-01
                  :ARG1 (a / arrow)))
      :ARG2 (i / i))

# ::snt can many seashells did sally sell by the seashore
(h / have-quant-91
      :ARG1 (s / seashell
            :ARG1-of (s2 / sell-01
                  :ARG0 (p / person :name (n / name :op1 "sally"))
                  :location (s3 / seashore)))
      :ARG2 (a / amr-unknown))

# ::snt look up someone
(l / look-up-05 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / person
            :mod (s / some)))

# ::snt what does hesitant mean
(m / mean-01
      :ARG1 (h / hesitant)
      :ARG2 (a / amr-unknown))

# ::snt define perpetual
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / perpetual))

# ::snt list the celebrities who have been in my country in the last five years
(p / person :plural +
      :mod (c / celebrity)
      :ARG1-of (b / be-located-at-91
            :ARG2 (c2 / country
                  :location-of (i / i))
            :time (b2 / before
                  :op1 (n2 / now)
                  :duration (t / temporal-quantity :quant 5
                        :unit (y / year))))
      :mod (a / amr-unknown))

# ::snt divide one thousand five hundred by one hundred and sixty
(e / equal-01
      :ARG1 (q / quotient-of :op1 1500 :op2 160)
      :ARG2 (a / amr-unknown))

# ::snt what is the height of mount everest
(h / high-02
      :ARG1 (m / mountain :name (n / name :op1 "mount" :op2 "everest"))
      :extent (a / amr-unknown))

# ::snt awards won by michael jackson
(a / award-01
      :ARG1 (a2 / amr-unknown)
      :ARG2 (p / person :name (n / name :op1 "michael" :op2 "jackson"))
      :ARG1-of (w / win-01
            :ARG0 p))

# ::snt what is a transistor
(t / transistor
      :mod (a / amr-unknown))

# ::snt what is eighty seven minus fourteen
(e / equal-01
      :ARG1 (d / difference-of :op1 87 :op2 14)
      :ARG2 (a / amr-unknown))

# ::snt define flabbergasted
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (f / flabbergasted))

# ::snt what is the exchange rates in this region
(r / rate-01
      :ARG1 (e / exchange-01)
      :ARG2 (a / amr-unknown)
      :location (r2 / region
            :mod (t / this)))

# ::snt please solve this math
(s / solve-01 :polite +
      :ARG1 (m / mathematics
            :mod (t / this))
      :ARG2 (a / amr-unknown))

# ::snt what is this thing
(t / thing
      :mod (t2 / this)
      :mod (a / amr-unknown))

# ::snt tell me about india location
(l / locate-01
      :ARG1 (c / country :name (n / name :op1 "india"))
      :location (a / amr-unknown))

# ::snt set notification for news on the stock market
(n / notify-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (i / i)
      :ARG2 (n2 / news
            :topic (m / market-01
                  :ARG1 (s / stock))))

# ::snt please tell me what is the rate for yen to u. s. d.
(t / tell-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :name (n / name :op1 "yen"))
                        :ARG3 (c2 / currency :name (n2 / name :op1 "u." :op2 "s." :op3 "d.")))))
      :ARG2 (i / i))

# ::snt find me the perfect girlfriend
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / person
            :ARG0-of (h / have-rel-role-91
                  :ARG1 i
                  :ARG2 (g / girlfriend)
                  :ARG1-of (p2 / perfect-02)))
      :ARG2 (i / i))

# ::snt what is the birthday of adam gilchrist
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "adam" :op2 "gilchrist"))
      :time (a / amr-unknown))

# ::snt what is the highest mountain in the world
(h3 / have-degree-91
      :ARG1 (m / mountain
            :mod (a / amr-unknown))
      :ARG2 (h2 / high-02
            :ARG1 m)
      :ARG3 (m2 / most)
      :ARG5 (m3 / mountain
            :part-of (w / world)))

# ::snt where is denmark
(b / be-located-at-91
      :ARG1 (c / country :name (n / name :op1 "denmark"))
      :ARG2 (a / amr-unknown))

# ::snt please tell me what is the definition of cylinder
(t / tell-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (d / define-01
                  :ARG1 (c / cylinder)))
      :ARG2 (i / i))

# ::snt what's the currency exchange rate for china
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :mod (c2 / country :name (n / name :op1 "china"))))
      :ARG2 (a / amr-unknown))

# ::snt what is the exchange rate between the us and canada
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :mod (c2 / country :name (n / name :op1 "us")))
            :ARG3 (c3 / currency
                  :mod (c4 / country :name (n2 / name :op1 "canada"))))
      :ARG2 (a / amr-unknown))

# ::snt tell me about amazon's history
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (h / history
            :topic (c / company :name (n / name :op1 "amazon")))
      :ARG2 (i / i))

# ::snt is kim kardashian married
(m / marry-01
      :ARG1 (p / person :name (n / name :op1 "kim" :op2 "kardashian"))
      :polarity (a / amr-unknown))

# ::snt give me a description of iron fist on netflix
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (b / broadcast-program :name (n / name :op1 "iron" :op2 "fist")
            :medium (o / organization :name (n2 / name :op1 "netflix"))))

# ::snt given me the exchange rates between u. s. d. and inr
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
            :ARG3 (c2 / currency :name (n2 / name :op1 "inr")))
      :ARG2 (a / amr-unknown))

# ::snt which was longest buildings in the world
(h2 / have-degree-91
      :ARG1 (b / building :plural +
            :mod (a / amr-unknown))
      :ARG2 (l / long-03
            :ARG1 b)
      :ARG3 (m / most)
      :ARG5 (w / world))

# ::snt what is price of dollar
(p / price-01
      :ARG1 (c / currency :name (n / name :op1 "dollar"))
      :ARG2 (a / amr-unknown))

# ::snt when does iphone stock usually drop
(b / be-temporally-at-91
      :ARG1 (d / drop-01
            :ARG1 (s / stock
                  :mod (p / product :name (n / name :op1 "iphone")))
            :mod (u / usual))
      :ARG2 (a / amr-unknown))

# ::snt tell me about george washington
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (p / person :name (n / name :op1 "george" :op2 "washington")))
      :ARG2 (i / i))

# ::snt explain the exchange rate of rupee for dollar
(e2 / explain-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :name (n / name :op1 "rupee"))
                        :ARG3 (c2 / currency :name (n2 / name :op1 "dollar"))))))

# ::snt who won the presidential election this year
(e / elect-01
      :ARG1 (p / person
            :mod (a / amr-unknown))
      :ARG2 (p2 / president)
      :time (y / year
            :mod (t / this)))

# ::snt olly can you tell me the price of google stock
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "google")))
      :ARG2 (a / amr-unknown))

# ::snt find exchange rate for u. s. d. to pound
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
                        :ARG3 (c2 / currency :name (n2 / name :op1 "pound"))))))

# ::snt what is the exchange rate between the british pound and the u. s. dollar
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "british" :op2 "pound"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "u." :op2 "s." :op3 "dollar")))
      :ARG2 (a / amr-unknown))

# ::snt math courses
(c / course :plural +
      :topic (m / mathematics))

# ::snt you should know about
(r / recommend-01
      :ARG1 (k / know-01
            :ARG0 (y / you)))

# ::snt where is laos located
(b / be-located-at-91
      :ARG1 (c / country :name (n / name :op1 "laos"))
      :ARG2 (a / amr-unknown))

# ::snt i want to learn about donald trump
(w / want-01
      :ARG0 (i / i)
      :ARG1 (l / learn-01
            :ARG0 i
            :ARG1 (t / thing
                  :topic (p / person :name (n / name :op1 "donald" :op2 "trump")))))

# ::snt what is uber
(c / company :name (n / name :op1 "uber")
      :mod (a / amr-unknown))

# ::snt who is the wife of obama
(h2 / have-rel-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (p2 / person :name (n2 / name :op1 "obama"))
      :ARG2 (w / wife))

# ::snt what does joke mean
(m / mean-01
      :ARG1 (j / joke-01)
      :ARG2 (a / amr-unknown))

# ::snt what is the exchange rate for u. s. d. to nzd
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
            :ARG3 (c2 / currency :name (n2 / name :op1 "nzd")))
      :ARG2 (a / amr-unknown))

# ::snt tell me who will win the next presidential election
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / person
            :ARG0-of (w / win-01
                  :ARG2 (e / elect-01
                        :ARG1 p
                        :ARG2 (p2 / president)
                        :ARG1-of (n2 / next-01))))
      :ARG2 (i / i))

# ::snt please define word
(d / define-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (w / word))


