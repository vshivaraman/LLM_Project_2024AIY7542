# ::snt what are some updates about the stock market
(u / update-02
      :ARG2 (a / amr-unknown)
      :topic (m / market-01
            :ARG1 (s / stock))
      :mod (s2 / some))

# ::snt definition of velocity
(d / define-01
      :ARG1 (v / velocity)
      :ARG2 (a / amr-unknown))

# ::snt please look up exchange between us and mexico
(l / look-up-05 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :mod (c3 / country :name (n / name :op1 "us")))
            :ARG3 (c2 / currency
                  :mod (c4 / country :name (n2 / name :op1 "mexico")))))

# ::snt can you describe to me what a pineapple looks like
(d / describe-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG1-of (l / look-02
                  :ARG0 (f / food-dish :name (n / name :op1 "pineapple")))))

# ::snt what is the dollar against the pound
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "dollar"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :name (n2 / name :op1 "pound")))

# ::snt what does potato mean
(m / mean-01
      :ARG1 (p / potato)
      :ARG2 (a / amr-unknown))

# ::snt how much is the british pound
(r / rate-01
      :ARG1 (c / currency :name (n / name :op1 "british" :op2 "pound"))
      :ARG2 (a / amr-unknown))

# ::snt what is the exchange rate of u. s. d. to cdn
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
            :ARG3 (c2 / currency :name (n2 / name :op1 "cdn")))
      :ARG2 (a / amr-unknown))

# ::snt how many people live in san francisco
(h / have-quant-91
      :ARG1 (p / person
            :ARG0-of (l / live-01
                  :location (c / city :name (n / name :op1 "san" :op2 "francisco"))))
      :ARG2 (a / amr-unknown))

# ::snt please search for this word
(s / search-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG2 (w / word
            :mod (t / this)))

# ::snt which is the best smartphone in two thousand and seventeen
(p / phone
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 p)
            :ARG3 (m / most)
            :ARG5 (p2 / phone
                  :ARG1-of (s2 / smart-06)
                  :time (d / date-entity :year 2017)))
      :mod (a / amr-unknown))

# ::snt who are the greatest guitarists of all time
(g / guitarist :plural +
      :ARG1-of (h / have-degree-91
            :ARG2 (g2 / great-01
                  :ARG1 g)
            :ARG3 (m / most)
            :ARG5 (g3 / guitarist
                  :time (t / time
                        :mod (a2 / all))))
      :mod (a / amr-unknown))

# ::snt tell me all about hurricane
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :mod (a2 / all)
            :topic (h / hurricane-01))
      :ARG2 (i / i))

# ::snt describe death
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (d2 / die-01))

# ::snt what's the exchange rate between the us dollar and the euro
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "euro")))
      :ARG2 (a / amr-unknown))

# ::snt what is a fjord
(f / fjord
      :mod (a / amr-unknown))

# ::snt olly what does snafu mean
(m / mean-01
      :ARG1 (s / snafu)
      :ARG2 (a / amr-unknown))

# ::snt does spain share its border with morrocco
(b / border-01
      :ARG1 (c / country :name (n / name :op1 "spain"))
      :ARG2 (c2 / country :name (n2 / name :op1 "morrocco"))
      :polarity (a / amr-unknown))

# ::snt what's the rate between the u. s. d. and ukraine's currency
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
            :ARG3 (c2 / currency
                  :mod (c3 / country :name (n2 / name :op1 "ukraine"))))
      :ARG2 (a / amr-unknown))

# ::snt what's a parsec
(p / parsec
      :mod (a / amr-unknown))

# ::snt please define forensic
(d / define-01 :polite + :mode imperative
      :ARG0 (y / you)
      :ARG1 (f / forensic))

# ::snt how old was elvis when he died
(a / age-01
      :ARG1 (p / person :name (n / name :op1 "elvis"))
      :ARG2 (a2 / amr-unknown)
      :time (d / die-01
            :ARG1 p))

# ::snt currency to currency rate
(r / rate-01
      :ARG1 (c3 / convert-01
            :ARG1 (c / currency)
            :ARG2 (c2 / currency))
      :ARG2 (a / amr-unknown))

# ::snt what is the us dollar equivalent of one euro
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "euro")))

# ::snt what is a chair
(c / chair
      :mod (a / amr-unknown))

# ::snt how much is the average house
(a / average-04
      :ARG1 (h / house)
      :ARG2 (a2 / amr-unknown))

# ::snt what causes in burmuda triangle
(c / cause-01
      :ARG0 (a / amr-unknown)
      :location (w / world-region :name (n / name :op1 "burmuda" :op2 "triangle")))

# ::snt how old is barack obaba
(p / person :name (n / name :op1 "barack" :op2 "obaba")
      :age (a / amr-unknown))

# ::snt can you tell me what an chaise is
(t / tell-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :domain (c / chaise))
      :ARG2 (i / i))

# ::snt what is five over three
(e / equal-01
      :ARG1 (q / quotient-of :op1 5 :op2 3)
      :ARG2 (a / amr-unknown))

# ::snt what does diverse mean
(m / mean-01
      :ARG1 (d / diverse)
      :ARG2 (a / amr-unknown))

# ::snt olly describe what a crop circle is
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c / circle-02
            :location (c2 / crop)))

# ::snt where on earth has the most volcanoes
(b / be-located-at-91
      :ARG1 (v / volcano
            :ARG1-of (h / have-quant-91
                  :ARG3 (m / most)
                  :ARG5 (l2 / location
                        :part-of (p / planet :name (n / name :op1 "earth")))))
      :ARG2 (a / amr-unknown))

# ::snt what are i. b. m.'s stock prices
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "i." :op2 "b." :op3 "m.")))
      :ARG2 (a / amr-unknown))

# ::snt what high school did halley barry go to
(a3 / attend-01
      :ARG0 (p / person :name (n2 / name :op1 "halley" :op2 "barry"))
      :ARG1 (s2 / school
            :ARG1-of (h2 / high-02)
            :mod (a2 / amr-unknown)))

# ::snt why isn't adam sandler funny
(c / cause-01
      :ARG0 (a / amr-unknown)
      :ARG1 (f / funny-02 :polarity -
            :ARG1 (p / person :name (n / name :op1 "adam" :op2 "sandler"))))

# ::snt how far is san francisco from la
(f / far-01
      :ARG1 (c / city :name (n / name :op1 "san" :op2 "francisco"))
      :ARG2 (c2 / city :name (n2 / name :op1 "la"))
      :extent (a / amr-unknown))

# ::snt what country uses the most coal
(h / have-degree-91
      :ARG1 (c2 / country
            :mod (a / amr-unknown))
      :ARG2 (u / use-01
            :ARG1 (c / coal)
            :location c2)
      :ARG3 (m / most)
      :ARG5 (c3 / country
            :location-of u))

# ::snt alexa who is bob dean
(p / person :name (n / name :op1 "bob" :op2 "dean")
      :mod (a / amr-unknown))

# ::snt find the sum of thirteen and fourteen
(e / equal-01
      :ARG1 (s / sum-of :op1 13 :op2 14)
      :ARG2 (a / amr-unknown))

# ::snt what is the capital of france
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c2 / country :name (n2 / name :op1 "france"))
      :ARG2 (c / capital))

# ::snt who is the governor of new york
(h2 / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (s / state :name (n2 / name :op1 "new" :op2 "york"))
      :ARG2 (g / governor))

# ::snt what's the definition of diverse
(d / define-01
      :ARG1 (d2 / diverse)
      :ARG2 (a / amr-unknown))

# ::snt how many countries
(h / have-quant-91
      :ARG1 (c / country)
      :ARG2 (a / amr-unknown))

# ::snt what is a shoal
(s / shoal
      :mod (a / amr-unknown))

# ::snt define logic
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (l / logic))

# ::snt is angeline having a new movie this year
(m / movie
      :ARG1-of (n / new-01)
      :mod (p / person :name (n2 / name :op1 "angeline"))
      :time (y / year
            :mod (t / this))
      :polarity (a / amr-unknown))

# ::snt how many countries are in the european union
(h / have-quant-91
      :ARG1 (c / country
            :location (w / world-region :name (n / name :op1 "european" :op2 "union")))
      :ARG2 (a / amr-unknown))

# ::snt how many plays has patrick stewart been in
(h / have-quant-91
      :ARG1 (p / play-11
            :ARG0 (p2 / person :name (n / name :op1 "patrick" :op2 "stewart")))
      :ARG2 (a / amr-unknown))


# ::snt where in the world is lyon
(b / be-located-at-91
      :ARG1 (c / city :name (n / name :op1 "lyon"))
      :ARG2 (a / amr-unknown
            :location (w / world)))

# ::snt tell me about hugh lourie
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (p / person :name (n / name :op1 "hugh" :op2 "lourie")))
      :ARG2 (i / i))

# ::snt can you define a chair
(d / define-01
      :ARG1 (c / chair)
      :ARG2 (a / amr-unknown))

# ::snt how old is jennifer lopez
(p / person :name (n / name :op1 "jennifer" :op2 "lopez")
      :age (a / amr-unknown))

# ::snt can you give me the details of indian embassy
(d / detail-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t2 / thing :plural +
            :topic (g2 / government-organization :name (n / name :op1 "indian" :op2 "embassy"))))

# ::snt which is worth more the us dollar or the euro
(a / amr-choice
      :op1 (h / have-degree-91
            :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
            :ARG2 (w / worth-01
                  :ARG1 c)
            :ARG3 (m / more)
            :ARG4 (c2 / currency :name (n2 / name :op1 "euro")))
      :op2 (h2 / have-degree-91
            :ARG1 c2
            :ARG2 (w2 / worth-01
                  :ARG1 c2)
            :ARG3 (m2 / more)
            :ARG4 c))

# ::snt define what a wizard is
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (w / wizard))

# ::snt how does an elephant looks like
(l / look-02
      :ARG0 (e / elephant)
      :ARG1 (a / amr-unknown))

# ::snt can you tell me about the middle east
(t / tell-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (w / world-region :name (n / name :op1 "middle" :op2 "east")))
      :ARG2 (i / i))

# ::snt calc
(c / calc)

# ::snt how long is the great wall of china
(l / long-03
      :ARG1 (w / wall :name (n / name :op1 "great" :op2 "wall" :op3 "of" :op4 "china"))
      :ARG2 (a / amr-unknown))

# ::snt what movies has neil walker done
(d / do-02
      :ARG0 (p / person :name (n / name :op1 "neil" :op2 "walker"))
      :ARG1 (m / movie :plural +
            :mod (a / amr-unknown)))

# ::snt please google location and information of mount rushmore
(g / google-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (a / and
            :op1 (l2 / location
                  :location-of (l / location :name (n / name :op1 "mount" :op2 "rushmore")))
            :op2 (i3 / information
                  :topic l)))

# ::snt search word synonym
(s2 / search-01 :mode imperative
      :ARG0 (y / you)
      :ARG2 (s / synonym
            :mod (w / word)))

# ::snt what is the stock information of walmart
(i3 / information
      :topic (s / stock
            :mod (c / company :name (n / name :op1 "walmart")))
      :mod (a / amr-unknown))

# ::snt how much would it cost to buy stock in apple
(c / cost-01
      :ARG1 (b / buy-01
            :ARG1 (s / stock
                  :mod (c2 / company :name (n / name :op1 "apple"))))
      :ARG2 (a / amr-unknown))

# ::snt how do you define textual
(d / define-01
      :ARG0 (y / you)
      :ARG1 (t / textual)
      :ARG2 (a / amr-unknown))

# ::snt show me prince's biography
(s / show-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (b / biography
            :topic (p / person :name (n / name :op1 "prince")))
      :ARG2 (i / i))

# ::snt did the price of walmart stock go up or down
(a / amr-choice
      :op1 (u / up-02
            :ARG1 (t / thing
                  :ARG2-of (p / price-01
                        :ARG1 (s / stock
                              :mod (c / company :name (n / name :op1 "walmart"))))))
      :op2 (d / down-03
            :ARG1 t))

# ::snt what is the square root of ten
(e / equal-01
      :ARG1 (r / root-of :op1 10 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt seven times seven
(e / equal-01
      :ARG1 (p / product-of :op1 7 :op2 7)
      :ARG2 (a / amr-unknown))

# ::snt when was benjamin franklin born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "benjamin" :op2 "franklin"))
      :time (a / amr-unknown))

# ::snt what is barack obama doing right now
(d / do-02
      :ARG0 (p / person :name (n / name :op1 "barack" :op2 "obama"))
      :ARG1 (a / amr-unknown)
      :time (n2 / now
            :degree (r / right-yy)))

# ::snt google maps
(m / map
      :mod (c / company :name (n / name :op1 "google")))

# ::snt what is the hobby of ajay devgn
(h / hobby
      :poss (p / person :name (n / name :op1 "ajay" :op2 "devgn"))
      :mod (a / amr-unknown))

# ::snt what does word mean
(m / mean-01
      :ARG1 (w / word)
      :ARG2 (a / amr-unknown))

# ::snt what creates buttermilk
(c / create-01
      :ARG1 (f / food-dish :name (n / name :op1 "buttermilk"))
      :ARG2 (a / amr-unknown))

# ::snt define elaborate
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (e / elaborate-01))

# ::snt what is twelve times eight
(e / equal-01
      :ARG1 (p / product-of :op1 12 :op2 8)
      :ARG2 (a / amr-unknown))

# ::snt what is a canadian dollar worth in the us
(w / worth-01
      :ARG1 (c / currency :name (n / name :op1 "canadian" :op2 "dollar"))
      :ARG2 (a / amr-unknown)
      :location (c2 / country :name (n2 / name :op1 "us")))

# ::snt search the locality
(s / search-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (l / locality))

# ::snt how much does a bowling ball cost
(c / cost-01
      :ARG1 (b / ball
            :purpose (b2 / bowl-01))
      :ARG2 (a / amr-unknown))

# ::snt search the region
(s / search-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (r / region))

# ::snt how are my stocks doing today
(d / do-02
      :ARG0 (s / stock
            :poss (i / i))
      :manner (a / amr-unknown)
      :time (t / today))

# ::snt how high is the south n. p.
(h / high-02
      :ARG1 (t / thing :name (n / name :op1 "south" :op2 "n." :op3 "p."))
      :extent (a / amr-unknown))

# ::snt how would you describe the sun
(d / describe-01
      :ARG0 (y / you)
      :ARG1 (s / star :name (n / name :op1 "sun"))
      :ARG2 (a / amr-unknown))

# ::snt are jello shots calorie free
(f / free-01
      :ARG1 (s / shot
            :consist-of (f2 / food-dish :name (n / name :op1 "jell")))
      :ARG2 (c / calorie)
      :polarity (a / amr-unknown))

# ::snt what movies has clancy brown played in
(p / play-02
      :ARG0 (p2 / person :name (n / name :op1 "clancy" :op2 "brown"))
      :subevent-of (m / movie :plural +
            :mod (a / amr-unknown)))

# ::snt what's the rate between pesos and yen
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "pesos"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "yen")))
      :ARG2 (a / amr-unknown))

# ::snt what does session mean
(m / mean-01
      :ARG1 (s / session)
      :ARG2 (a / amr-unknown))

# ::snt search google shopping for the best price on a monoprice mxblue mechanical keyboard
(s / search-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s2 / shop-01
            :ARG2 (c / company :name (n / name :op1 "google")))
      :ARG2 (h / have-degree-91
            :ARG1 (t / thing
                  :ARG2-of (p / price-01
                        :ARG1 (p2 / product :name (n2 / name :op1 "monoprice" :op2 "mxblue" :op3 "mechanical" :op4 "keyboard"))))
            :ARG2 (g / good-02
                  :ARG1 t)
            :ARG3 (m / most)))

# ::snt how long is an earth day
(l / last-01
      :ARG1 (d / day
            :location (p / planet :name (n / name :op1 "earth")))
      :ARG2 (a / amr-unknown))

# ::snt tell me who has the most number one hits on the billboard top twenty
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / person
            :ARG0-of (h / have-03
                  :ARG1 (t2 / thing
                        :ARG1-of (h5 / hit-07
                              :ord (o / ordinal-entity :value 1))
                        :ARG1-of (h2 / have-quant-91
                              :ARG3 (m / most)
                              :ARG5 (p2 / person
                                    :ARG0-of (h3 / hit-07
                                          :ARG2 (p3 / publication :name (n / name :op1 "billboard" :op2 "top" :op3 "twenty"))))))))
      :ARG2 (i / i))

# ::snt what is the average per capita income between asia and europe people
(a / and
      :op1 (r / rate-entity-91
            :ARG1 (a2 / average-01
                  :ARG1 (i2 / income
                        :poss (p / person
                              :source (c / continent :name (n / name :op1 "asia"))))
                  :ARG2 (a3 / amr-unknown))
            :ARG2 (p3 / person :quant 1))
      :op2 (r2 / rate-entity-91
            :ARG1 (a4 / average-01
                  :ARG1 (i3 / income
                        :poss (p2 / person
                              :source (c2 / continent :name (n2 / name :op1 "europe"))))
                  :ARG2 (a5 / amr-unknown))
            :ARG2 p3))

# ::snt please tell me what the word home means
(t / tell-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (m / mean-01
                  :ARG1 (h / home
                        :mod (w / word))))
      :ARG2 (i / i))

# ::snt angelina jolie spouses
(p / person :plural +
      :ARG0-of (h / have-rel-role-91
            :ARG1 (p2 / person :name (n / name :op1 "angelina" :op2 "jolie"))
            :ARG2 (s / spouse))
      :mod (a / amr-unknown))

# ::snt tell me about morel mushrooms
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (f / fungi :name (n / name :op1 "morel" :op2 "mushrooms")))
      :ARG2 (i / i))

# ::snt which celebrity is most likely to follow me back on twitter
(p / person
      :mod (c / celebrity)
      :ARG1-of (h / have-degree-91
            :ARG2 (l / likely-01
                  :ARG1 (f / follow-02
                        :ARG0 p
                        :ARG1 (i / i)
                        :medium (p2 / publication :name (n2 / name :op1 "twitter"))
                        :ARG1-of (b / back-01)))
            :ARG3 (m / most))
      :mod (a / amr-unknown))

# ::snt where are pyramids located
(b / be-located-at-91
      :ARG1 (b2 / building :name (n / name :op1 "pyramids"))
      :ARG2 (a / amr-unknown))

# ::snt who build the paris tower
(b / build-01
      :ARG0 (p / person
            :mod (a / amr-unknown))
      :ARG1 (t / tower
            :location (c / city :name (n2 / name :op1 "paris"))))

# ::snt refer the stock price of hdfc
(r / refer-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "hdfc"))))))

# ::snt what is the population of alabama
(p / populate-01
      :ARG1 (s / state :name (n / name :op1 "alabama"))
      :ARG2 (p2 / person
            :quant (a / amr-unknown)))

# ::snt list the latest books published by favorite authors
(l / list-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (b / book :plural +
            :ARG1-of (p / publish-01
                  :ARG0 (p2 / person :plural +
                        :ARG0-of (a / author-01)
                        :ARG1-of (f / favor-01)))
            :mod (l2 / last)))

# ::snt how tall is jennifer aniston
(t / tall-01
      :ARG1 (p / person :name (n / name :op1 "jennifer" :op2 "aniston"))
      :ARG2 (a / amr-unknown))

# ::snt one dolla equals how much inr
(e / equal-01
      :ARG1 (c / currency :quant 1 :name (n / name :op1 "dolla"))
      :ARG2 (a / amr-unknown
            :ARG1-of (h / have-quant-91
                  :ARG2 (c2 / currency :name (n2 / name :op1 "inr")))))

# ::snt find a description about a samsung t. v.
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / television
            :mod (c / company :name (n / name :op1 "samsung"))))

# ::snt geography please
(g / geography :polite +)

# ::snt what is fourteen divided by two
(e / equal-01
      :ARG1 (q / quotient-of :op1 14 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt give me the description of a smartphone circuit
(d / describe-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (c / circuit
            :part-of (t / thing
                  :instrument-of (p / phone-01)
                  :ARG1-of (s / smart-06))))

# ::snt what does the word hypocrisy mean
(m / mean-01
      :ARG1 (h / hypocrisy
            :mod (w / word))
      :ARG2 (a / amr-unknown))

# ::snt solution for eighty one divided by nine
(e / equal-01
      :ARG1 (q / quotient-of :op1 81 :op2 9)
      :ARG2 (a / amr-unknown))

# ::snt ok google did angelina jolie leave brad pitt
(g / google-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / truth-value
            :polarity-of (l / leave-15
                  :ARG0 (p / person :name (n / name :op1 "angelina" :op2 "jolie"))
                  :ARG1 (p2 / person :name (n2 / name :op1 "brad" :op2 "pitt")))))

# ::snt what's two hundred divided by five
(e / equal-01
      :ARG1 (q / quotient-of :op1 200 :op2 5)
      :ARG2 (a / amr-unknown))

# ::snt olly what's the sum of the two numbers four and six
(e / equal-01
      :ARG1 (s / sum-of :op1 4 :op2 6)
      :ARG2 (a / amr-unknown))

# ::snt get me a stock price of audi
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "audi")))
      :ARG2 (a / amr-unknown))

# ::snt calculate ohm's law based on these values
(c / calculate-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (e / empirical-law :name (n / name :op1 "ohm's" :op2 "law"))
      :ARG1-of (b / base-02
            :ARG2 (t / thing :plural +
                  :ARG2-of (v / value-01)
                  :mod (t2 / this))))

# ::snt is san francisco near berkeley
(n / near-02
      :ARG1 (c / city :name (n2 / name :op1 "san" :op2 "francisco"))
      :ARG2 (c2 / city :name (n3 / name :op1 "berkeley"))
      :polarity (a / amr-unknown))

# ::snt exchange rate of euro with dollar
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "euro"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "dollar")))
      :ARG2 (a / amr-unknown))

# ::snt explain object
(e / explain-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (o / object))

# ::snt what is the answer to life
(a / answer-01
      :ARG1 (l / live-01)
      :ARG2 (a2 / amr-unknown))

# ::snt how long was bryan cranston on breaking bad
(l / last-01
      :ARG1 (s / star-01
            :ARG1 (p / person :name (n / name :op1 "bryan" :op2 "cranston"))
            :ARG2 (s2 / show :name (n2 / name :op1 "breaking" :op2 "bad")))
      :ARG2 (a / amr-unknown))

# ::snt what is rock sand
(s / sand
      :consist-of (r / rock)
      :mod (a / amr-unknown))

# ::snt is equal to
(e / equal-01)

# ::snt use in a sentence
(u / use-01 :mode imperative
      :ARG0 (y / you)
      :medium (s / sentence))

# ::snt give me the definition of the word armor
(d2 / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (a / armor
            :mod (w / word)))

# ::snt what is the exchange rate between u. s. d. and euro
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
            :ARG3 (c2 / currency :name (n2 / name :op1 "euro")))
      :ARG2 (a / amr-unknown))

# ::snt mobile device explanation
(d / device
      :ARG1-of (m / mobile-02)
      :mod (a / amr-unknown)
      :ARG1-of (e / explain-01))

# ::snt is chase doing good
(g / good-02
      :ARG1 (c / company :name (n / name :op1 "chase"))
      :polarity (a / amr-unknown))

# ::snt tell me distance between sun and moon
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (e / extent
            :extent-of (d / distant-02
                  :ARG1 (s / star :name (n / name :op1 "sun"))
                  :ARG2 (m / moon :name (n2 / name :op1 "moon"))))
      :ARG2 (i / i))

# ::snt check definition of capricious
(c / check-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (d / define-01
                  :ARG1 (c2 / capricious))))

# ::snt what are the coordinates of everest
(b / be-located-at-91
      :ARG1 (m / mountain :name (n / name :op1 "everest"))
      :ARG2 (a / and
            :op1 (a2 / angle-quantity
                  :quant (a3 / amr-unknown)
                  :unit (d / degree)
                  :direction (n2 / north))
            :op2 (a4 / angle-quantity
                  :quant (a5 / amr-unknown)
                  :unit (d2 / degree)
                  :direction (e / east))))

# ::snt need geographic information about italy
(n2 / need-01
      :ARG1 (i3 / information
            :topic (g / geography
                  :domain (c / country :name (n / name :op1 "italy")))))

# ::snt what's the stock of apple
(s / stock
      :mod (c / company :name (n / name :op1 "apple"))
      :mod (a / amr-unknown))

# ::snt what does tense mean
(m / mean-01
      :ARG1 (t / tense)
      :ARG2 (a / amr-unknown))

# ::snt describe heaven
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (h / heaven))

# ::snt tell me when martin luther king junior was born
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / time
            :time-of (b / bear-02
                  :ARG1 (p / person :name (n / name :op1 "martin" :op2 "luther" :op3 "king" :op4 "junior"))))
      :ARG2 (i / i))

# ::snt stock price for google
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "google")))
      :ARG2 (a / amr-unknown))

# ::snt director who direct an act
(d2 / director
      :ARG0-of (d / direct-01
            :ARG1 (t / thing
                  :ARG1-of (a / act-01))))

# ::snt what is coral made of
(c / consist-01
      :ARG1 (c2 / coral)
      :ARG2 (a / amr-unknown))

# ::snt tell me about it
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (i2 / it))
      :ARG2 (i / i))

# ::snt find route
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (r / route))

# ::snt what is the current status of resolving general relativity with quantum physics
(r / resolve-01
      :ARG1 (t / theory :name (n / name :op1 "general" :op2 "relativity"))
      :ARG2 (s / scientific-field :name (n2 / name :op1 "quantum" :op2 "physics"))
      :mod (s2 / status
            :mod (a / amr-unknown)
            :time (c / current)))


# ::snt can you describe to me a bike
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (b / bike))

# ::snt find area
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (a / area-quantity))

# ::snt what's the capital of tanzania
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c2 / country :name (n2 / name :op1 "tanzania"))
      :ARG2 (c / capital))

# ::snt which country would end up converting the most money out of a thousand dollars us
(c / country
      :location-of (h / have-degree-91
            :ARG1 (c2 / convert-01
                  :ARG2 (m2 / money)
                  :ARG3 (c3 / currency :quant 1000 :name (n2 / name :op1 "dollars" :op2 "us")))
            :ARG3 (m / most))
      :mod (a / amr-unknown))

# ::snt what did the south n. p. close out at
(v / value-01
      :ARG1 (c / close-03
            :ARG1 (c3 / company :name (n2 / name :op1 "south" :op2 "n." :op3 "p.")))
      :ARG2 (a / amr-unknown))

# ::snt describe the empire state building
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (b / building :name (n / name :op1 "empire" :op2 "state" :op3 "building")))

# ::snt where maradona lives now
(l / live-01
      :ARG0 (p / person :name (n / name :op1 "maradona"))
      :location (a / amr-unknown))

# ::snt current exchange rates for u. k. pound
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "u." :op2 "k." :op3 "pound")))
      :ARG2 (a / amr-unknown)
      :time (c2 / current))

# ::snt what's the change in best buy stick
(c / change-01
      :ARG1 (s / stock
            :mod (c2 / company :name (n / name :op1 "best" :op2 "buy")))
      :extent (a / amr-unknown))

# ::snt how can the word placid be used
(u / use-01
      :ARG1 (p / placid
            :mod (w / word))
      :manner (a / amr-unknown)
      :ARG1-of (p2 / possible-01))

# ::snt what was the last movie will smith was in
(m2 / movie
      :ARG2-of (s / star-01
            :ARG1 (p / person :name (n2 / name :op1 "will" :op2 "smith")))
      :mod (l / last)
      :mod (a / amr-unknown))

# ::snt is keith richards dead
(d / die-01
      :ARG1 (p / person :name (n / name :op1 "keith" :op2 "richards"))
      :polarity (a / amr-unknown))

# ::snt what is the length of amazon river
(l / long-03
      :ARG1 (r / river :name (n / name :op1 "amazon"))
      :ARG2 (a / amr-unknown))

# ::snt who is rihanna dating right now
(d / date-02
      :ARG0 (p / person :name (n / name :op1 "rihanna"))
      :ARG1 (p2 / person
            :mod (a / amr-unknown))
      :time (n3 / now
            :degree (r / right-yy)))

# ::snt can you tell me what hypertrophy means
(t / tell-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (m / mean-01
                  :ARG1 (h / hypertrophy)))
      :ARG2 (i / i))

# ::snt what are the measurements of a rubix cube
(m / measure-01
      :ARG1 (p / product :name (n / name :op1 "rubix" :op2 "cube"))
      :ARG3 (a / amr-unknown))

# ::snt what is the square root of nine
(e / equal-01
      :ARG1 (r / root-of :op1 9 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt define the moon for me
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (m / moon)
      :beneficiary (i / i))

# ::snt what is the prevailing exchange rate us versus indian rupees
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "us"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "indian" :op2 "rupee")))
      :ARG2 (a / amr-unknown)
      :ARG1-of (p / prevail-02))

# ::snt what is the exchange rate between money i'm the united states and switzerland
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :mod (c3 / country :name (n / name :op1 "united" :op2 "states")))
            :ARG3 (c2 / currency
                  :mod (c4 / country :name (n2 / name :op1 "switzerland"))))
      :ARG2 (a / amr-unknown))

# ::snt what's the crime rate in chicago
(r / rate-01
      :ARG1 (c / city :name (n / name :op1 "chicago"))
      :ARG2 (a / amr-unknown)
      :ARG3 (c2 / crime-02))

# ::snt what is the price of amd on the stock market
(p / price-01
      :ARG1 (c / company :name (n / name :op1 "amd"))
      :ARG2 (a / amr-unknown)
      :subevent-of (m2 / market-01
            :ARG1 (s / stock)))

# ::snt what is famous in indranagar
(t / thing
      :ARG1-of (f / fame-01
            :location (c / city-district :name (n / name :op1 "indranagar")))
      :mod (a / amr-unknown))

# ::snt what is a by
(b / by
      :mod (a / amr-unknown))

# ::snt what is motorola going for today
(g / go-07
      :ARG1 (c / company :name (n / name :op1 "motorola"))
      :ARG3 (a / amr-unknown)
      :time (t / today))

# ::snt how much is us dollar against rupee
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "rupee")))

# ::snt how many bones does a human body have
(h / have-part-91
      :ARG1 (b / body
            :mod (h2 / human))
      :ARG2 (b2 / bone
            :ARG1-of (h3 / have-quant-91
                  :ARG2 (a / amr-unknown))))

# ::snt current price of google please
(p / price-01 :polite +
      :ARG1 (c / company :name (n / name :op1 "google"))
      :ARG2 (a / amr-unknown)
      :time (c2 / current))

# ::snt what's the currency exchange rate for china
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :mod (c2 / country :name (n / name :op1 "china"))))
      :ARG2 (a / amr-unknown))

# ::snt tell me about jaipur
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (c / city :name (n / name :op1 "jaipur")))
      :ARG2 (i / i))

# ::snt what is the definition of business
(d / define-01
      :ARG1 (b / business)
      :ARG2 (a / amr-unknown))

# ::snt list albums of rihana
(l / list-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (a / album :plural +
            :poss (p / person :name (n / name :op1 "rihana"))))

# ::snt tell me what the geography is like in this region
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (r / resemble-01
                  :ARG1 (g / geography
                        :domain (r2 / region
                              :mod (t3 / this)))))
      :ARG2 (i / i))

# ::snt what's the scenery like in morocco
(r / resemble-01
      :ARG1 (a / amr-unknown)
      :ARG2 (s / scenery
            :location (c / country :name (n / name :op1 "morocco"))))

# ::snt what's new with the stock market
(n / new-02
      :ARG1 (a / amr-unknown)
      :ARG2 (m / market-01
            :ARG1 (s / stock)))

# ::snt when was madonna born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "madonna"))
      :time (a / amr-unknown))

# ::snt please give height of lindsey lohan
(h / high-02 :polite +
      :ARG1 (p / person :name (n / name :op1 "lindsey" :op2 "lohan"))
      :extent (a / amr-unknown))

# ::snt how old is christie brinkley
(p / person :name (n / name :op1 "christie" :op2 "brinkley")
      :age (a / amr-unknown))

# ::snt notify me when g. b. p. to u. s. d. rate as i expected
(n / notify-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (i / i)
      :ARG2 (t / time
            :time-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :name (n2 / name :op1 "g." :op2 "b." :op3 "p."))
                        :ARG3 (c2 / currency :name (n3 / name :op1 "u." :op2 "s." :op3 "d.")))
                  :ARG1-of (e2 / expect-01
                        :ARG0 i))))

# ::snt what time zone is in cuba
(b / be-located-at-91
      :ARG1 (c / country :name (n / name :op1 "cuba"))
      :ARG2 (z / zone
            :mod (t / time)
            :mod (a / amr-unknown)))

# ::snt two by two is
(e / equal-01
      :ARG1 (p / product-of :op1 2 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt what would be the exchange rate of currency in japan
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :mod (c2 / country :name (n / name :op1 "japan"))))
      :ARG2 (a / amr-unknown))

# ::snt describe a starfish
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / starfish))

# ::snt what is the longest river in the world
(h2 / have-degree-91
      :ARG1 (r / river
            :mod (a / amr-unknown))
      :ARG2 (l / long-03
            :ARG1 r)
      :ARG3 (m / most)
      :ARG5 (r2 / river
            :part-of (w / world)))

# ::snt how much money did will ferrel make for his last movie
(m / make-05
      :ARG0 (p / person :name (n / name :op1 "will" :op2 "ferrel"))
      :ARG1 (a / amr-unknown)
      :ARG2 (m3 / movie
            :poss p
            :mod (l / last)))

# ::snt olly where do the rocky mountains start
(s / start-01
      :ARG1 (m / mountain :name (n / name :op1 "rocky" :op2 "mountains"))
      :location (a / amr-unknown))

# ::snt how far away is the sun
(f / far-01
      :ARG1 (s / star :name (n / name :op1 "sun"))
      :extent (a / amr-unknown))

# ::snt please tell me what is the formula for the perimeter of a rectangle
(t / tell-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (f / formula
            :purpose (c / calculate-01
                  :ARG1 (p / perimeter
                        :domain (r / rectangle))))
      :ARG2 (i / i))

# ::snt google
(c / company :name (n / name :op1 "google"))

# ::snt convert five s. d. to rials
(c2 / convert-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c / currency :quant 5 :name (n3 / name :op1 "s." :op2 "d."))
      :ARG2 (c3 / currency :name (n2 / name :op1 "rials")))

# ::snt what is the distance to the grand canyon
(d / distant-02
      :ARG1 (c / canyon :name (n / name :op1 "grand" :op2 "canyon"))
      :extent (a / amr-unknown))

# ::snt show me the answer for this problem two hundred and forty six plus six hundred and fifty four
(e / equal-01
      :ARG1 (s / sum-of :op1 246 :op2 654)
      :ARG2 (a / amr-unknown))

# ::snt how old is jim carrey
(p / person :name (n / name :op1 "jim" :op2 "carrey")
      :age (a / amr-unknown))

# ::snt how tall is channin tatum
(t / tall-01
      :ARG1 (p / person :name (n / name :op1 "channin" :op2 "tatum"))
      :ARG2 (a / amr-unknown))

# ::snt what's going to be the forecast tomorrow for outer nowhereville
(f / forecast-01
      :ARG1 (a / amr-unknown)
      :topic (w / weather
            :location (l / location :name (n / name :op1 "outer" :op2 "nowhereville"))
            :time (t / tomorrow)))

# ::snt what is the difference in value of a dollar and a peso
(d / differ-02
      :ARG1 (t / thing
            :ARG2-of (v / value-01
                  :ARG1 (c / currency :name (n / name :op1 "dollar"))))
      :ARG2 (t2 / thing
            :ARG2-of (v2 / value-01
                  :ARG1 (c2 / currency :name (n2 / name :op1 "peso"))))
      :degree (a / amr-unknown))

# ::snt what is the definition for this object
(d / define-01
      :ARG1 (o / object
            :mod (t / this))
      :ARG2 (a / amr-unknown))

# ::snt what is leonardo dicaprio's networth
(w / worth-01
      :ARG1 (p / person :name (n / name :op1 "leonardo" :op2 "dicaprio"))
      :ARG2 (a / amr-unknown)
      :ARG1-of (n2 / net-02))

# ::snt can you tell me the exchange rate for canadian currency
(t / tell-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency
                              :mod (c2 / country :name (n / name :op1 "canadian")))))))

# ::snt please summarize the latest george r. r. martin ice and fire book
(s / summarize-01 :polite +
      :ARG0 (y / you)
      :ARG1 (b2 / book :name (n / name :op1 "ice" :op2 "and" :op3 "fire")
            :ARG1-of (w / write-01
                  :ARG0 (p / person :name (n2 / name :op1 "george" :op2 "r." :op3 "r." :op4 "martin")))
            :mod (l / last)))

# ::snt olly compare the stock prices for nintendo and sony and tell me which ones are better
(a / and
      :op1 (c / compare-01 :mode imperative
            :ARG0 (y / you)
            :ARG1 (p / price-01
                  :ARG1 (s / stock
                        :mod (c2 / company :name (n / name :op1 "nintendo"))))
            :ARG2 (p2 / price-01
                  :ARG1 (s2 / stock
                        :mod (c3 / company :name (n2 / name :op1 "sony")))))
      :op2 (a2 / amr-choice
            :op1 (h / have-degree-91
                  :ARG1 s
                  :ARG2 (g / good-02
                        :ARG1 s)
                  :ARG3 (m / more)
                  :ARG4 s2)
            :op2 (h2 / have-degree-91
                  :ARG1 s2
                  :ARG2 (g2 / good-02
                        :ARG1 s2)
                  :ARG3 (m2 / more)
                  :ARG4 s)))

# ::snt what is the definition of logic
(d / define-01
      :ARG1 (l / logic)
      :ARG2 (a / amr-unknown))

# ::snt tell me about michael jackson
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (p / person :name (n / name :op1 "michael" :op2 "jackson")))
      :ARG2 (i / i))

# ::snt i would like to know the meaning of word
(l / like-02
      :ARG0 (i / i)
      :ARG1 (t / thing
            :ARG2-of (m / mean-01
                  :ARG1 (w / word))))

# ::snt what is the answer to ten
(a / answer-01
      :ARG1 (t / thing
            :ord (o / ordinal-entity :value 10))
      :ARG2 (a2 / amr-unknown))

# ::snt in what scenario would you use word inconvenience
(u / use-01
      :ARG0 (y / you)
      :ARG1 (i2 / inconvenience
            :mod (w / word))
      :ARG2 (a / amr-unknown
            :domain (s / scenario)))

# ::snt how would you describe a ball
(d / describe-01
      :ARG0 (y / you)
      :ARG1 (b / ball)
      :ARG2 (a / amr-unknown))

# ::snt stock price f. flat
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "f." :op2 "flat")))
      :ARG2 (a / amr-unknown))

# ::snt please describe this sunset for me
(d / describe-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (s / set-11
            :ARG1 (s2 / star :name (n / name :op1 "sun"))
            :mod (t / this))
      :beneficiary (i / i))

# ::snt how much did facebook stock increase last night
(h / have-extent-91
      :ARG1 (i2 / increase-01
            :ARG1 (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "facebook")))))
      :ARG2 (a / amr-unknown)
      :time (w / week
            :mod (l / last)))

# ::snt when is madonna's birthday
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "madonna"))
      :time (a / amr-unknown))

# ::snt solve the calculation
(s / solve-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG1-of (c / calculate-01)))

# ::snt give me everything you know about bob dean
(g / give-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (e / everything
            :ARG1-of (k / know-01
                  :ARG0 y)
            :topic (p / person :name (n / name :op1 "bob" :op2 "dean")))
      :ARG2 (i / i))

# ::snt what is a geographic fact in this region
(f / fact
      :topic (g / geography
            :domain (r / region
                  :mod (t / this)))
      :mod (a / amr-unknown))

# ::snt how old is tony bennett
(p / person :name (n / name :op1 "tony" :op2 "bennett")
      :age (a / amr-unknown))

# ::snt detail for stock price
(p / price-01
      :ARG1 (s / stock)
      :ARG2 (a / amr-unknown)
      :ARG1-of (d / detail-01))

# ::snt let me know up and down in stock price of this company stock
(l2 / let-know-07 :mode imperative
      :ARG0 (y / you)
      :ARG1 (i / i)
      :ARG2 (k / know-01
            :ARG0 i
            :ARG1 (a / and
                  :op1 (t3 / thing
                        :ARG2-of (u / up-02
                              :ARG1 (t / thing
                                    :ARG2-of (p / price-01
                                          :ARG1 (s / stock
                                                :mod (c / company
                                                      :mod (t2 / this)))))))
                  :op2 (e / extent
                        :extent-of (d / down-03
                              :ARG1 t)))))

# ::snt define the word absolute
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (a / absolute
            :mod (w / word)))

# ::snt what's the exchange between u. s. d. and cad
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
            :ARG3 (c2 / currency :name (n2 / name :op1 "cad")))
      :ARG2 (a / amr-unknown))

# ::snt when was einstein's birthday
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "einstein"))
      :time (a / amr-unknown))

# ::snt what does hypocrisy mean
(m / mean-01
      :ARG1 (h / hypocrisy)
      :ARG2 (a / amr-unknown))

# ::snt please define this
(d / define-01 :polite +
      :ARG1 (t / thing
            :mod (t2 / this))
      :ARG2 (a / amr-unknown))

# ::snt get info
(i2 / inform-01
      :ARG2 (a / amr-unknown))

# ::snt please look up exchange between us and mexco
(l / look-up-05 :polite + :mode imperative
      :ARG0 (y / you)
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :mod (c3 / country :name (n3 / name :op1 "us")))
            :ARG3 (c2 / currency
                  :mod (c4 / country :name (n4 / name :op1 "mexco")))))

# ::snt where can i find japan
(f / find-01
      :ARG0 (i / i)
      :ARG1 (c / country :name (n / name :op1 "japan"))
      :location (a / amr-unknown)
      :ARG1-of (p / possible-01))

# ::snt show exchange rate of u. s. d. versus euro
(s / show-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
                        :ARG3 (c2 / currency :name (n2 / name :op1 "euro"))))))

# ::snt what is hurricane
(h / hurricane-01
      :mod (a / amr-unknown))

# ::snt what kind of cloth eastern people wear
(w / wear-01
      :ARG0 (p / person
            :source (w2 / world-region :name (n / name :op1 "eastern")))
      :ARG1 (c / cloth
            :mod (a / amr-unknown)))

# ::snt when's mark lanegan's next album out
(b / be-temporally-at-91
      :ARG1 (o / out-01
            :ARG1 (a / album
                  :poss (p / person :name (n / name :op1 "mark" :op2 "lanegan"))
                  :ARG1-of (n2 / next-01)))
      :ARG2 (a2 / amr-unknown))

# ::snt what is the exchange rate with in one british pound
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :quant 1 :name (n / name :op1 "british" :op2 "pound")))
      :ARG2 (a / amr-unknown))

# ::snt did prince have children
(h / have-polarity-91
      :ARG1 (p / person
            :ARG0-of (h2 / have-rel-role-91
                  :ARG1 (p2 / person :name (n / name :op1 "prince"))
                  :ARG2 (c / child)))
      :ARG2 (a / amr-unknown))

# ::snt how would you describe a happy birthday
(d / describe-01
      :ARG0 (y / you)
      :ARG1 (b / birthday
            :ARG0-of (h / happy-01))
      :ARG2 (a / amr-unknown))

# ::snt i need some details about bruce lee please assist
(a / and
      :op1 (n2 / need-01
            :ARG0 (i / i)
            :ARG1 (t / thing
                  :ARG1-of (d / detail-01)
                  :topic (p / person :name (n / name :op1 "bruce" :op2 "lee"))
                  :mod (s / some)))
      :op2 (a2 / assist-01 :mode imperative :polite +
            :ARG0 (y / you)
            :ARG2 t))

# ::snt what is the gross domestic product of us
(p / produce-01
      :ARG0 (c / country :name (n / name :op1 "us"))
      :ARG1 (a / amr-unknown)
      :ARG1-of (g / gross-01)
      :mod (d / domestic))

# ::snt show me the demographic growth rate of switzerland in the last ten years
(s / show-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (r / rate-01
            :ARG1 (g / grow-01
                  :ARG1 (d / demography
                        :domain (c / country :name (n / name :op1 "switzerland")))
                  :time (b / before
                        :op1 (n2 / now)
                        :duration (t / temporal-quantity :quant 10
                              :unit (y2 / year)))))
      :ARG2 (i / i))

# ::snt download certain vocab
(d / download-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (v / vocabulary
            :mod (c / certain)))

# ::snt who is the president of america
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c / country :name (n2 / name :op1 "america"))
      :ARG2 (p / president))

# ::snt open stocks
(o / open-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / stock :plural +))

# ::snt list stock price for this company stock
(l / list-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company
                              :mod (t / this))))))

# ::snt what is the size of the united states
(s / size-01
      :ARG1 (c / country :name (n / name :op1 "united" :op2 "states"))
      :ARG2 (a / amr-unknown))

# ::snt i will be at pizza hut in ten minutes and will stay there for next forty minutes arrange an uber for me that can drop me home
(a / and
      :op1 (b / be-located-at-91
            :ARG1 (i / i)
            :ARG2 (l / location :name (n / name :op1 "pizza" :op2 "hut"))
            :time (a2 / after
                  :op1 (n2 / now)
                  :quant (t / temporal-quantity :quant 10
                        :unit (m / minute))))
      :op2 (s / stay-01
            :ARG1 i
            :location l
            :time (a4 / after
                  :op1 a2
                  :duration (t2 / temporal-quantity :quant 40
                        :unit (m2 / minute))))
      :op3 (a3 / arrange-01 :mode imperative
            :ARG0 (y / you)
            :ARG1 (p / product :name (n4 / name :op1 "uber")
                  :ARG0-of (d / drop-off-03
                        :ARG1 i
                        :ARG2 (h / home)
                        :ARG1-of (p2 / possible-01)))
            :ARG3 i))

# ::snt use this word in a sentence
(u / use-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (w / word
            :mod (t / this))
      :manner (c / consist-01
            :ARG1 (s / sentence)
            :ARG2 w))

# ::snt when is elvis birthday
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "elvis"))
      :time (a / amr-unknown))

# ::snt help me in knowing the background of person morgan freeman
(h / help-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (k / know-02
            :ARG0 i
            :ARG1 (b / background
                  :domain (p / person :name (n / name :op1 "morgan" :op2 "freeman"))))
      :ARG2 (i / i))

# ::snt what is i. b. m.'s stock worth
(w / worth-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "i." :op2 "b." :op3 "m.")))
      :ARG2 (a / amr-unknown))

# ::snt what is the geographical significance of india
(s / signify-01
      :ARG0 (g / geography
            :domain (c / country :name (n / name :op1 "india")))
      :ARG1 (a / amr-unknown))

# ::snt is a peso worth more than a dollar
(h / have-degree-91
      :ARG1 (c / currency :name (n / name :op1 "peso"))
      :ARG2 (w / worth-01
            :ARG1 c)
      :ARG3 (m / more)
      :ARG4 (c2 / currency :name (n2 / name :op1 "dollar"))
      :polarity (a / amr-unknown))

# ::snt what is taylor swift's birthday
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "taylor" :op2 "swift"))
      :time (a / amr-unknown))

# ::snt person by birthday
(l / list-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / person)
      :manner (t / time
            :time-of (b / bear-02
                  :ARG1 p)))

# ::snt olly what is the exchange rate between the us dollar and the aus dollar
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "aus" :op2 "dollar")))
      :ARG2 (a / amr-unknown))

# ::snt is black sea real
(r / real-04
      :ARG1 (s / sea :name (n / name :op1 "black" :op2 "sea"))
      :polarity (a / amr-unknown))

# ::snt tell me which politician is being investigated
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / politician
            :ARG1-of (i2 / investigate-01))
      :ARG2 (i / i))

# ::snt what states border new hampshire
(b / border-01
      :ARG1 (s2 / state :plural +
            :mod (a / amr-unknown))
      :ARG2 (s / state :name (n / name :op1 "new" :op2 "hampshire")))

# ::snt describe to me what a ball looks like
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG1-of (l / look-02
                  :ARG0 (b / ball))))

# ::snt what is a virtual reality headset
(h / headset
      :purpose (r / reality
            :mod (v / virtual))
      :mod (a / amr-unknown))

# ::snt west
(w / west)

# ::snt where is justin beiber from
(b / be-from-91
      :ARG1 (p / person :name (n / name :op1 "justin" :op2 "beiber"))
      :ARG2 (a / amr-unknown))

# ::snt where is the statue of liberty
(b / be-located-at-91
      :ARG1 (m / monument :name (n / name :op1 "statue" :op2 "of" :op3 "liberty"))
      :ARG2 (a / amr-unknown))

# ::snt when was trump born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "trump"))
      :time (a / amr-unknown))

# ::snt how many bots are in a dollar
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "bot"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "dollar")))

# ::snt where is place
(b / be-located-at-91
      :ARG1 (p / place)
      :ARG2 (a / amr-unknown))

# ::snt what is the boiling point of water
(b / boil-01
      :ARG1 (w / water)
      :mod (t / temperature-quantity
            :quant (a / amr-unknown)))

# ::snt how many people live in los angeles
(l / live-01
      :ARG0 (p / person
            :quant (a / amr-unknown))
      :location (c / city :name (n / name :op1 "los" :op2 "angeles")))

# ::snt what is the largest active volcano on earth
(h2 / have-degree-91
      :ARG1 (v / volcano
            :mod (a / amr-unknown))
      :ARG2 (l / large-01
            :ARG1 v)
      :ARG3 (m / most)
      :ARG5 (v2 / volcano
            :part-of (p / planet :name (n2 / name :op1 "earth"))
            :ARG0-of (a2 / activity-06)))

# ::snt current forex rates
(r / rate-01
      :ARG0 (o / organization :name (n / name :op1 "forex"))
      :ARG2 (a / amr-unknown)
      :time (c / current))

# ::snt when is the next lakers game
(b / be-temporally-at-91
      :ARG1 (g / game
            :mod (t / team :name (n / name :op1 "lakers"))
            :ARG1-of (n2 / next-01))
      :ARG2 (a / amr-unknown))

# ::snt is the pound up or down against the dollar
(a / amr-choice
      :op1 (u / up-02
            :ARG1 (c / currency :name (n / name :op1 "pound"))
            :ARG1-of (c2 / compare-01
                  :ARG2 (c3 / currency :name (n2 / name :op1 "dollar"))))
      :op2 (d / down-03
            :ARG1 c
            :ARG1-of c2))

# ::snt please find today's stock prices for samsung company
(f / find-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "samsung")))
                  :time (t / today))))

# ::snt when was the us got freedom
(f / free-04
      :ARG1 (c / country :name (n / name :op1 "us"))
      :time (a / amr-unknown))

# ::snt calculate the resistance of this resistor
(c / calculate-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (r / resist-01
            :ARG1 (t / thing
                  :ARG0-of (r2 / resist-01)
                  :mod (t2 / this))))

# ::snt what is hair made up of
(m / make-up-07
      :ARG0 (a / amr-unknown)
      :ARG1 (h / hair))

# ::snt alexa give me everything you know about bob dean
(g / give-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (e / everything
            :ARG1-of (k / know-01
                  :ARG0 y)
            :topic (p / person :name (n / name :op1 "bob" :op2 "dean")))
      :ARG2 (i / i))

# ::snt is it better to invest or save
(a2 / amr-choice
      :op1 (h / have-degree-91
            :ARG1 (i2 / invest-01)
            :ARG2 (g / good-02
                  :ARG1 i2)
            :ARG3 (m / more)
            :ARG4 (s / save-01))
      :op2 (h2 / have-degree-91
            :ARG1 s
            :ARG2 (g2 / good-02
                  :ARG1 s)
            :ARG3 (m2 / more)
            :ARG4 i2))

# ::snt please defined about internet
(d / define-01
      :ARG1 (i2 / internet)
      :ARG2 (a / amr-unknown))

# ::snt who is lenin
(p / person :name (n / name :op1 "lenin")
      :mod (a / amr-unknown))

# ::snt who assassinated lincoln
(a / assassinate-01
      :ARG0 (p / person
            :mod (a2 / amr-unknown))
      :ARG1 (p2 / person :name (n2 / name :op1 "lincoln")))

# ::snt what is the point of a banana
(p / point-03
      :ARG1 (b / banana)
      :ARG2 (a / amr-unknown))

# ::snt can you really see russia from alaska
(s / see-01
      :ARG0 (y / you)
      :ARG1 (c / country :name (n / name :op1 "russia"))
      :source (s2 / state :name (n2 / name :op1 "alaska"))
      :ARG1-of (r / real-04)
      :polarity (a / amr-unknown))

# ::snt person name
(n / name-01
      :ARG1 (p / person)
      :ARG2 (a / amr-unknown))

# ::snt what is the us dollar to euro exchange rate
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "euro")))
      :ARG2 (a / amr-unknown))

# ::snt how much of the earth is made up of water
(m / make-up-07
      :ARG0 (w / water)
      :ARG1 (p / planet :name (n / name :op1 "earth")
            :mod (p2 / percentage-entity
                  :value (a / amr-unknown))))

# ::snt synonyms
(s / synonym :plural +)

# ::snt what is a stock price of tata
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "tata")))
      :ARG2 (a / amr-unknown))

# ::snt what is two plus four
(e / equal-01
      :ARG1 (s / sum-of :op1 2 :op2 4)
      :ARG2 (a / amr-unknown))

# ::snt how old is trump
(p / person :name (n / name :op1 "trump")
      :age (a / amr-unknown))

# ::snt please describe an elephant to me
(d / describe-01 :polite + :mode imperative
      :ARG0 (y / you)
      :ARG1 (e / elephant))

# ::snt how are stocks for google
(s / stock
      :mod (c / company :name (n / name :op1 "google"))
      :mod (a / amr-unknown))

# ::snt tell me everything about albert einstein
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (e2 / everything
            :topic (p / person :name (n / name :op1 "albert" :op2 "einstein")))
      :ARG2 (i / i))

# ::snt what is the biggest city in the world
(h2 / have-degree-91
      :ARG1 (c / city
            :mod (a / amr-unknown))
      :ARG2 (b / big-01
            :ARG1 c)
      :ARG3 (m / most)
      :ARG5 (w / world))

# ::snt where was the last aerosmith concert
(b / be-located-at-91
      :ARG1 (c / concert
            :mod (m / music-group :name (n / name :op1 "aerosmith"))
            :mod (l / last))
      :ARG2 (a / amr-unknown))

# ::snt is eddie murphy still alive
(l / live-01
      :ARG0 (p / person :name (n / name :op1 "eddie" :op2 "murphy"))
      :mod (s / still)
      :polarity (a / amr-unknown))

# ::snt what is two hundred divided by ten
(e / equal-01
      :ARG1 (q / quotient-of :op1 200 :op2 10)
      :ARG2 (a / amr-unknown))

# ::snt what are the longest rivers in the world
(h2 / have-degree-91
      :ARG1 (r / river :plural +
            :mod (a / amr-unknown))
      :ARG2 (l / long-03
            :ARG1 r)
      :ARG3 (m / most)
      :ARG5 (r2 / river
            :part-of (w / world)))

# ::snt what is trump's approval rating
(r / rate-01
      :ARG1 (a / approve-01
            :ARG1 (p / person :name (n / name :op1 "trump")))
      :ARG2 (a2 / amr-unknown))

# ::snt for how much can we exchange us dollar for indian rupee
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "indian" :op2 "rupee")))
      :ARG2 (a / amr-unknown))

# ::snt olly find a description about a samsung t. v.
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (d / describe-01
                  :ARG1 (t2 / television
                        :mod (c / company :name (n / name :op1 "samsung"))))))

# ::snt how tall is frank goggins
(t / tall-01
      :ARG1 (p / person :name (n / name :op1 "frank" :op2 "goggins"))
      :ARG2 (a / amr-unknown))

# ::snt siri what does obstacle mean
(m / mean-01
      :ARG1 (o / obstacle)
      :ARG2 (a / amr-unknown))

# ::snt how is jennifer garner's career doing
(h / have-manner-91
      :ARG1 (c / career
            :poss (p / person :name (n / name :op1 "jennifer" :op2 "garner")))
      :ARG2 (a / amr-unknown))

# ::snt how many euros for one u. s. d.
(h / have-quant-91
      :ARG1 (c2 / currency :name (n2 / name :op1 "euro"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c / currency :quant 1 :name (n / name :op1 "u." :op2 "s." :op3 "d.")))

# ::snt what is the capital of denmark
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c2 / country :name (n2 / name :op1 "denmark"))
      :ARG2 (c / capital))

# ::snt for what is famous ellen degeneres
(f / fame-01
      :ARG1 (p / person :name (n / name :op1 "ellen" :op2 "degeneres"))
      :ARG2 (a / amr-unknown))

# ::snt geography melbourne
(g / geography
      :domain (c / city :name (n / name :op1 "melbourne"))
      :mod (a / amr-unknown))

# ::snt look up the definition of blunder
(l / look-up-05 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (d / define-01
                  :ARG1 (b / blunder))))

# ::snt who is arnold schwarzenegger
(p / person :name (n / name :op1 "arnold" :op2 "schwarzenegger")
      :mod (a / amr-unknown))

# ::snt where was bill clinton born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "bill" :op2 "clinton"))
      :location (a / amr-unknown))

# ::snt give the definition of motivation
(d / define-01
      :ARG1 (m / motivation)
      :ARG2 (a / amr-unknown))

# ::snt what is the definition of capricious
(d / define-01
      :ARG1 (c / capricious)
      :ARG2 (a / amr-unknown))

# ::snt define the word novel
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (n / novel
            :mod (w / word)))

# ::snt what does a basketball feel like
(f / feel-05
      :ARG1 (b / basketball)
      :ARG2 (a / amr-unknown))

# ::snt how many miles is it between illinois and louisiana
(f / far-01
      :ARG1 (s / state :name (n / name :op1 "illinois"))
      :ARG2 (s2 / state :name (n2 / name :op1 "louisiana"))
      :extent (d / distance-quantity
            :quant (a / amr-unknown)
            :unit (m / mile)))

# ::snt i want to know the result of twenty is to two
(e / equal-01
      :ARG1 (p / product-of :op1 20 :op2 2)
      :ARG2 (a / amr-unknown)
      :ARG1-of (k / know-01
            :ARG0 (i / i)
            :ARG1-of (w / want-01
                  :ARG0 i)))

# ::snt what is the square root of thirty four
(e / equal-01
      :ARG1 (r / root-of :op1 34 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt define framework
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (f / framework))

# ::snt how tall is mel gibson
(t / tall-01
      :ARG1 (p / person :name (n / name :op1 "mel" :op2 "gibson"))
      :ARG2 (a / amr-unknown))

# ::snt what is the capital of nigeria
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c2 / country :name (n2 / name :op1 "nigeria"))
      :ARG2 (c / capital))

# ::snt where are the rocky mountains located
(b / be-located-at-91
      :ARG1 (m / mountain :name (n / name :op1 "rocky" :op2 "mountains"))
      :ARG2 (a / amr-unknown))

# ::snt can you do nine plus two
(e / equal-01
      :ARG1 (s / sum-of :op1 9 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt what is garam masala
(f / food-dish :name (n / name :op1 "garam" :op2 "masala")
      :mod (a / amr-unknown))

# ::snt tell me the exchange rate for the yen
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :name (n / name :op1 "yen")))))
      :ARG2 (i / i))

# ::snt how much is one plus one
(e / equal-01
      :ARG1 (s / sum-of :op1 1 :op2 1)
      :ARG2 (a / amr-unknown))

# ::snt what are the tallest mountains in america
(h2 / have-degree-91
      :ARG1 (m / mountain :plural +
            :mod (a / amr-unknown))
      :ARG2 (t / tall-01
            :ARG1 m)
      :ARG3 (m2 / most)
      :ARG5 (m3 / mountain
            :part-of (c / country :name (n2 / name :op1 "america"))))

# ::snt stock price
(p / price-01
      :ARG1 (s / stock)
      :ARG2 (a / amr-unknown))

# ::snt ok google what is a president
(g / google-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :domain (p / president)))

# ::snt what is the current stock price of samsung
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "samsung")))
      :ARG2 (a / amr-unknown)
      :time (c2 / current))

# ::snt what is the height of monali thakur
(h / high-02
      :ARG1 (p / person :name (n / name :op1 "monali" :op2 "thakur"))
      :extent (a / amr-unknown))

# ::snt why is the sky blue
(c / cause-01
      :ARG0 (a / amr-unknown)
      :ARG1 (b / blue-01
            :ARG1 (s / sky)))

# ::snt compare the stock prices for nintendo and sony and tell me which ones are better
(a / and
      :op1 (h / have-mod-91
            :ARG1 (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "nintendo")))
                  :ARG1-of (c2 / compare-01
                        :ARG2 (p2 / price-01
                              :ARG1 (s2 / stock
                                    :mod (c3 / company :name (n2 / name :op1 "sony"))))))
            :ARG2 (a2 / amr-unknown))
      :op2 (a3 / amr-choice
            :op1 (h2 / have-degree-91
                  :ARG1 s
                  :ARG2 (g / good-02
                        :ARG1 s)
                  :ARG3 (m / more)
                  :ARG4 s2)
            :op2 (h3 / have-degree-91
                  :ARG1 s2
                  :ARG2 (g2 / good-02
                        :ARG1 s2)
                  :ARG3 (m2 / more)
                  :ARG4 s)))

# ::snt what is the current share value for m. s. n. b. c.
(v / value-01
      :ARG1 (s / share
            :mod (c / company :name (n / name :op1 "m." :op2 "s." :op3 "n." :op4 "b." :op5 "c.")))
      :ARG2 (a / amr-unknown)
      :time (c2 / current))

# ::snt what price google up to
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "google")))
      :ARG2 (a / amr-unknown))

# ::snt where does sophia vergara live
(l / live-01
      :ARG0 (p / person :name (n / name :op1 "sophia" :op2 "vergara"))
      :location (a / amr-unknown))

# ::snt find exchange rate for u. s. d. to euro
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
                        :ARG3 (c2 / currency :name (n2 / name :op1 "euro"))))))

# ::snt define oscillate
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (o / oscillate))

# ::snt what is the most current exchange rate in china
(h / have-degree-91
      :ARG1 (r / rate-01
            :ARG1 (e / exchange-01)
            :ARG2 (a / amr-unknown)
            :location (c / country :name (n / name :op1 "china")))
      :ARG2 (c2 / current)
      :ARG3 (m / most))

# ::snt tell me when obama was born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "obama"))
      :time (a / amr-unknown))

# ::snt show me the records of sachin tendulkar
(s / show-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing :plural +
            :ARG1-of (r / record-01
                  :ARG0 (p / person :name (n2 / name :op1 "sachin" :op2 "tendulkar"))))
      :ARG2 (i / i))

# ::snt what is the least tornado prone state in the entire us
(h2 / have-degree-91
      :ARG1 (s / state
            :mod (a / amr-unknown))
      :ARG2 (p / prone-01
            :ARG1 s
            :ARG2 (t / tornado))
      :ARG3 (l / least)
      :ARG5 (s2 / state
            :part-of (c / country :name (n2 / name :op1 "us")
                  :mod (e / entire))))

# ::snt what is the deepest point on earth
(h2 / have-degree-91
      :ARG1 (p / point
            :mod (a / amr-unknown))
      :ARG2 (d / deep-02
            :ARG1 p)
      :ARG3 (m / most)
      :ARG5 (p2 / point
            :location (p3 / planet :name (n2 / name :op1 "earth"))))

# ::snt tell me which stocks were the biggest gainers in stock market nasdaq today
(t2 / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s3 / stock :plural +
            :ARG1-of (g / gain-01
                  :ARG1-of (h / have-degree-91
                        :ARG2 (b / big-01
                              :ARG1 g)
                        :ARG3 (m / most)
                        :ARG5 (s2 / stock
                              :ARG1-of (m2 / market-01
                                    :medium (o / organization :name (n2 / name :op1 "nasdaq"))))
                        :time (t / today))))
      :ARG2 (i / i))

# ::snt how old is rue mcclanahan
(p / person :name (n / name :op1 "rue" :op2 "mcclanahan")
      :age (a / amr-unknown))

# ::snt how high is pikes peak
(h / high-02
      :ARG1 (m / mountain :name (n / name :op1 "pikes" :op2 "peak"))
      :extent (a / amr-unknown))

# ::snt what brand hair spray does donald trump use
(u / use-01
      :ARG0 (p / person :name (n / name :op1 "donald" :op2 "trump"))
      :ARG1 (t / thing
            :ARG1-of (s / spray-01
                  :ARG2 (h / hair))
            :ARG1-of (b / brand-01)
            :mod (a / amr-unknown)))

# ::snt what is the current stock rate of facebook
(r / rate-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "facebook")))
      :ARG2 (a / amr-unknown)
      :time (c2 / current))

# ::snt what is population per mile in asia
(p / populate-01
      :ARG1 (c / continent :name (n / name :op1 "asia"))
      :ARG2 (p2 / person
            :ARG1-of (h / have-quant-91
                  :ARG2 (a / amr-unknown)
                  :ARG4 (a2 / area-quantity :quant 1
                        :unit (s / square-mile)))))

# ::snt define capricious
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c / capricious))

# ::snt what is the linear equation
(e / equate-01
      :ARG1-of (l / line-03)
      :mod (a / amr-unknown))

# ::snt what is the worlds record for the longest head of hair
(h / have-degree-91
      :ARG1 (h2 / hair
            :part-of (h3 / head)
            :mod (a / amr-unknown))
      :ARG2 (l / long-03
            :ARG1 h2)
      :ARG3 (m / most)
      :ARG5 (w2 / world)
      :ARG1-of (r / record-01))

# ::snt what was elvis presley's birthday
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "elvis" :op2 "presley"))
      :time (a / amr-unknown))

# ::snt what's the exchange rates
(r / rate-01
      :ARG1 (e / exchange-01)
      :ARG2 (a / amr-unknown))

# ::snt what about ashwin
(p / person :name (n / name :op1 "ashwin")
      :mod (a / amr-unknown))

# ::snt what percentage of the us population is related to the english royal bloodline in some way
(r / related-04
      :ARG1 (p / percentage-entity
            :value (a / amr-unknown)
            :ARG2-of (c2 / consist-01
                  :ARG1 (p2 / person
                        :ARG0-of (p3 / populate-01
                              :ARG1 (c / country :name (n / name :op1 "us"))))))
      :ARG2 (b / bloodline
            :mod (r2 / royalty)
            :mod (c3 / country :name (n2 / name :op1 "england")))
      :manner (w / way
            :mod (s / some)))

# ::snt how much is a stock of apple worth
(w / worth-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "apple")))
      :ARG2 (a / amr-unknown))

# ::snt does miley cyrus have any siblings
(h3 / have-rel-role-91
      :ARG0 (p / person)
      :ARG1 (p2 / person :name (n / name :op1 "miley" :op2 "cyrus"))
      :ARG2 (s / sibling)
      :polarity (a / amr-unknown))

# ::snt is steph curry married
(m / marry-01
      :ARG1 (p / person :name (n / name :op1 "steph" :op2 "curry"))
      :polarity (a / amr-unknown))

# ::snt when was born abraham lincoln
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "abraham" :op2 "lincoln"))
      :time (a / amr-unknown))

# ::snt what does one u. s. d. equal in aus
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
            :ARG3 (c2 / currency :name (n2 / name :op1 "aus")))
      :ARG2 (a / amr-unknown))

# ::snt how many calories is in an apple
(h / have-quant-91
      :ARG1 (c / calorie
            :part-of (f / food-dish :name (n / name :op1 "apple")))
      :ARG2 (a2 / amr-unknown))

# ::snt let me know about the exchange rate of rupee to dirham
(l2 / let-know-07 :mode imperative
      :ARG0 (y / you)
      :ARG1 (i / i)
      :ARG2 (k / know-01
            :ARG0 i
            :ARG1 (t / thing
                  :ARG2-of (r / rate-01
                        :ARG1 (e / exchange-01
                              :ARG1 (c / currency :name (n / name :op1 "rupee"))
                              :ARG3 (c2 / currency :name (n2 / name :op1 "dirham")))))))

# ::snt what is the exchange rate between the dollar and the euro currently
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "euro")))
      :ARG2 (a / amr-unknown)
      :time (c3 / current))

# ::snt what does blank mean
(m / mean-01
      :ARG1 (b / blank)
      :ARG2 (a / amr-unknown))

# ::snt when did elvis die
(d / die-01
      :ARG1 (p / person :name (n / name :op1 "elvis"))
      :time (a / amr-unknown))

# ::snt answer the equation eight times seven
(e / equal-01
      :ARG1 (p / product-of :op1 8 :op2 7)
      :ARG2 (a / amr-unknown))

# ::snt get me new definition
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (n / new-01))

# ::snt alexa i would like my to tell me the trend on foreign exchange rates
(t / trend-01
      :ARG1 (t2 / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :plural +
                              :mod (f / foreign)))))
      :ARG2 (a / amr-unknown))

# ::snt definition and use in sentence the word absolute
(a / and
      :op1 (d / define-01
            :ARG1 (a2 / absolute
                  :domain (w / word))
            :ARG2 (a3 / amr-unknown))
      :op2 (u / use-01 :mode imperative
            :ARG0 (y / you)
            :ARG1 a2
            :manner (c / consist-01
                  :ARG1 (s / sentence)
                  :ARG2 a2)))

# ::snt what type of pant is a culotte
(c / culotte
      :domain (p / pant
            :mod (a / amr-unknown)))

# ::snt find map
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (m / map))

# ::snt give me the definition for the word pontificate
(d / define-01
      :ARG1 (p / pontificate
            :mod (w / word))
      :ARG2 (a / amr-unknown))

# ::snt explain what a contact lense is
(e / explain-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (l / lens
            :ARG1-of (c / contact-01)))

# ::snt how is shell south stock doing today
(h / have-mod-91
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "shell" :op2 "south")))
      :ARG2 (a / amr-unknown)
      :time (t / today))

# ::snt do you know the definition of school
(d / define-01
      :ARG1 (s / school)
      :ARG2 (a / amr-unknown))

# ::snt how many states have the death penalty
(h / have-quant-91
      :ARG1 (s / state
            :location-of (p2 / penalize-01
                  :manner (d / die-01)))
      :ARG2 (a / amr-unknown))

# ::snt ten percentages of hundred
(e / equal-01
      :ARG1 (p / product-of
            :op1 (p2 / percentage-entity :value 10) :op2 100)
      :ARG2 (a / amr-unknown))

# ::snt describe the statue of liberty
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (m / monument :name (n / name :op1 "statue" :op2 "of" :op3 "liberty")))

# ::snt what is justin bieber's birthday
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "justin" :op2 "bieber"))
      :time (a / amr-unknown))

# ::snt how many pesos can i get for a dollar right now
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "pesos"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "dollar"))
      :time (n3 / now
            :degree (r / right-yy)))

# ::snt how many oscars has won meryl streep
(w / win-01
      :ARG0 (p / person :name (n / name :op1 "meryl" :op2 "streep"))
      :ARG1 (a / award :name (n2 / name :op1 "oscars")
            :ARG1-of (h / have-quant-91
                  :ARG2 (a2 / amr-unknown))))

# ::snt definition of computer
(d / define-01
      :ARG1 (c / computer)
      :ARG2 (a / amr-unknown))

# ::snt keep me updated on stock market prices
(u / update-02 :mode imperative
      :ARG0 (y / you)
      :ARG1 (i / i)
      :ARG2 (t / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / stock :plural +
                        :ARG1-of (m / market-01)))))

# ::snt have stocks gone up or down today for walmart
(a / amr-choice
      :op1 (u / up-02
            :ARG1 (s / stock
                  :mod (c / company :name (n / name :op1 "walmart"))))
      :op2 (d / down-03
            :ARG1 s)
      :time (t / today))

# ::snt what is the stock value of google
(v / value-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "google")))
      :ARG2 (a / amr-unknown))

# ::snt how old is hugh jackman
(p / person :name (n / name :op1 "hugh" :op2 "jackman")
      :age (a / amr-unknown))

# ::snt what does hypothesis mean
(m / mean-01
      :ARG1 (t / thing
            :ARG1-of (h2 / hypothesize-01))
      :ARG2 (a / amr-unknown))

# ::snt how many times has adel gone diamond
(h / have-frequency-91
      :ARG1 (g / go-08
            :ARG1 (p / person :name (n / name :op1 "adel"))
            :ARG2 (d / diamond))
      :ARG2 (a / amr-unknown))

# ::snt please show me the exchange rate between the dollar and the yen
(s / show-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :name (n / name :op1 "dollar"))
                        :ARG3 (c2 / currency :name (n2 / name :op1 "yen")))))
      :ARG2 (i / i))

# ::snt what is meryl streep famous for
(f / fame-01
      :ARG1 (p / person :name (n / name :op1 "meryl" :op2 "streep"))
      :ARG2 (a / amr-unknown))

# ::snt how old is chuck norris
(p / person :name (n / name :op1 "chuck" :op2 "norris")
      :age (a / amr-unknown))

# ::snt definition for object name
(d / define-01
      :ARG1 (t / thing
            :ARG2-of (n / name-01
                  :ARG1 (o / object)))
      :ARG2 (a / amr-unknown))

# ::snt what is the current stock price for hasbro
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "hasbro")))
      :ARG2 (a / amr-unknown)
      :time (c2 / current))

# ::snt what is the definition of textual
(d / define-01
      :ARG1 (t / textual)
      :ARG2 (a / amr-unknown))

# ::snt how old is morgan freeman
(p / person :name (n / name :op1 "morgan" :op2 "freeman")
      :age (a / amr-unknown))

# ::snt how hilly is it in sacramento
(h / hill
      :part-of (c / city :name (n / name :op1 "sacramento"))
      :mod (a / amr-unknown))

# ::snt how did michael jackson die
(c / cause-01
      :ARG0 (a / amr-unknown)
      :ARG1 (d / die-01
            :ARG1 (p / person :name (n / name :op1 "michael" :op2 "jackson"))))

# ::snt high stock price
(p / price-01
      :ARG1 (s / stock)
      :ARG2 (a / amr-unknown)
      :ARG1-of (h / high-02))

# ::snt when was jamie fox born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "jamie" :op2 "fox"))
      :time (a / amr-unknown))

# ::snt what is the netflix stock price
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "netflix")))
      :ARG2 (a / amr-unknown))

# ::snt how tall is trevor noah
(t / tall-01
      :ARG1 (p / person :name (n / name :op1 "trevor" :op2 "noah"))
      :ARG2 (a / amr-unknown))

# ::snt tell me summary forecast microsoft stock forecast to thirty days ahead
(f / forecast-01
      :ARG1 (a / amr-unknown)
      :topic (s / stock
            :mod (c / company :name (n / name :op1 "microsoft")))
      :time (a2 / after
            :op1 (n2 / now)
            :quant (t / temporal-quantity :quant 30
                  :unit (d / day)))
      :ARG1-of (s2 / summarize-01))

# ::snt who is celebrity
(p2 / person
      :mod (c / celebrity)
      :mod (a / amr-unknown))

# ::snt how old is kim kardashian
(p / person :name (n / name :op1 "kim" :op2 "kardashian")
      :age (a / amr-unknown))

# ::snt tell me about the solar powered garden stakes
(t / tell-01
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (s / stake
                  :purpose (g / garden-01)
                  :ARG1-of (p / power-01
                        :ARG0 (s2 / star :name (n / name :op1 "sun")))))
      :ARG2 (i / i))

# ::snt where are the rocky mountains
(b / be-located-at-91
      :ARG1 (m / mountain-range :name (n / name :op1 "rocky" :op2 "mountains"))
      :ARG2 (a / amr-unknown))

# ::snt what is the distance between new york and berlin
(d / distant-02
      :ARG1 (c / city :name (n / name :op1 "new" :op2 "york"))
      :ARG2 (c2 / city :name (n2 / name :op1 "berlin"))
      :extent (a / amr-unknown))

# ::snt how much is one dollar in pounds
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "pounds"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "dollar")))

# ::snt how much is indian rupee going against u. s. dollar
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "indian" :op2 "rupee"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :name (n2 / name :op1 "u." :op2 "s." :op3 "dollar")))

# ::snt hey what does incite mean
(m / mean-01
      :ARG1 (i2 / incite)
      :ARG2 (a / amr-unknown))

# ::snt how many teeth does ryan reynolds have
(h / have-quant-91
      :ARG1 (t / tooth
            :part-of (p / person :name (n / name :op1 "ryan" :op2 "reynolds")))
      :ARG2 (a / amr-unknown))

# ::snt add five plus eighteen minus four please
(e2 / equal-01 :polite +
      :ARG1 (d / difference-of
            :op1 (t / thing
                  :ARG2-of (e / equal-01
                        :ARG1 (s / sum-of :op1 5 :op2 18))) :op2 4)
      :ARG2 (a / amr-unknown))

# ::snt what is the capital of washington
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (s / state :name (n2 / name :op1 "washington"))
      :ARG2 (c / capital))

# ::snt who won the last five n. c. a. a. men's basketball tournament
(w / win-01
      :ARG0 (a / amr-unknown)
      :ARG1 (t / tournament :quant 5 :name (n / name :op1 "n." :op2 "c." :op3 "a." :op4 "a." :op5 "men's" :op6 "basketball" :op7 "tournament")
            :mod (l / last)))

# ::snt distance to local landmarks
(d / distant-02
      :ARG1 (l / landmark :plural +
            :ARG1-of (l2 / local-02))
      :extent (a / amr-unknown))

# ::snt what awards did erica grebe win last night
(w / win-01
      :ARG0 (p / person :name (n / name :op1 "erica" :op2 "grabe"))
      :ARG1 (t / thing :plural +
            :ARG1-of (a / award-01
                  :ARG2 p)
            :mod (a2 / amr-unknown))
      :time (n2 / night
            :mod (l / last)))

# ::snt what is the price of starbuck's stock
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "starbucks")))
      :ARG2 (a / amr-unknown))

# ::snt how old is david bowie
(p / person :name (n / name :op1 "david" :op2 "bowie")
      :age (a / amr-unknown))

# ::snt who played harry potter in the films
(p / play-02
      :ARG0 (p2 / person
            :mod (a / amr-unknown))
      :ARG1 (p3 / person :name (n2 / name :op1 "harry" :op2 "potter"))
      :subevent-of (f / film-01))

# ::snt where does janet jackson live
(l / live-01
      :ARG0 (p / person :name (n / name :op1 "janet" :op2 "jackson"))
      :location (a / amr-unknown))

# ::snt exchanges rates any problems
(p / problem
      :topic (r / rate-01
            :ARG1 (e / exchange-01))
      :polarity (a / amr-unknown))

# ::snt what is the difference between roman and grigorean calendar
(d / differ-02
      :ARG1 (c / calendar :name (n / name :op1 "roman" :op2 "calendar"))
      :ARG2 (c2 / calendar :name (n2 / name :op1 "grigorean" :op2 "calendar"))
      :ARG3 (a / amr-unknown))

# ::snt what are converse shoes
(s / shoe
      :mod (c / company :name (n / name :op1 "converse"))
      :mod (a / amr-unknown))

# ::snt describe the current state of politics
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / politics
            :time (c / current)
            :mod (s / state)))

# ::snt just let me know the population of india
(l / let-know-07 :mode imperative
      :ARG0 (y / you)
      :ARG1 (i / i)
      :ARG2 (q / quantity
            :quant-of (p2 / person)
            :ARG2-of (p / populate-01
                  :ARG1 (c / country :name (n / name :op1 "india"))))
      :mod (j / just))

# ::snt age of brad pitt
(p / person :name (n / name :op1 "brad" :op2 "pitt")
      :age (a / amr-unknown))

# ::snt dollar rate at present
(r / rate-01
      :ARG1 (c / currency :name (n / name :op1 "dollar"))
      :ARG2 (a / amr-unknown)
      :time (n2 / now))

# ::snt how much is one american dollars worth in england
(w / worth-01
      :ARG1 (c3 / currency :quant 1 :name (n2 / name :op1 "american" :op2 "dollars"))
      :ARG2 (a / amr-unknown)
      :location (c2 / country :name (n / name :op1 "england")))

# ::snt how much is the dollar worth in canada
(w / worth-01
      :ARG1 (c / currency :name (n / name :op1 "dollar"))
      :ARG2 (a / amr-unknown)
      :location (c2 / country :name (n2 / name :op1 "canada")))

# ::snt how many grams are there for a cup of butter
(h / have-quant-91
      :ARG1 (m / mass-quantity
            :unit (g / gram))
      :ARG2 (a / amr-unknown)
      :ARG4 (b / butter
            :quant (v / volume-quantity :quant 1
                  :unit (c / cup))))

# ::snt olly how much can chris helmsworth bench press
(p / press-01
      :ARG0 (p2 / person :name (n / name :op1 "chris" :op2 "hemsworth"))
      :ARG1 (a / amr-unknown)
      :location (b / bench))

# ::snt please give me detail of one yen equals dollar
(d / detail-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (q / quantity
            :ARG2-of (h / have-quant-91
                  :ARG1 (c / currency :name (n / name :op1 "dollar"))
                  :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "yen")))))

# ::snt where is yellowstone
(b / be-located-at-91
      :ARG1 (p / park :name (n / name :op1 "yellowstone"))
      :ARG2 (a / amr-unknown))

# ::snt is willie nelson still alive
(l / live-01
      :ARG0 (p / person :name (n / name :op1 "willie" :op2 "nelson"))
      :polarity (a / amr-unknown)
      :mod (s / still))

# ::snt define forensic
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (f / forensic))

# ::snt what is the capital of maryland
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (s / state :name (n2 / name :op1 "maryland"))
      :ARG2 (c / capital))

# ::snt explain the geographical location of india
(e / explain-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (l / location
            :mod (g / geography)
            :location-of (c / country :name (n / name :op1 "india"))))

# ::snt how much is one hundred and thirty six plus three hundred and eighty seven
(e / equal-01
      :ARG1 (s / sum-of :op1 136 :op2 387)
      :ARG2 (a / amr-unknown))

# ::snt explain the book of daniel to me
(e / explain-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (b / book :name (n / name :op1 "book" :op2 "of" :op3 "daniel"))
      :ARG2 (i / i))

# ::snt where is nayagara falls located
(b / be-located-at-91
      :ARG1 (l / location :name (n / name :op1 "nayagara" :op2 "falls"))
      :ARG2 (a / amr-unknown))

# ::snt how much is an euro worth
(w / worth-01
      :ARG1 (c / currency :quant 1 :name (n / name :op1 "euro"))
      :ARG2 (a / amr-unknown))

# ::snt what is the definition of forensic
(d / define-01
      :ARG1 (f / forensic)
      :ARG2 (a / amr-unknown))

# ::snt may i have a list of five star hotels in paris
(l / list-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (h / hotel :plural +
            :location (c / city :name (n2 / name :op1 "paris"))
            :mod (s / star :quant 5)))

# ::snt tell me the largest ocean in the world
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (o / ocean
            :ARG1-of (h / have-degree-91
                  :ARG2 (l / large-01
                        :ARG1 o)
                  :ARG3 (m / most)
                  :ARG5 (o2 / ocean
                        :part-of (w / world))))
      :ARG2 (i / i))

# ::snt how old is jennifer garner
(p / person :name (n / name :op1 "jennifer" :op2 "garner")
      :age (a / amr-unknown))

# ::snt how old is madonna
(p / person :name (n / name :op1 "madonna")
      :age (a / amr-unknown))

# ::snt what is a googleplex
(g / googleplex
      :mod (a / amr-unknown))

# ::snt what's the word orange mean
(m / mean-01
      :ARG1 (o / orange
            :mod (w / word))
      :ARG2 (a / amr-unknown))

# ::snt alexa i've got dollars for the month how much can i spend every day this month
(r / rate-entity-91
      :ARG1 (m / monetary-quantity
            :quant (a / amr-unknown)
            :unit (d / dollar)
            :ARG1-of (s / spend-01
                  :ARG0 (i / i)
                  :ARG1-of (p / possible-01)))
      :ARG2 (t2 / temporal-quantity :quant 1
            :unit (d2 / day))
      :ARG3 (t / temporal-quantity :quant 1
            :unit (d3 / day))
      :duration (t3 / temporal-quantity :quant 1
            :unit (m2 / month))
      :condition (g / get-02
            :ARG0 i
            :ARG1 (d4 / dollar :plural +)
            :duration t3))

# ::snt give description of statue of liberty
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (m / monument :name (n / name :op1 "statue" :op2 "of" :op3 "liberty")))

# ::snt give me the average five year stock price of home depot
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "home" :op2 "depot")))
      :ARG1-of (a2 / average-01
            :ARG2 (m / monetary-quantity
                  :quant (a / amr-unknown))
            :duration (t / temporal-quantity :quant 5
                  :unit (y / year))))

# ::snt how would the volkswagen golf car look like
(l / look-02
      :ARG0 (c / car-make :name (n / name :op1 "volkswagen" :op2 "golf"))
      :ARG1 (a / amr-unknown))

# ::snt who has won the most number of oscars ever
(w / win-01
      :ARG0 (p / person
            :mod (a / amr-unknown))
      :ARG1 (a2 / award :name (n2 / name :op1 "oscar")
            :ARG1-of (h / have-quant-91
                  :ARG3 (m / most)))
      :time (e / ever))

# ::snt show stock of goog
(s / show-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s2 / stock
            :mod (c / company :name (n / name :op1 "goog"))))

# ::snt what is the answer to two plus two
(e / equal-01
      :ARG1 (s / sum-of :op1 2 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt give me the opening stock price of acer computers
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "acer" :op2 "computers")))
      :ARG2 (a / amr-unknown)
      :time (o / open-02))

# ::snt stock prices at walmart
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "walmart")))
      :ARG2 (a / amr-unknown))

# ::snt what is the make up of the chair
(m / make-up-07
      :ARG0 (a / amr-unknown)
      :ARG1 (c / chair))

# ::snt find the meaning
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (m / mean-01)))

# ::snt what movies is kevin spacey in
(s / star-01
      :ARG1 (p / person :name (n / name :op1 "kevin" :op2 "spacey"))
      :ARG2 (m / movie :plural +
            :mod (a / amr-unknown)))

# ::snt where is the south pole
(b / be-located-at-91
      :ARG1 (w / world-region :name (n / name :op1 "south" :op2 "pole"))
      :ARG2 (a / amr-unknown))

# ::snt consequences to actions
(c / consequence-03
      :ARG1 (a / act-02)
      :ARG2 (a2 / amr-unknown))

# ::snt where is the grand canyon
(b / be-located-at-91
      :ARG1 (l / location :name (n / name :op1 "grand" :op2 "canyon"))
      :ARG2 (a / amr-unknown))

# ::snt i want to figure out the stock on microsoft
(w / want-01
      :ARG0 (i / i)
      :ARG1 (f / figure-out-05
            :ARG0 i
            :ARG1 (s / stock
                  :mod (c / company :name (n / name :op1 "microsoft")))))

# ::snt give me the specs on the bugatti veyron
(s / specify-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c / car-make :name (n / name :op1 "bugatti" :op2 "veyron")))

# ::snt stock company name
(n / name-01
      :ARG1 (c / company
            :mod (s / stock))
      :ARG2 (a / amr-unknown))

# ::snt what's two plus two
(e / equal-01
      :ARG1 (s / sum-of :op1 2 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt what is the stock price of nike today
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "nike")))
      :ARG2 (a / amr-unknown)
      :time (t / today))

# ::snt what is a hibachi grill
(p / product :name (n / name :op1 "hibachi" :op2 "grill")
      :mod (a / amr-unknown))

# ::snt how is i. b. m. doing
(d / do-02
      :ARG0 (c / company :name (n / name :op1 "i." :op2 "b." :op3 "m."))
      :manner (a / amr-unknown))

# ::snt what is four plus five
(e / equal-01
      :ARG1 (s / sum-of :op1 4 :op2 5)
      :ARG2 (a / amr-unknown))

# ::snt how have megatel shares done last week
(d / do-02
      :ARG0 (s / share
            :mod (c / company :name (n / name :op1 "megatel")))
      :manner (a / amr-unknown)
      :time (b / before
            :op1 (n2 / now)
            :duration (t / temporal-quantity :quant 1
                  :unit (w / week))))

# ::snt can you please tell me what is the meaning of the word turnt
(t2 / tell-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t3 / thing
            :ARG2-of (m / mean-01
                  :ARG1 (t / turnt
                        :mod (w / word))))
      :ARG2 (i / i))

# ::snt what is the current exchange rate with the g. b. p.
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "g." :op2 "b." :op3 "p.")))
      :ARG2 (a / amr-unknown)
      :time (c2 / current))

# ::snt what does flabbergasted mean
(m / mean-01
      :ARG1 (f2 / flabbergast-01)
      :ARG2 (a / amr-unknown))

# ::snt what is the population of russia
(p2 / populate-01
      :ARG1 (c / country :name (n / name :op1 "russia"))
      :ARG2 (a / amr-unknown))

# ::snt what does obsessed mean
(m / mean-01
      :ARG1 (o / obsess-01)
      :ARG2 (a / amr-unknown))

# ::snt is one divisible by three
(e / equal-01
      :ARG1 (t / thing
            :ARG1-of (r / remain-01
                  :ARG2 (q / quotient-of :op1 1 :op2 3)))
      :ARG2 0
      :polarity (a / amr-unknown))

# ::snt what is a monitor
(h / have-purpose-91
      :ARG1 (t / thing
            :instrument-of (m / monitor-01))
      :ARG2 (a / amr-unknown))

# ::snt what character does chris evans play
(p / play-02
      :ARG0 (p2 / person :name (n / name :op1 "chris" :op2 "evans"))
      :ARG1 (c / character
            :mod (a / amr-unknown)))

# ::snt currency exchange rates
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency))
      :ARG2 (a / amr-unknown))

# ::snt who was the twenty fifth president of the united states of america
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c / country :name (n / name :op1 "united" :op2 "states" :op3 "of" :op4 "america"))
      :ARG2 (p / president)
      :ord (o / ordinal-entity :value 25))

# ::snt who is the better half of obama
(m / marry-01
      :ARG1 (p / person :name (n / name :op1 "obama"))
      :ARG2 (p2 / person
            :mod (a / amr-unknown)))

# ::snt how much does one share of stock in lego cost
(c / cost-01
      :ARG1 (s / stock :quant 1
            :mod (c2 / company :name (n / name :op1 "lego")))
      :ARG2 (a / amr-unknown))

# ::snt what is the definition of inchoate
(d / define-01
      :ARG1 (i2 / inchoate)
      :ARG2 (a / amr-unknown))

# ::snt are the falklands in south america
(h / have-part-91
      :ARG1 (c / continent :name (n / name :op1 "south" :op2 "america"))
      :ARG2 (i2 / island :name (n2 / name :op1 "falklands"))
      :polarity (a / amr-unknown))

# ::snt describe
(d / describe-01 :mode imperative
      :ARG0 (y / you))

# ::snt what does pda mean
(m / mean-01
      :ARG1 (p / pda)
      :ARG2 (a / amr-unknown))

# ::snt describe headset
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (h / headset))

# ::snt how much is the canadian dollar worth versus u. s. dollar
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "canadian" :op2 "dollar"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "u.s." :op2 "dollar")))

# ::snt what is s. d. in francs
(h / have-quant-91
      :ARG1 (c2 / currency :name (n2 / name :op1 "francs"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c / currency :quant 1 :name (n / name :op1 "s." :op2 "d.")))

# ::snt what exactly is a resin tooth filling
(h / have-mod-91
      :ARG1 (t2 / thing
            :instrument-of (f / fill-01
                  :ARG1 (t / tooth)
                  :ARG2 (r / resin)))
      :ARG2 (a / amr-unknown)
      :mod (e / exact))

# ::snt show conversion rate of u. s. d. and inr
(s / show-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (r / rate-01
                  :ARG1 (c / convert-01
                        :ARG1 (c2 / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
                        :ARG2 (c3 / currency :name (n2 / name :op1 "inr"))))))

# ::snt open internet
(o / open-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (i2 / internet))

# ::snt is barrow alaska above freezing during the year
(h / have-mod-91
      :ARG1 (c / city :name (n / name :op1 "barrow")
            :part-of (s / state :name (n2 / name :op1 "alaska")))
      :ARG2 (a / above
            :op1 (f / freeze-01
                  :ARG1 c))
      :time (y / year)
      :polarity (a2 / amr-unknown))

# ::snt how many three are available in twenty seven
(e / equal-01
      :ARG1 (q / quotient-of :op1 27 :op2 9)
      :ARG2 (a / amr-unknown))

# ::snt suffering consequences
(s / suffer-01
      :ARG1 (c / consequence-03))

# ::snt give me the exchange rate between united states dollar and japanese yen
(g / give-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :name (n / name :op1 "united" :op2 "states" :op3 "dollar"))
                        :ARG3 (c2 / currency :name (n2 / name :op1 "japanese" :op2 "yen")))))
      :ARG2 (i / i))

# ::snt what is the difference between yesterday's and today's stock prices for walmart
(d / differ-02
      :ARG1 (t / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "walmart")))
                  :time (y / yesterday)))
      :ARG2 (t2 / thing
            :ARG2-of (p2 / price-01
                  :ARG1 s
                  :time (t3 / today)))
      :extent (a / amr-unknown))

# ::snt what's the ratio of value of the indian rupee and a u. s. dollar
(e / equal-01
      :ARG1 (r / ratio-of
            :op1 (c / currency :name (n / name :op1 "indian" :op2 "rupee"))
            :op2 (c2 / currency :name (n2 / name :op1 "u." :op2 "s." :op3 "dollar")))
      :ARG2 (a / amr-unknown))

# ::snt what was george eliot's first november el
(n2 / novel
      :poss (p / person :name (n / name :op1 "george" :op2 "eliot"))
      :mod (a / amr-unknown)
      :ord (o / ordinal-entity :value 1))

# ::snt what is the cost of iphone seven
(c / cost-01
      :ARG1 (p / product :name (n / name :op1 "iphone" :op2 "seven"))
      :ARG2 (a / amr-unknown))

# ::snt largest animal
(h / have-degree-91
      :ARG1 (a / animal
            :mod (a2 / amr-unknown))
      :ARG2 (l / large-01
            :ARG1 a)
      :ARG3 (m / most))

# ::snt define broiler for me
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :instrument-of (b / broil-01)))

# ::snt how old is dolly parton
(p / person :name (n / name :op1 "dolly" :op2 "parton")
      :age (a / amr-unknown))

# ::snt what is marketing
(m / market-01
      :mod (a / amr-unknown))

# ::snt what's the sum of the two numbers four and six
(e / equal-01
      :ARG1 (s / sum-of :op1 4 :op2 6)
      :ARG2 (a / amr-unknown))

# ::snt where is the hottest place on earth
(b / be-located-at-91
      :ARG1 (p2 / place
            :ARG1-of (h / have-degree-91
                  :ARG2 (h2 / hot-05
                        :ARG1 p2)
                  :ARG3 (m / most)
                  :ARG5 (p3 / place
                        :location (p / planet :name (n / name :op1 "earth")))))
      :ARG2 (a / amr-unknown))

# ::snt please tell me how many days in a leap year
(t3 / tell-01 :mode imperative :polite +
      :ARG0 (y2 / you)
      :ARG1 (q / quantity
            :ARG2-of (h / have-quant-91
                  :ARG1 (t / temporal-quantity
                        :unit (d / day))
                  :ARG4 (t2 / temporal-quantity :quant 1
                        :unit (y / year)
                        :ARG1-of (l / leap-01))))
      :ARG2 (i / i))

# ::snt can you list off the top ten singles this week
(l / list-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (s / single :quant 10
            :ARG0-of (t / top-02)
            :time (w / week
                  :mod (t2 / this))))

# ::snt how much indian rupees per u. s. d. today
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "indian" :op2 "rupee"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "u." :op2 "s." :op3 "d."))
      :time (t / today))

# ::snt what is denzel washington's next movie
(m2 / movie
      :poss (p / person :name (n2 / name :op1 "denzel" :op2 "washington"))
      :ARG1-of (n / next-01)
      :mod (a / amr-unknown))

# ::snt give the stock price details of motorolla
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "motorolla")))
      :ARG2 (a / amr-unknown)
      :ARG1-of (d / detail-01))

# ::snt given me the exchange rates between u. s. d. and cad
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
            :ARG3 (c2 / currency :name (n2 / name :op1 "cad")))
      :ARG2 (a / amr-unknown))

# ::snt define love
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (l / love-01))

# ::snt please define the word hypocrisy
(d / define-01 :polite + :mode imperative
      :ARG0 (y / you)
      :ARG1 (h / hypocrisy
            :mod (w / word)))

# ::snt who was the current prime minister of britain
(h / have-org-role-91
      :ARG0 (p / person
            :mod (a / amr-unknown))
      :ARG1 (c / country :name (n2 / name :op1 "britain"))
      :ARG2 (m / minister
            :mod (p2 / prime))
      :time (c2 / current))

# ::snt how long is the nile
(l / long-03
      :ARG1 (r / river :name (n / name :op1 "nile"))
      :ARG2 (a / amr-unknown))

# ::snt tell me the profession of celebrity
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / profession
            :domain (c / celebrity))
      :ARG2 (i / i))

# ::snt give me the description about smartphone
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :purpose (p / phone-01)
            :ARG1-of (s / smart-06)))

# ::snt tell me what the word organism means
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (m / mean-01
                  :ARG1 (o / organism
                        :mod (w / word))))
      :ARG2 (i / i))

# ::snt how tall is brad pitt
(t / tall-01
      :ARG1 (p / person :name (n / name :op1 "brad" :op2 "pitt"))
      :ARG2 (a / amr-unknown))

# ::snt where is the statue of liberty located
(b / be-located-at-91
      :ARG1 (m / monument :name (n / name :op1 "statue" :op2 "of" :op3 "liberty"))
      :ARG2 (a / amr-unknown))

# ::snt what age is britney spears
(p / person :name (n / name :op1 "britney" :op2 "spears")
      :age (a / amr-unknown))

# ::snt divide two hundred by four
(e / equal-01
      :ARG1 (q / quotient-of :op1 200 :op2 4)
      :ARG2 (a / amr-unknown))

# ::snt just let me know the area of the asian continent
(l2 / let-know-07 :mode imperative
      :ARG0 (y / you)
      :ARG1 (i / i)
      :ARG2 (k / know-01
            :ARG0 i
            :ARG1 (a / area-quantity
                  :domain (c / continent :name (n / name :op1 "asian" :op2 "continent"))))
      :mod (j / just))

# ::snt solution
(s / solve-01)

# ::snt is emma stone single
(s / single-03
      :ARG1 (p / person :name (n / name :op1 "emma" :op2 "stone"))
      :polarity (a / amr-unknown))

# ::snt tell me the story of ramanujan and his mathematical journey
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / story
            :topic (a / and
                  :op1 (p / person :name (n / name :op1 "ramanujan"))
                  :op2 (j / journey-01
                        :ARG0 p
                        :path (m / mathematics))))
      :ARG2 (i / i))

# ::snt definition xy
(d / define-01
      :ARG1 (s / string-entity :value "xy")
      :ARG2 (a / amr-unknown))

# ::snt give me the stock price of sony
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "sony")))
      :ARG2 (a / amr-unknown))

# ::snt wikipedia page about sean connery
(p / page
      :mod (o / organization :name (n / name :op1 "wikipedia"))
      :topic (p2 / person :name (n2 / name :op1 "sean" :op2 "connery")))

# ::snt i would like if will be smart and intelligent in way it will be familiar with me and recognize the way i like the result will be
(l / like-02
      :ARG0 (i / i)
      :ARG1 (a / and
            :op1 (s / smart-06
                  :ARG1 (t / thing))
            :op2 (i2 / intelligent-01
                  :ARG1 t)
            :purpose (a2 / and
                  :op1 (f / familiarize-01
                        :ARG1 t
                        :ARG2 i)
                  :op2 (r / recognize-02
                        :ARG0 t
                        :ARG1 (r2 / result-01
                              :ARG1-of (l2 / like-01
                                    :ARG0 i))))))

# ::snt how many rivers are there in europe
(h / have-quant-91
      :ARG1 (r / river
            :part-of (c / continent :name (n / name :op1 "europe")))
      :ARG2 (a / amr-unknown))

# ::snt what does a grapefruit look like
(l / look-02
      :ARG0 (f / food-dish :name (n / name :op1 "grapefruit"))
      :ARG1 (a / amr-unknown))

# ::snt how is the stock for compaq doing
(d / do-02
      :ARG0 (s / stock
            :mod (c / company :name (n / name :op1 "compaq")))
      :manner (a / amr-unknown))

# ::snt what shape is a ball
(t / thing
      :ARG1-of (s / shape-01
            :ARG2 (b / ball))
      :mod (a / amr-unknown))

# ::snt list the latest apple stock prices
(l / list-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing :plural +
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "apple"))))
            :mod (l2 / last)))

# ::snt what's the dollar's exchange rate with the euro
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "euro")))
      :ARG2 (a / amr-unknown))

# ::snt what's euro u. s. d. right now
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "euro"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :name (n2 / name :op1 "u." :op2 "s." :op3 "d."))
      :time (n3 / now
            :degree (r / right-yy)))

# ::snt is the dollar stronger than the pound
(h / have-degree-91
      :ARG1 (c / currency :name (n / name :op1 "dollar"))
      :ARG2 (s / strong-02
            :ARG1 c)
      :ARG3 (m / more)
      :ARG4 (c2 / currency :name (n2 / name :op1 "pound"))
      :polarity (a / amr-unknown))

# ::snt tell me about sean connery
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing :plural +
            :topic (p / person :name (n / name :op1 "sean" :op2 "connery")))
      :ARG2 (i / i))

# ::snt could you please confirm if leonardo is married
(c / confirm-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t / truth-value
            :polarity-of (m / marry-01
                  :ARG1 (p / person :name (n / name :op1 "leonardo")))))

# ::snt what are the oil prices like today for a barrel of crude oil
(p / price-01
      :ARG1 (c / commodity :name (n / name :op1 "crude" :op2 "oil")
            :quant (v / volume-quantity :quant 1
                  :unit (b / barrel)))
      :ARG2 (a / amr-unknown)
      :time (t / today))

# ::snt who is jennifer aniston married to
(m / marry-01
      :ARG1 (p / person :name (n / name :op1 "jennifer" :op2 "aniston"))
      :ARG2 (a / amr-unknown))

# ::snt give me the opening stock price of intel today
(g / give-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "intel")))
                  :time (o / open-02
                        :time (t2 / today))))
      :ARG2 (i / i))

# ::snt meaning of enthusiastic
(m / mean-01
      :ARG1 (e / enthusiastic)
      :ARG2 (a / amr-unknown))

# ::snt what is the square root of forty two
(e / equal-01
      :ARG1 (r / root-of :op1 42 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt what does celebrity do
(d / do-02
      :ARG0 (c / celebrity)
      :ARG1 (a / amr-unknown))

# ::snt how many continents are there
(h / have-quant-91
      :ARG1 (c / continent)
      :ARG2 (a / amr-unknown))

# ::snt tell me which mutual funds have maximum yearly returns
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (f / fund :plural +
            :mod (m / mutual)
            :ARG1-of (r / return-05
                  :ARG3 (t2 / thing
                        :mod (m2 / maximum))
                  :frequency (r2 / rate-entity-91
                        :ARG3 (t3 / temporal-quantity :quant 1
                              :unit (y2 / year))))
            :mod (a / amr-unknown))
      :ARG2 (i / i))

# ::snt define ten
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 10)

# ::snt u. s. d. to g. b. p.
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
            :ARG3 (c2 / currency :name (n2 / name :op1 "g." :op2 "b." :op3 "p.")))
      :ARG2 (a / amr-unknown))

# ::snt how much does an orange weigh
(w / weigh-01
      :ARG1 (f / food-dish :name (n / name :op1 "orange"))
      :ARG3 (a / amr-unknown))

# ::snt show bio of rihana
(s2 / show-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (b / biography
            :topic (p / person :name (n / name :op1 "rihana"))))

# ::snt how many yen for each dollar
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "yen"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "dollar")))

# ::snt what is the biggest city in new hampshire
(h2 / have-degree-91
      :ARG1 (c / city
            :mod (a / amr-unknown))
      :ARG2 (b / big-01
            :ARG1 c)
      :ARG3 (m / most)
      :ARG5 (c2 / city
            :part-of (s / state :name (n2 / name :op1 "new" :op2 "hampshire"))))

# ::snt describe what a chair is
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c / chair))

# ::snt what is the population of new york
(p2 / populate-01
      :ARG1 (c / city :name (n / name :op1 "new" :op2 "york"))
      :ARG2 (a / amr-unknown))

# ::snt can you define a baster
(d / define-01
      :ARG1 (b / bastard)
      :ARG2 (a / amr-unknown))

# ::snt what is geographic value of great volcano
(v / value-01
      :ARG1 (v2 / volcano
            :ARG1-of (g / great-01))
      :ARG2 (a / amr-unknown
            :mod (g2 / geography)))

# ::snt what is the current exchange rate for yen to euros
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "yen"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "euros")))
      :ARG2 (a / amr-unknown)
      :time (c3 / current))

# ::snt compare more of countries
(c / compare-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c2 / country :plural +
            :mod (m / more)))

# ::snt who are the greatest hip hop artists
(h2 / have-degree-91
      :ARG1 (a / artist :plural +
            :mod (g / genre :name (n2 / name :op1 "hip" :op2 "hop"))
            :mod (a2 / amr-unknown))
      :ARG2 (g2 / great-01
            :ARG1 a)
      :ARG3 (m / most))

# ::snt tell me everything you know about sloths
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (e2 / everything
            :topic (s / sloth)
            :ARG1-of (k / know-02
                  :ARG0 y))
      :ARG2 (i / i))

# ::snt what is the definition of session
(d / define-01
      :ARG1 (s / session)
      :ARG2 (a / amr-unknown))

# ::snt dolly parton biography
(b / biography
      :topic (p / person :name (n / name :op1 "dolly" :op2 "parton"))
      :mod (a / amr-unknown))

# ::snt what is a caftan
(c / caftan
      :mod (a / amr-unknown))

# ::snt if i have fifty dollars and spend twenty four how many dollars will i have left
(l / leave-17
      :ARG1 (h / have-quant-91
            :ARG1 (m / monetary-quantity
                  :unit (d / dollar))
            :ARG2 (a / amr-unknown))
      :ARG2 (m2 / monetary-quantity :quant 50
            :unit (d2 / dollar))
      :condition (s / spend-01
            :ARG0 (i / i)
            :ARG1 (m3 / monetary-quantity :quant 24
                  :unit (d3 / dollar))))

# ::snt how much is the dollar verus the pound
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "pound")))
      :ARG2 (a / amr-unknown))

# ::snt what is this
(t / thing
      :mod (t2 / this)
      :mod (a / amr-unknown))

# ::snt what is infinity
(i2 / infinity
      :mod (a / amr-unknown))

# ::snt what is two hundred divided by thirteen
(e / equal-01
      :ARG1 (q / quotient-of :op1 200 :op2 13)
      :ARG2 (a / amr-unknown))

# ::snt define xy
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / string-entity :value "xy"))

# ::snt who is the person behind the song of taylor swift back to december
(h / have-mod-91
      :ARG1 (s / song :name (n / name :op1 "back" :op2 "to" :op3 "december")
            :poss (p / person :name (n2 / name :op1 "taylor" :op2 "swift")))
      :ARG2 (p2 / person
            :mod (a / amr-unknown)))

# ::snt tell me lexmark's current stock price
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "lexmark")))
      :ARG2 (a / amr-unknown)
      :time (c2 / current))

# ::snt what you know about john abraham lincon
(k / know-01
      :ARG0 (y / you)
      :ARG1 (a / amr-unknown)
      :topic (p / person :name (n / name :op1 "john" :op2 "abraham" :op3 "lincon")))

# ::snt when did prince die
(d / die-01
      :ARG1 (p / person :name (n / name :op1 "prince"))
      :time (a / amr-unknown))

# ::snt to compare in people
(c / compare-01
      :ARG1 (p / person))

# ::snt alexa tell me the largest ocean in the world
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (o / ocean
            :ARG1-of (h / have-degree-91
                  :ARG2 (l / large-01
                        :ARG1 o)
                  :ARG3 (m / most)
                  :ARG5 (o2 / ocean
                        :part-of (w / world))))
      :ARG2 (i / i))

# ::snt tell me what the formal definition is of banana
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (d / define-01
                  :ARG1 (f2 / food-dish :name (n / name :op1 "banana")))
            :mod (f / formal))
      :ARG2 (i / i))

# ::snt olly where did the first americans settle
(s / settle-01
      :ARG0 (p / person
            :source (c / country :name (n / name :op1 "america"))
            :ord (o / ordinal-entity :value 1))
      :location (a / amr-unknown))

# ::snt what is the lowest microsoft stock price today
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "microsoft")))
      :ARG2 (m / monetary-quantity
            :ARG1-of (h / have-degree-91
                  :ARG2 (l / low-04
                        :ARG1 m)
                  :ARG3 (m2 / most))
            :quant (a / amr-unknown))
      :time (t / today))

# ::snt what does the word labyrinth mean
(m / mean-01
      :ARG1 (l / labyrinth
            :mod (w / word))
      :ARG2 (a / amr-unknown))

# ::snt what is six minus four
(e / equal-01
      :ARG1 (d / difference-of :op1 6 :op2 4)
      :ARG2 (a / amr-unknown))

# ::snt what is the capitol of west virginia
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (s / state :name (n2 / name :op1 "west" :op2 "virginia"))
      :ARG2 (c / capital))

# ::snt please find out the share price of infy in nasdaq
(f / find-out-03 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / share
                        :mod (c / company :name (n / name :op1 "infy")))))
      :ARG2 (o / organization :name (n2 / name :op1 "nasdaq")))

# ::snt list the current price of microsoft shares
(l / list-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / share
                        :mod (c / company :name (n / name :op1 "microsoft")))
                  :time (c2 / current))))

# ::snt is michael jackson really dead
(d / die-01
      :ARG1 (p / person :name (n / name :op1 "michael" :op2 "jackson"))
      :ARG1-of (r / real-04)
      :polarity (a / amr-unknown))

# ::snt when was frank sinatra born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "frank" :op2 "sinatra"))
      :time (a / amr-unknown))

# ::snt check info on someone
(c / check-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (i3 / information
            :topic (p / person
                  :mod (s / some))))

# ::snt how old is brad pitt
(p / person :name (n / name :op1 "brad" :op2 "pitt")
      :age (a / amr-unknown))

# ::snt describe what a crop circle is
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c / circle-02
            :location (c2 / crop)))

# ::snt how big is japan
(b / big-01
      :ARG1 (c / country :name (n / name :op1 "japan"))
      :ARG2 (a / amr-unknown))

# ::snt give me the stock price of intel
(g / give-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "intel")))))
      :ARG2 (i / i))

# ::snt how far is florida from north carolina
(f / far-01
      :ARG1 (s / state :name (n / name :op1 "florida"))
      :ARG2 (s2 / state :name (n2 / name :op1 "north" :op2 "carolina"))
      :extent (a / amr-unknown))

# ::snt how much does one euro cost in rupees
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "rupees"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "euro")))

# ::snt please give me information on michael jackson
(i3 / information
      :topic (p / person :name (n / name :op1 "michael" :op2 "jackson"))
      :mod (a / amr-unknown))

# ::snt what is the going rate for wells fargo stock
(r / rate-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "wells" :op2 "fargo")))
      :ARG2 (a / amr-unknown))

# ::snt google definition for me
(g / google-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (d / define-01))
      :beneficiary (i / i))

# ::snt how many sides are on a pentagon
(h / have-part-91
      :ARG1 (p / pentagon)
      :ARG2 (s2 / side
            :quant (a / amr-unknown)))

# ::snt where did amal clooney go to college
(a / attend-01
      :ARG0 (p / person :name (n / name :op1 "amal" :op2 "clooney"))
      :ARG1 (c / college
            :mod (a2 / amr-unknown)))

# ::snt where is botswana
(b / be-located-at-91
      :ARG1 (c / country :name (n / name :op1 "botswana"))
      :ARG2 (a / amr-unknown))

# ::snt tell me what the product of eighteen and thirty one is
(e / equal-01
      :ARG1 (p / product-of :op1 18 :op2 31)
      :ARG2 (a / amr-unknown))

# ::snt ten plus y.
(e / equal-01
      :ARG1 (s / sum-of :op1 10
            :op2 (s2 / string-entity :value "y"))
      :ARG2 (a / amr-unknown))

# ::snt which is the smallest island in the world
(h2 / have-degree-91
      :ARG1 (i2 / island
            :mod (a / amr-unknown))
      :ARG2 (s / small-01
            :ARG1 i2)
      :ARG3 (m / most)
      :ARG5 (i3 / island
            :part-of (w / world)))

# ::snt can you tell me what a grommet is
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :domain (g / grommet))
      :ARG2 (i / i))

# ::snt who is the first president in u. s. a.
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c / country :name (n2 / name :op1 "u." :op2 "s." :op3 "a."))
      :ARG2 (p / president)
      :ord (o / ordinal-entity :value 1))

# ::snt hey olly what is the definition of passive
(d / define-01
      :ARG1 (p / passive)
      :ARG2 (a / amr-unknown))

# ::snt who is the current prime minister of russia
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c / country :name (n2 / name :op1 "russia"))
      :ARG2 (m / minister
            :mod (p / prime))
      :time (c2 / current))

# ::snt give me today's market trends for panasonic
(t / trend-01
      :ARG1 (c / company :name (n / name :op1 "panasonic"))
      :ARG2 (a / amr-unknown)
      :mod (m / market-01)
      :time (t2 / today))

# ::snt who is currently the oldest living person in the world
(h2 / have-degree-91
      :ARG1 (p / person
            :mod (a / amr-unknown))
      :ARG2 (o / old-01
            :ARG1 p)
      :ARG3 (m / most)
      :ARG5 (p2 / person
            :location (w / world)
            :ARG0-of (l / live-01))
      :time (c / current))

# ::snt is leonardo married
(m / marry-01
      :ARG1 (p / person :name (n / name :op1 "leonardo"))
      :polarity (a / amr-unknown))

# ::snt what is the name of the tallest man
(n / name-01
      :ARG1 (p / person
            :ARG1-of (h / have-degree-91
                  :ARG2 (t / tall-01
                        :ARG1 p)
                  :ARG3 (m / most)))
      :ARG2 (a / amr-unknown))

# ::snt how much is the us dollar versus the pound
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "pound")))

# ::snt give me the description about watch
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (w / watch))

# ::snt what i can do with laptop
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (i / i)
            :ARG1 (a / amr-unknown)
            :ARG3 (l / laptop)))

# ::snt what was martin luther kings birthday
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "martin" :op2 "luther" :op3 "king"))
      :time (a / amr-unknown))

# ::snt tell me about mount rushmore
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (l / location :name (n / name :op1 "mount" :op2 "rushmore")))
      :ARG2 (i / i))

# ::snt which was the first satellite to be launched by nasa
(s / satellite
      :ARG1-of (l / launch-01
            :ARG0 (o / organization :name (n2 / name :op1 "nasa"))
            :ord (o2 / ordinal-entity :value 1))
      :mod (a / amr-unknown))

# ::snt what is the definition of a gala
(d / define-01
      :ARG1 (g / gala)
      :ARG2 (a / amr-unknown))

# ::snt hey what's a book
(b / book
      :mod (a / amr-unknown))

# ::snt what is the stock price of amazon
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "amazon")))
      :ARG2 (a / amr-unknown))

# ::snt what is the location of kentucky
(b / be-located-at-91
      :ARG1 (s / state :name (n / name :op1 "kentucky"))
      :ARG2 (a / amr-unknown))

# ::snt where is trump from
(b / be-from-91
      :ARG1 (p / person :name (n / name :op1 "trump"))
      :ARG2 (a / amr-unknown))

# ::snt where is the nearest river
(b / be-located-at-91
      :ARG1 (r / river
            :ARG1-of (h / have-degree-91
                  :ARG2 (n / near-02
                        :ARG1 r)
                  :ARG3 (m / most)))
      :ARG2 (a / amr-unknown))

# ::snt how many oceans are there in the world
(h / have-quant-91
      :ARG1 (o / ocean)
      :ARG2 (a / amr-unknown)
      :ARG5 (w / world))

# ::snt when was bryan adams born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "bryan" :op2 "adams"))
      :time (a / amr-unknown))

# ::snt how tall are giraffes
(t / tall-01
      :ARG1 (g / giraffe)
      :ARG2 (a / amr-unknown))

# ::snt could you give me the exact rate for dow nifty futures
(r / rate-01
      :ARG1 (f / future
            :mod (o / organization :name (n / name :op1 "dow"))
            :mod (o2 / organization :name (n2 / name :op1 "nifty")))
      :ARG2 (a / amr-unknown)
      :mod (e / exact))

# ::snt give me the exchange rate between united states dollar and canadian dollar
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "united" :op2 "states" :op3 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "canadian" :op2 "dollar")))
      :ARG2 (a / amr-unknown))

# ::snt what is the definition of problematic
(d / define-01
      :ARG1 (p / problematic)
      :ARG2 (a / amr-unknown))

# ::snt how old is miley cyrus
(p / person :name (n / name :op1 "miley" :op2 "cyrus")
      :age (a / amr-unknown))

# ::snt what is the definition of god
(d / define-01
      :ARG1 (g / god)
      :ARG2 (a / amr-unknown))

# ::snt how old is tom hanks
(p / person :name (n / name :op1 "tom" :op2 "hanks")
      :age (a / amr-unknown))

# ::snt why did gotse shoot mahatma gandhi
(c / cause-01
      :ARG0 (a / amr-unknown)
      :ARG1 (s / shoot-01
            :ARG0 (p / person :name (n / name :op1 "gotse"))
            :ARG2 (p2 / person :name (n2 / name :op1 "mahatma" :op2 "gandhi"))))

# ::snt how many keys are on a piano
(h / have-quant-91
      :ARG1 (k / key
            :part-of (p / piano))
      :ARG2 (a / amr-unknown))

# ::snt what is dolly parton's birthday
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "dolly" :op2 "parton"))
      :time (a / amr-unknown))

# ::snt how tall is mount everest
(t / tall-01
      :ARG1 (m / mountain :name (n / name :op1 "mount" :op2 "everest"))
      :ARG2 (a / amr-unknown))

# ::snt figure out what percentage thirty is of one hundred and sixty three
(e / equal-01
      :ARG1 (q / quotient-of :op1 30 :op2 163)
      :ARG2 (p / percentage-entity
            :value (a / amr-unknown)))

# ::snt when is saint patrick's day
(b / be-temporally-at-91
      :ARG1 (f / festival :name (n / name :op1 "saint" :op2 "patrick's" :op3 "day"))
      :time (a / amr-unknown))

# ::snt what is four plus four
(e / equal-01
      :ARG1 (s / sum-of :op1 4 :op2 4)
      :ARG2 (a / amr-unknown))

# ::snt who is the most popular american actress
(h2 / have-degree-91
      :ARG1 (p / person
            :ARG0-of (a / act-01)
            :mod (a2 / amr-unknown))
      :ARG2 (p2 / popular-02
            :ARG1 p)
      :ARG3 (m / most)
      :ARG5 (p3 / person
            :ARG0-of (a3 / act-01)
            :mod (f / female)
            :source (c / country :name (n / name :op1 "american"))))

# ::snt how tall is madonna
(t / tall-01
      :ARG1 (p / person :name (n / name :op1 "madonna"))
      :ARG2 (a / amr-unknown))

# ::snt tell me billy crytals address
(s / street-address-91
      :ARG1 (a / amr-unknown)
      :ARG2 (a2 / amr-unknown)
      :ARG3 (a6 / amr-unknown)
      :ARG4 (a3 / amr-unknown)
      :ARG5 (a4 / amr-unknown)
      :ARG6 (a5 / amr-unknown)
      :ARG7 (a7 / amr-unknown)
      :location-of (p / person :name (n / name :op1 "billy" :op2 "crytals")))

# ::snt currency exchange
(e / exchange-01
      :ARG1 (c / currency))

# ::snt how many miles is it from los angeles california to austin texas
(d / distant-02
      :ARG1 (c / city :name (n / name :op1 "los" :op2 "angeles")
            :part-of (s / state :name (n2 / name :op1 "california")))
      :ARG2 (c2 / city :name (n3 / name :op1 "austin")
            :part-of (s2 / state :name (n4 / name :op1 "texas")))
      :extent (d2 / distance-quantity
            :quant (a / amr-unknown)
            :unit (m / mile)))

# ::snt could you describe that object please
(d / describe-01 :polite + :mode imperative
      :ARG0 (y / you)
      :ARG1 (o / object
            :mod (t / that)))

# ::snt what's a fuel rail injector
(t / thing
      :ARG0-of (i2 / inject-01
            :ARG1 (f / fuel))
      :consist-of (r / rail)
      :mod (a / amr-unknown))

# ::snt is adele going to go on tour
(t / tour-01
      :ARG0 (p / person :name (n / name :op1 "adele"))
      :polarity (a / amr-unknown))

# ::snt how many tablespoons are there in a cup
(h / have-quant-91
      :ARG1 (v / volume-quantity
            :unit (t / tablespoon))
      :ARG2 (a / amr-unknown)
      :ARG4 (v2 / volume-quantity :quant 1
            :unit (c / cup)))

# ::snt what is the lowest population per square mile in africa
(h / have-quant-91
      :ARG1 (p / person
            :ARG2-of (p2 / populate-01
                  :ARG1 (a / area
                        :ARG1-of (s3 / size-01
                              :ARG2 (a2 / area-quantity :quant 1
                                    :unit (s4 / square-mile)))))
            :ARG1-of (h2 / have-degree-91
                  :ARG2 (l / low-04
                        :ARG1 p)
                  :ARG3 (m / most)
                  :ARG5 (a3 / area
                        :location (c / country :name (n / name :op1 "africa")))))
      :ARG2 (a4 / amr-unknown))

# ::snt find brad pitt's age
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / temporal-quantity
            :ARG2-of (a2 / age-01
                  :ARG1 (p / person :name (n / name :op1 "brad" :op2 "pitt")))))

# ::snt tallest building
(h2 / have-degree-91
      :ARG1 (b / building
            :mod (a / amr-unknown))
      :ARG2 (t / tall-01
            :ARG1 b)
      :ARG3 (m / most))

# ::snt what is the temperature right now in new york
(c / city :name (n / name :op1 "new" :op2 "york")
      :mod (t / temperature-quantity
            :quant (a / amr-unknown))
      :time (n2 / now
            :degree (r / right-yy)))

# ::snt what's ten percent off forty dollars
(e / equal-01
      :ARG1 (p / product-of
            :op1 (p2 / percentage-entity :value 90)
            :op2 (m2 / monetary-quantity :quant 40
                  :unit (d / dollar)))
      :ARG2 (m / monetary-quantity
            :quant (a / amr-unknown)
            :unit (d2 / dollar)))

# ::snt can you get me the route to chicago before midnight
(g / get-01 :mode imperative :polite +
      :ARG0 (i / i)
      :ARG1 (r / route
            :destination (c / city :name (n / name :op1 "chicago"))
            :time (b / before
                  :op1 (d / date-entity :time "0:00")))
      :ARG2 (y / you))

# ::snt why are whales big
(c / cause-01
      :ARG0 (a / amr-unknown)
      :ARG1 (b / big-01
            :ARG1 (w / whale)))

# ::snt how big is the empire state building
(b / big-01
      :ARG1 (b2 / building :name (n / name :op1 "empire" :op2 "state" :op3 "building"))
      :ARG2 (a / amr-unknown))

# ::snt at what age michael phelps got married
(a2 / age-01
      :ARG1 (p / person :name (n / name :op1 "michael" :op2 "phelps"))
      :ARG2 (a / amr-unknown)
      :time (m / marry-01
            :ARG1 p))

# ::snt what is two times two
(e / equal-01
      :ARG1 (p / product-of :op1 2 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt tell me where steve jobs was born
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (l / location
            :location-of (b / bear-02
                  :ARG1 (p / person :name (n / name :op1 "steve" :op2 "jobs"))))
      :ARG2 (i / i))

# ::snt is the celebrity single or married
(a / amr-choice
      :op1 (s / single-03
            :ARG1 (p / person
                  :mod (c / celebrity)))
      :op2 (m / marry-01
            :ARG1 p))

# ::snt four plus five equals nine
(e / equal-01
      :ARG1 (s / sum-of :op1 4 :op2 5)
      :ARG2 9)

# ::snt what is the population of florida
(p / populate-01
      :ARG1 (s / state :name (n / name :op1 "florida"))
      :ARG2 (a / amr-unknown))

# ::snt tell me keywords about usain bolt
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (k / keyword :plural +
            :topic (p / person :name (n / name :op1 "usain" :op2 "bolt")))
      :ARG2 (i / i))

# ::snt how did paris hilton become famous
(f / fame-01
      :ARG1 (p / person :name (n / name :op1 "paris" :op2 "hilton"))
      :ARG2 (a / amr-unknown))

# ::snt what is the factorial of ten
(e / equal-01
      :ARG1 (f / factorial-of :op1 10)
      :ARG2 (a / amr-unknown))

# ::snt list albums of rihana
(l / list-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (a / album :plural +
            :poss (p / person :name (n / name :op1 "rihana"))))

# ::snt info on lisa ann please
(i3 / information
      :topic (p / person :name (n / name :op1 "lisa" :op2 "ann"))
      :mod (a / amr-unknown))

# ::snt iphone seven description
(d / describe-01
      :ARG1 (p / product :name (n / name :op1 "iphone" :op2 "seven"))
      :ARG2 (a / amr-unknown))

# ::snt how much is remaining after subtracting four from eight
(r / remain-01
      :ARG1 (a / amr-unknown)
      :time (a2 / after
            :op1 (t / thing
                  :ARG2-of (e / equal-01
                        :ARG1 (d / difference-of :op1 8 :op2 4)))))

# ::snt i need the definition of the new l. g. washing machine
(n3 / need-01
      :ARG0 (i / i)
      :ARG1 (t / thing
            :ARG2-of (d / define-01
                  :ARG1 (m / machine
                        :instrument (w / wash-01)
                        :ARG1-of (n2 / new-01)
                        :mod (c / company :name (n / name :op1 "l." :op2 "g."))))))

# ::snt how is coca-cola stock doing today
(d / do-02
      :ARG0 (s / stock
            :mod (c / company :name (n / name :op1 "coca-cola")))
      :manner (a / amr-unknown)
      :time (t / today))

# ::snt how old are kim kardashian's children
(p / person :plural +
      :ARG0-of (h / have-rel-role-91
            :ARG1 (p2 / person :name (n / name :op1 "kim" :op2 "kardashian"))
            :ARG2 (c / child))
      :age (a / amr-unknown))

# ::snt what's the current price of mcdonalds stock
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "mcdonalds")))
      :ARG2 (a / amr-unknown)
      :time (c2 / current))

# ::snt what is laptop
(l / laptop
      :mod (a / amr-unknown))

# ::snt what is the radius of the biggest crater on earth
(r / radius
      :domain (c / crater
            :ARG1-of (h / have-degree-91
                  :ARG2 (b / big-01
                        :ARG1 c)
                  :ARG3 (m / most)
                  :ARG5 (c2 / crater
                        :part-of (p / planet :name (n / name :op1 "earth")))))
      :ARG1-of (m2 / measure-01
            :ARG3 (a / amr-unknown)))

# ::snt give me a geographic fact about vilnius
(f2 / fact
      :topic (g / geography
            :domain (c / city :name (n / name :op1 "vilnius")))
      :mod (a / amr-unknown))

# ::snt how would you describe a tennis ball
(d / describe-01
      :ARG1 (b / ball
            :purpose (t / tennis))
      :ARG2 (a / amr-unknown))

# ::snt how many species of bees are there in the united states
(h / have-quant-91
      :ARG1 (s / species :name (n / name :op1 "bee"))
      :ARG2 (a / amr-unknown)
      :location (c / country :name (n2 / name :op1 "united" :op2 "states")))

# ::snt what is an electronic emissions system
(s / system
      :purpose (e / emit-01)
      :mod (e2 / electronics)
      :mod (a / amr-unknown))

# ::snt go to the nsdl and search for prices
(a / and
      :op1 (g / go-02 :mode imperative
            :ARG0 (y / you)
            :ARG4 (c / company :name (n / name :op1 "nsdl")))
      :op2 (s / search-01 :mode imperative
            :ARG0 y
            :ARG1 c
            :ARG2 (t / thing
                  :ARG2-of (p / price-01))))

# ::snt try out in wikipedia
(t / try-out-05 :mode imperative
      :ARG0 (y / you)
      :medium (o / organization :name (n / name :op1 "wikipedia")))

# ::snt who is taylor swift
(p / person :name (n / name :op1 "taylor" :op2 "swift")
      :mod (a / amr-unknown))

# ::snt what is the meaning of the word home
(m / mean-01
      :ARG1 (h / home
            :mod (w / word))
      :ARG2 (a / amr-unknown))

# ::snt what are the climatic conditions in that area
(c / climate
      :mod (a / amr-unknown)
      :location (a2 / area
            :mod (t / that)))

# ::snt i need to know about the height of mount everest
(n / need-01
      :ARG0 (i / i)
      :ARG1 (d / distance-quantity
            :extent-of (h / high-02
                  :ARG1 (m / mountain :name (n2 / name :op1 "mount" :op2 "everest")))))

# ::snt hey what is the definition of recipe
(d / define-01
      :ARG1 (r / recipe)
      :ARG2 (a / amr-unknown))

# ::snt how do i subtract four from two
(e / equal-01
      :ARG1 (d / difference-of :op1 2 :op2 4)
      :ARG2 (a / amr-unknown))

# ::snt please give me information next movie of aamir khan
(g / give-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (i3 / information
            :topic (m / movie
                  :ARG1-of (n / next-01)
                  :poss (p / person :name (n2 / name :op1 "aamir" :op2 "khan"))))
      :ARG2 (i / i))

# ::snt describe a potato
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / potato))

# ::snt what does tweet mean
(m / mean-01
      :ARG1 (t / tweet)
      :ARG2 (a / amr-unknown))

# ::snt how much is the euro worth versus u. s. dollar
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "euro"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "u." :op2 "s." :op3 "dollar")))

# ::snt how many calories in an orange
(h / have-quant-91
      :ARG1 (c / calorie
            :part-of (f / food-dish :name (n / name :op1 "orange")))
      :ARG2 (a / amr-unknown))

# ::snt amazon stock price
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "amazon")))
      :ARG2 (a / amr-unknown))

# ::snt u. s. d. position now
(v / value-01
      :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
      :ARG2 (a / amr-unknown)
      :time (n2 / now))

# ::snt give me the definition of the word fondle
(d / define-01
      :ARG1 (f / fondle-01
            :mod (w / word))
      :ARG2 (a / amr-unknown))

# ::snt how long till the eventual heat death of the universe
(b / be-temporally-at-91
      :ARG1 (d / die-01
            :ARG1 (h / heat-01
                  :ARG1 (l / location :name (n / name :op1 "universe")))
            :mod (e / eventual))
      :ARG2 (a / amr-unknown))

# ::snt when was angelina jolie born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "angelina" :op2 "jolie"))
      :time (a / amr-unknown))

# ::snt tell me when trump was born
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / time
            :time-of (b / bear-02
                  :ARG1 (p / person :name (n / name :op1 "trump"))))
      :ARG2 (i / i))

# ::snt what makes something head cheese
(m / make-02
      :ARG0 (a / amr-unknown)
      :ARG1 (h2 / have-mod-91
            :ARG1 (s / something)
            :ARG2 (c / cheese
                  :mod (h / head))))

# ::snt rate between these currencies
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :mod (t / this))
            :ARG3 (c2 / currency
                  :mod (t2 / this)))
      :ARG2 (a / amr-unknown))

# ::snt what is the birth year of barack obama
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "barack" :op2 "obama"))
      :time (d / date-entity
            :year (a / amr-unknown)))

# ::snt what are the current stocks for yahoo
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "yahoo")))
      :ARG2 (a / amr-unknown)
      :time (c2 / current))

# ::snt could you calculate five plus five
(e / equal-01
      :ARG1 (s / sum-of :op1 5 :op2 5)
      :ARG2 (a / amr-unknown))

# ::snt google the object and see
(a / and
      :op1 (g / google-01 :mode imperative
            :ARG0 y
            :ARG1 (o / object))
      :op2 (s / see-01 :mode imperative
            :ARG0 (y / you)))

# ::snt olly what is the total number of oceans in the world
(h / have-quant-91
      :ARG1 (o / ocean
            :part-of (w / world))
      :ARG2 (a / amr-unknown)
      :ARG1-of (t / total-01))

# ::snt open calculator
(o / open-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :instrument-of (c / calculate-01)))

# ::snt how old is ryan reynolds
(p / person :name (n / name :op1 "ryan" :op2 "reynolds")
      :age (a / amr-unknown))

# ::snt where is yellowstone park
(b / be-located-at-91
      :ARG1 (p / park :name (n / name :op1 "yellowstone" :op2 "park"))
      :ARG2 (a / amr-unknown))

# ::snt stock please
(s / stock :polite +)

# ::snt what is the us dollar euro exchange rate
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "euro")))
      :ARG2 (a / amr-unknown))

# ::snt what apple trading at
(t / trade-01
      :ARG1 (c / company :name (n / name :op1 "apple"))
      :ARG3 (a / amr-unknown))

# ::snt convert ten inches to centimeters
(h / have-quant-91
      :ARG1 (d / distance-quantity
            :unit (c / centimeter))
      :ARG2 (a / amr-unknown)
      :ARG4 (d2 / distance-quantity :quant 10
            :unit (i2 / inch)))

# ::snt provide valid references with information to help people understand critical thinking and giving credit where credit is due rather than perpetuate fake news and alternative facts
(a / and
      :op1 (p / provide-01 :mode imperative
            :ARG0 (y / you)
            :ARG1 (t / thing :plural +
                  :ARG1-of (r / reference-04)
                  :ARG1-of (v / valid-02)
                  :ARG2-of (i2 / inform-01))
            :purpose (h / help-01
                  :ARG1 (u / understand-01
                        :ARG0 (p2 / person)
                        :ARG1 (t2 / think-01
                              :manner (c / critic)))
                  :ARG2 p2))
      :op2 (c2 / credit-01 :mode imperative
            :ARG0 y
            :ARG1 (p3 / person
                  :ARG1-of (d / due-01
                        :ARG2 (c3 / credit-01)))
            :ARG1-of (i3 / instead-of-91
                  :ARG2 (p4 / perpetuate-01
                        :ARG0 y
                        :ARG1 (a2 / and
                              :op1 (n / news
                                    :ARG1-of (f / fake-01))
                              :op2 (f2 / fact
                                    :mod (a3 / alternative)))))))

# ::snt stock up or down for walgreens
(a / amr-choice
      :op1 (u / up-02
            :ARG1 (s / stock
                  :mod (c / company :name (n / name :op1 "walgreens"))))
      :op2 (d / down-03
            :ARG1 s))

# ::snt which desert is hottest
(h3 / have-degree-91
      :ARG1 (d / desert
            :mod (a / amr-unknown))
      :ARG2 (h2 / hot-05
            :ARG1 d)
      :ARG3 (m / most))

# ::snt how much yens per u. s. d. today
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "yens"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "u." :op2 "s." :op3 "d."))
      :time (t / today))

# ::snt can you give me the exchange rate for dollar in rupees
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "rupees")))
      :ARG2 (a / amr-unknown))

# ::snt what is the mean sea level of that place
(h / high-02
      :ARG1 (l / level
            :location-of (s / sea)
            :mod (m / mean-yy)
            :domain (p / place
                  :mod (t / that)))
      :extent (a / amr-unknown))

# ::snt the description of angel
(d / describe-01
      :ARG1 (a / angel)
      :ARG2 (a2 / amr-unknown))

# ::snt multiply one thousand by twelve
(e / equal-01
      :ARG1 (p / product-of :op1 1000 :op2 12)
      :ARG2 (a / amr-unknown))

# ::snt how much euros per u. s. d. today
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "euro"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "u." :op2 "s." :op3 "d."))
      :time (t / today))

# ::snt which currency is greater the us dollar or yen
(a / amr-choice
      :op1 (h / have-degree-91
            :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
            :ARG2 (g / great-01
                  :ARG1 c)
            :ARG3 (m / more)
            :ARG4 (c2 / currency :name (n2 / name :op1 "yen")))
      :op2 (h2 / have-degree-91
            :ARG1 c2
            :ARG2 (g2 / great-01
                  :ARG1 c2)
            :ARG3 (m2 / more)
            :ARG4 c))

# ::snt please indicate the opening price of fra stock
(i2 / indicate-01 :polite + :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "fra")))
                  :time (o / open-02))))

# ::snt google the word
(g / google-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (w / word))

# ::snt does donald trump have any ties to russia
(t / tie-01
      :ARG1 (p / person :name (n / name :op1 "donald" :op2 "trump"))
      :ARG2 (c / country :name (n2 / name :op1 "russia"))
      :polarity (a2 / amr-unknown))

# ::snt define computer game
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (g / game
            :mod (c / computer)))

# ::snt how many children does sandra bullock have
(h / have-quant-91
      :ARG1 (p / person
            :ARG0-of (h2 / have-rel-role-91
                  :ARG1 (p2 / person :name (n / name :op1 "sandra" :op2 "bullock"))
                  :ARG2 (c / child)))
      :ARG2 (a / amr-unknown))

# ::snt describe a seashell
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / seashell))

# ::snt what year was elvis born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "elvis"))
      :time (d / date-entity
            :year (a / amr-unknown)))

# ::snt check recent news on someone
(c / check-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (n / news
            :time (r / recent)
            :topic (s / someone)))

# ::snt when is sunset
(b / be-temporally-at-91
      :ARG1 (s / set-11
            :ARG1 (s2 / star :name (n / name :op1 "sun")))
      :ARG2 (d / date-entity
            :time (a / amr-unknown)))

# ::snt how old is george clooney
(p / person :name (n / name :op1 "george" :op2 "clooney")
      :age (a / amr-unknown))

# ::snt is euro the best currency to trade
(h / have-degree-91
      :ARG1 (c / currency :name (n / name :op1 "euro"))
      :ARG2 (g / good-02
            :ARG1 c)
      :ARG3 (m / most)
      :ARG5 (c2 / currency
            :ARG1-of (t / trade-01))
      :polarity (a / amr-unknown))

# ::snt tell me the exchange rate of rupee for dollar
(t / tell-01
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :name (n / name :op1 "rupee"))
                        :ARG3 (c2 / currency :name (n2 / name :op1 "dollar")))))
      :ARG2 (i / i))

# ::snt if i have five u. s. dollars how much is that in australian dollars
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "australian" :op2 "dollar"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 5 :name (n2 / name :op1 "u.s." :op2 "dollar"))
      :condition (h2 / have-03
            :ARG0 (i / i)
            :ARG1 c2))

# ::snt could you please tell what is the capital of america
(t / tell-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (c3 / city
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c2 / country :name (n2 / name :op1 "america"))
                  :ARG2 (c / capital)))
      :ARG2 (i / i))

# ::snt currency converter please
(c / convert-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (c2 / currency))

# ::snt what is julia roberts natural hair color
(c / color-01
      :ARG1 (h / hair
            :part-of (p / person :name (n / name :op1 "julia" :op2 "roberts")))
      :ARG2 (a / amr-unknown)
      :ARG1-of (n2 / natural-03))

# ::snt what is the remainder when five hundred and twenty one is divided by three
(r2 / remain-01
      :ARG1 (a / amr-unknown)
      :subevent-of (e / equal-01
            :ARG1 (q / quotient-of :op1 521 :op2 3)))

# ::snt olly how would you describe a ball
(d / describe-01
      :ARG1 (b / ball)
      :ARG2 (a / amr-unknown))

# ::snt explain photosynthesis
(e / explain-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / photosynthesis))

# ::snt how deep is the deepest point of the grand canyon
(d / deep-02
      :ARG1 (p / point
            :ARG1-of (h / have-degree-91
                  :ARG2 (d3 / deep-02
                        :ARG1 p)
                  :ARG3 (m / most)
                  :ARG5 (p2 / point
                        :location (c / canyon :name (n / name :op1 "grand" :op2 "canyon")))))
      :extent (a / amr-unknown))

# ::snt is tom cruise an only child
(h / have-rel-role-91
      :ARG0 (p / person :name (n / name :op1 "tom" :op2 "cruise"))
      :ARG2 (c / child
            :mod (o / only))
      :polarity (a / amr-unknown))

# ::snt what is the exchange rate for philippine pesos
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "philippine" :op2 "pesos")))
      :ARG2 (a / amr-unknown))

# ::snt can you give me a run-down on john legend
(r / run-down-21
      :ARG0 (y / you)
      :ARG1 (t / thing
            :topic (p / person :name (n / name :op1 "john" :op2 "legend"))
            :mod (a / amr-unknown))
      :ARG2 (i / i))


# ::snt where was marlon brando born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "marlon" :op2 "brando"))
      :location (a / amr-unknown))

# ::snt solve this equation one plus one
(e / equal-01
      :ARG1 (s / sum-of :op1 1 :op2 1)
      :ARG2 (a / amr-unknown))

# ::snt describe a fifty inch smart t. v.
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / television
            :ARG1-of (s / smart-06)
            :mod (d2 / distance-quantity :quant 50
                  :unit (i2 / inch))))

# ::snt tell me how old is ryan seacrest
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / temporal-quantity
            :ARG2-of (a2 / age-01
                  :ARG1 (p / person :name (n / name :op1 "ryan" :op2 "seacrest"))))
      :ARG2 (i / i))

# ::snt show bio of rihana
(s2 / show-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (b / biography
            :topic (p / person :name (n / name :op1 "rihana"))))

# ::snt what's the closing price of a. b. c.
(p / price-01
      :ARG1 (c / company :name (n / name :op1 "a." :op2 "b." :op3 "c."))
      :ARG2 (a / amr-unknown)
      :time (c2 / close-02))

# ::snt find me the description of this object
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (o / object
            :mod (t / this)))

# ::snt tell me formula for area of circle
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (f / formula
            :purpose (a / area-quantity
                  :domain (c / circle)))
      :ARG2 (i / i))

# ::snt where is the convention center located
(b / be-located-at-91
      :ARG1 (b2 / building :name (n / name :op1 "convention" :op2 "center"))
      :ARG2 (a / amr-unknown))

# ::snt in which field does that person excel in
(e / excel-01
      :ARG0 (p / person
            :mod (t / that))
      :ARG1 (f / field
            :mod (a / amr-unknown)))

# ::snt euro to u. s. d.
(h / have-quant-91
      :ARG1 (c2 / currency :name (n2 / name :op1 "u." :op2 "s." :op3 "d."))
      :ARG2 (a / amr-unknown)
      :ARG4 (c / currency :quant 1 :name (n / name :op1 "euro")))

# ::snt how would i use formidable in a sentence
(u / use-01
      :ARG0 (i / i)
      :ARG1 (f / formidable)
      :ARG2 (s / sentence)
      :manner (a / amr-unknown))

# ::snt give me the definition of carion
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c / carion))

# ::snt what is twelve divided by four
(e / equal-01
      :ARG1 (q / quotient-of :op1 12 :op2 4)
      :ARG2 (a / amr-unknown))

# ::snt less stock price
(p / price-01
      :ARG1 (s / stock)
      :ARG1-of (h / have-degree-91
            :ARG3 (l / less)))

# ::snt please tell me when i can become rich if i invested in dow stocks today and what will be the return after five years
(a / and
      :op1 (b / be-temporally-at-91
            :ARG1 (r / rich-01
                  :ARG1 (i / i)
                  :ARG2-of (b2 / become-01
                        :ARG1 i
                        :ARG1-of (p / possible-01)))
            :ARG2 (a2 / amr-unknown)
            :condition (i2 / invest-01
                  :ARG0 i
                  :ARG2 (s / stock :plural +
                        :mod (m / market-services :name (n / name :op1 "dow")))
                  :time (t / today)))
      :op2 (r2 / return-06
            :ARG0 s
            :ARG1 (a3 / amr-unknown)
            :ARG2 i
            :time (a4 / after
                  :op1 (n2 / now)
                  :quant (t2 / temporal-quantity :quant 5
                        :unit (y / year)))))

# ::snt how long do elephants live
(l / live-01
      :ARG0 (e / elephant)
      :duration (a / amr-unknown))

# ::snt what country has the most population
(c / country
      :ARG1-of (p / populate-01
            :ARG2 (p2 / person)
            :ARG1-of (h / have-degree-91
                  :ARG3 (m / most)))
      :mod (a / amr-unknown))

# ::snt what is the highest building in the world
(h3 / have-degree-91
      :ARG1 (b / building
            :mod (a / amr-unknown))
      :ARG2 (h2 / high-02
            :ARG1 b)
      :ARG3 (m / most)
      :ARG5 (w / world))

# ::snt describe a sloth
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / sloth))

# ::snt how old is angelina jolie
(p / person :name (n / name :op1 "angelina" :op2 "jolie")
      :age (a / amr-unknown))

# ::snt who is highest scoring football player of all time
(p / person
      :ARG0-of (p2 / play-01
            :ARG1 (f / football))
      :ARG1-of (s / score-01
            :ARG1-of (h / have-degree-91
                  :ARG3 (m / most)
                  :ARG5 (p3 / person
                        :ARG0-of (p4 / play-01
                              :ARG1 f)
                        :mod (a / all))))
      :mod (a2 / amr-unknown))

# ::snt the capital of nigeria is what
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c2 / country :name (n2 / name :op1 "nigeria"))
      :ARG2 (c / capital))

# ::snt what bra size is julianne hough
(s / size-01
      :ARG1 (b / bra
            :poss (p / person :name (n / name :op1 "julianne" :op2 "hough")))
      :ARG2 (a / amr-unknown))

# ::snt show me share price of facebook
(s2 / show-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / share
                        :mod (c / company :name (n / name :op1 "facebook")))))
      :ARG2 (i / i))

# ::snt tell me something about
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / something
            :topic (t2 / thing))
      :ARG2 (i / i))

# ::snt what is the most densely populated country in the world
(h / have-degree-91
      :ARG1 (c / country
            :mod (a / amr-unknown))
      :ARG2 (p / populate-01
            :ARG1 c
            :ARG1-of (d / dense-01))
      :ARG3 (m / most)
      :ARG5 (c2 / country
            :part-of (w / world)))

# ::snt when was albert einstein born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "albert" :op2 "einstein"))
      :time (a / amr-unknown))

# ::snt what is the definition of this word
(d / define-01
      :ARG1 (w / word
            :mod (t / this))
      :ARG2 (a / amr-unknown))

# ::snt what is the highest mountain in the us
(h3 / have-degree-91
      :ARG1 (m / mountain
            :mod (a / amr-unknown))
      :ARG2 (h2 / high-02
            :ARG1 m)
      :ARG3 (m2 / most)
      :ARG5 (m3 / mountain
            :part-of (c / country :name (n2 / name :op1 "us"))))

# ::snt what is the temperature in indianapolis indiana
(c / city :name (n / name :op1 "indianapolis")
      :location (s / state :name (n2 / name :op1 "indiana"))
      :mod (t / temperature-quantity
            :quant (a / amr-unknown)))

# ::snt give me the description about television
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / television))

# ::snt what is the exchange rate between the dollar and the yen
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "yen")))
      :ARG2 (a / amr-unknown))

# ::snt what is googs current price
(p / price-01
      :ARG1 (c / company :name (n / name :op1 "googs"))
      :ARG2 (a / amr-unknown)
      :time (c2 / current))

# ::snt what is rate of euro to u. s. d.
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "euro"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "u." :op2 "s." :op3 "d.")))
      :ARG2 (a / amr-unknown))

# ::snt where is norman reedus from
(b / be-from-91
      :ARG1 (p / person :name (n / name :op1 "norman" :op2 "reedus"))
      :ARG2 (a / amr-unknown))

# ::snt what's the dow jones at today
(h / have-mod-91
      :ARG1 (o / organization :name (n / name :op1 "dow" :op2 "jones"))
      :ARG2 (a / amr-unknown)
      :time (t / today))

# ::snt can you please describe the iphone seven
(d / describe-01 :polite + :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / product :name (n / name :op1 "iphone" :op2 "seven")))

# ::snt design the chemical compounds necessary to create sugar that doesn't cause diabetes or weight gain but doesn't provide a chemical taste
(d / design-01
      :ARG1 (c / compound :plural +
            :mod (c2 / chemical))
      :ARG3 (c3 / create-01
            :ARG1 (s / sugar
                  :ARG0-of (c4 / cause-01 :polarity -
                        :ARG1 (d2 / disease :name (n2 / name :op1 "diabetes")))
                  :ARG0-of (c5 / cause-01 :polarity -
                        :ARG1 (g / gain-01
                              :ARG1 (w / weigh-01)))
                  :ARG1-of (t / taste-02 :polarity -
                        :ARG2 (c6 / chemical)))
            :ARG2 c))

# ::snt what defines a triangle
(d / define-01
      :ARG1 (p / polygon :name (n / name :op1 "triangle"))
      :ARG2 (a / amr-unknown))

# ::snt answer this mathematical question
(a / answer-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG1-of (q / question-01
                  :topic (m / mathematics))
            :mod (t2 / this)))

# ::snt what are the latest prices of the stocks
(p / price-01
      :ARG1 (s / stock :plural +)
      :ARG2 (a / amr-unknown)
      :mod (l / last))

# ::snt when was the world war two started
(s / start-01
      :ARG1 (w / war :name (n / name :op1 "world" :op2 "war" :op3 "two"))
      :time (a / amr-unknown))

# ::snt can you able to say the word demonetisation
(p / possible-01
      :ARG1 (s / say-01
            :ARG0 (y / you)
            :ARG1 (d / demonetisation
                  :mod (w / word)))
      :polarity (a / amr-unknown))

# ::snt how to spell the word treble
(s / spell-01
      :ARG1 (t / treble
            :mod (w / word))
      :ARG2 (a / amr-unknown))

# ::snt tell me about agra
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (c / city :name (n / name :op1 "agra")))
      :ARG2 (i / i))

# ::snt how old is adele
(p / person :name (n / name :op1 "adele")
      :age (a / amr-unknown))

# ::snt i need to figure out this percentage
(n / need-01
      :ARG0 (i / i)
      :ARG1 (f / figure-out-05
            :ARG0 i
            :ARG1 (p / percentage-entity
                  :mod (t / this))))

# ::snt michael jackson family background
(b / background
      :topic (f / family
            :ARG2-of (h / have-rel-role-91
                  :ARG0 (p2 / person)
                  :ARG1 (p / person :name (n / name :op1 "michael" :op2 "jackson"))))
      :mod (a / amr-unknown))

# ::snt show meaning of clarion
(s / show-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (m / mean-01
                  :ARG1 (c / clarion))))

# ::snt for how many years was abraham lincoln president of united states
(l / last-01
      :ARG1 (h / have-org-role-91
            :ARG0 (p / person :name (n / name :op1 "abraham" :op2 "lincoln"))
            :ARG1 (c / country :name (n2 / name :op1 "united" :op2 "states"))
            :ARG2 (p2 / president))
      :ARG2 (t / temporal-quantity
            :quant (a / amr-unknown)
            :unit (y / year)))

# ::snt more stock price
(p / price-01
      :ARG1 (s / stock)
      :ARG2 (a / amr-unknown)
      :mod (m / more))

# ::snt history of abraham lincoln
(h / history
      :topic (p / person :name (n / name :op1 "abraham" :op2 "lincoln"))
      :mod (a / amr-unknown))

# ::snt what is now stock price of tata
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "tata")))
      :ARG2 (a / amr-unknown)
      :time (n2 / now))

# ::snt how much is twenty argentinian pesos in pounds
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "pounds"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 20 :name (n2 / name :op1 "argentinian" :op2 "pesos")))

# ::snt latest iphone
(p / product :name (n / name :op1 "iphone")
      :mod (a / amr-unknown)
      :mod (l / last))

# ::snt what's the definition of indignation
(d / define-01
      :ARG1 (i2 / indignation)
      :ARG2 (a / amr-unknown))

# ::snt where is the closest barber
(b / be-located-at-91
      :ARG1 (b2 / barber
            :ARG1-of (h / have-degree-91
                  :ARG2 (c / close-10
                        :ARG1 b2
                        :ARG2 (h2 / here))
                  :ARG3 (m / most)))
      :ARG2 (a / amr-unknown))

# ::snt give me the exchange rate for the us dollar and the euro
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "euro")))
      :ARG2 (a / amr-unknown))

# ::snt olly how many stars has swat received on i. m. d. b.
(h / have-quant-91
      :ARG1 (s / star
            :ARG1-of (r / receive-01
                  :ARG0 (w / work-of-art :name (n / name :op1 "swat"))))
      :ARG2 (a / amr-unknown)
      :location (w2 / website :name (n2 / name :op1 "i.m.d.b.")))

# ::snt what is the exchange rate of currency in u. k.
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :mod (c2 / country :name (n / name :op1 "u." :op2 "k."))))
      :ARG2 (a / amr-unknown))

# ::snt what's the definition of a buffet table
(d / define-01
      :ARG1 (t / table
            :purpose (b / buffet))
      :ARG2 (a / amr-unknown))

# ::snt what is five divided by one
(e / equal-01
      :ARG1 (q / quotient-of :op1 5 :op2 1)
      :ARG2 (a / amr-unknown))

# ::snt what is the exchange rate for pounds and u. s. d.
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "pounds"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "u." :op2 "s." :op3 "d.")))
      :ARG2 (a / amr-unknown))

# ::snt do you know jessica snout's phone number
(n / number
      :purpose (p / phone-01
            :ARG1 (p2 / person :name (n2 / name :op1 "jessica" :op2 "snout")))
      :mod (a / amr-unknown))

# ::snt is starbucks stock up or down from last quarter
(a / amr-choice
      :op1 (h / have-degree-91
            :ARG1 (s / stock
                  :mod (c / company :name (n / name :op1 "starbucks")))
            :ARG2 (u / up-02
                  :ARG1 s)
            :ARG3 (m / more)
            :ARG4 (q / quarter
                  :mod (l / last)))
      :op2 (h2 / have-degree-91
            :ARG1 s
            :ARG2 (d / down-03
                  :ARG1 s)
            :ARG3 (m2 / more)
            :ARG4 q))

# ::snt what is the birthday of hemingway
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "hemingway"))
      :time (a / amr-unknown))

# ::snt hey olly what is the definition of survey
(d / define-01
      :ARG1 (s / survey)
      :ARG2 (a / amr-unknown))

# ::snt how did charlize theron learn how to speak english
(l / learn-01
      :ARG0 (p / person :name (n / name :op1 "charlize" :op2 "theron"))
      :ARG1 (l2 / language :name (n2 / name :op1 "english"))
      :manner (a / amr-unknown))

# ::snt stocks f. flat
(s / stock :plural +
      :mod (c / company :name (n / name :op1 "f." :op2 "flat"))
      :mod (a / amr-unknown))

# ::snt how many kids jackie chan does have
(h / have-quant-91
      :ARG1 (p / person
            :ARG0-of (h2 / have-rel-role-91
                  :ARG1 (p2 / person :name (n / name :op1 "jackie" :op2 "chan"))
                  :ARG2 (k / kid)))
      :ARG2 (a / amr-unknown))

# ::snt what are the definitions of orange
(d / define-01
      :ARG1 (o / orange)
      :ARG2 (a / amr-unknown :plural +))

# ::snt how do you subtract numbers
(h / have-manner-91
      :ARG1 (s / subtract-01
            :ARG0 (y / you)
            :ARG1 (t / thing
                  :ARG2-of (n / number-01)))
      :ARG2 (a / amr-unknown))

# ::snt what is the square root of four
(e / equal-01
      :ARG1 (r / root-of :op1 4 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt what do you know about the statue of liberty
(k / know-01
      :ARG0 (y / you)
      :ARG1 (t / thing
            :topic (m / monument :name (n / name :op1 "statue" :op2 "of" :op3 "liberty"))
            :mod (a / amr-unknown)))

# ::snt explain
(e / explain-01 :mode imperative
      :ARG0 (y / you))

# ::snt what is starbuck's stock worth
(w / worth-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "starbucks")))
      :ARG2 (a / amr-unknown))


# ::snt describe a romantic love
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (l / love-01
            :manner (r / romance-01)))

# ::snt what is twenty percent of one hundred and fifty
(e / equal-01
      :ARG1 (p / product-of
            :op1 (p2 / percentage-entity :value 20) :op2 150)
      :ARG2 (a / amr-unknown))

# ::snt how large is alaska
(l / large-01
      :ARG1 (s / state :name (n / name :op1 "alaska"))
      :extent (a / amr-unknown))

# ::snt how many beatles are still alive
(l / live-01
      :ARG0 (p / person
            :ARG2-of (c / consist-01
                  :ARG1 (o / organization :name (n / name :op1 "beatles")))
            :quant (a / amr-unknown))
      :mod (s / still))

# ::snt give me the facts on yankee stadium
(g / give-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (f / fact :plural +
            :topic (s / sports-facility :name (n / name :op1 "yankee" :op2 "stadium")))
      :ARG2 (i / i))

# ::snt what size is a sperm whale
(s / size-01
      :ARG1 (w / whale
            :mod (s2 / sperm))
      :ARG2 (a2 / amr-unknown))

# ::snt how many countries are north of alaska
(h / have-quant-91
      :ARG1 (c / country
            :ARG1-of (n / north-01
                  :ARG2 (s / state :name (n2 / name :op1 "alaska"))))
      :ARG2 (a / amr-unknown))

# ::snt stock
(s / stock)

# ::snt what's the exchange rates between u. s. a. and china
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :mod (c2 / country :name (n / name :op1 "u." :op2 "s." :op3 "a.")))
            :ARG3 (c3 / currency
                  :mod (c4 / country :name (n2 / name :op1 "china"))))
      :ARG2 (a / amr-unknown))

# ::snt what is a ferrari
(c / car-make :name (n / name :op1 "ferrari")
      :mod (a / amr-unknown))

# ::snt which pole is colder south or north
(a / amr-choice
      :op1 (h / have-degree-91
            :ARG1 (p / pole
                  :location (s / south))
            :ARG2 (c / cold-01
                  :ARG1 p)
            :ARG3 (m / more)
            :ARG4 (p2 / pole
                  :location (n / north)))
      :op2 (h2 / have-degree-91
            :ARG1 p2
            :ARG2 (c2 / cold-01
                  :ARG1 p2)
            :ARG3 (m2 / more)
            :ARG4 p))

# ::snt where was steve jobs born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "steve" :op2 "jobs"))
      :location (a / amr-unknown))

# ::snt what is the stock price of sensex right now
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "sensex")))
      :ARG2 (a / amr-unknown)
      :time (n2 / now
            :degree (r / right-yy)))

# ::snt where are the rockies located
(b / be-located-at-91
      :ARG1 (m / mountain-range :name (n / name :op1 "rockies"))
      :ARG2 (a / amr-unknown))

# ::snt answer for three times four
(e / equal-01
      :ARG1 (p / product-of :op1 3 :op2 4)
      :ARG2 (a / amr-unknown))

# ::snt what does this word mean
(m / mean-01
      :ARG1 (w / word
            :mod (t / this))
      :ARG2 (a / amr-unknown))

# ::snt spell and define oscillate
(a / and
      :op1 (s / spell-01 :mode imperative
            :ARG0 (y / you)
            :ARG1 (o / oscillate))
      :op2 (d / define-01 :mode imperative
            :ARG0 y
            :ARG1 o))

# ::snt tell me about the sports stadium
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (s / stadium
                  :location-of (s2 / sports)))
      :ARG2 (i / i))

# ::snt define speaker
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG0-of (s / speak-01)))

# ::snt how many records did prince make
(m / make-01
      :ARG0 (p / person :name (n / name :op1 "prince"))
      :ARG1 (r / record
            :quant (a / amr-unknown)))

# ::snt how old is carrie underwood
(p / person :name (n / name :op1 "carrie" :op2 "underwood")
      :age (a / amr-unknown))

# ::snt i want to know the stocks of amazon
(w / want-01
      :ARG0 (i / i)
      :ARG1 (k / know-01
            :ARG0 i
            :ARG1 (s / stock
                  :mod (c / company :name (n / name :op1 "amazon")))))

# ::snt could you please describe me about the item smart phone
(d / describe-01 :polite + :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / phone
            :ARG1-of (s / smart-06)))

# ::snt how much is b. p. in u. s. d.
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "b." :op2 "p.")))

# ::snt describe item xy
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (i2 / item
            :mod (s / string-entity :value "xy")))

# ::snt what color are chairs
(c / color-01
      :ARG1 (c2 / chair)
      :ARG2 (a / amr-unknown))

# ::snt can i have stock rate list of ola and uber
(a / and
      :op1 (r / rate-01
            :ARG1 (s / stock
                  :mod (c / company :name (n / name :op1 "ola")))
            :ARG2 (a2 / amr-unknown))
      :op2 (r2 / rate-01
            :ARG1 (s2 / stock
                  :mod (c2 / company :name (n2 / name :op1 "uber")))
            :ARG2 (a3 / amr-unknown))
      :ARG2-of (l / list-01))

# ::snt what is the definition of pda
(d / define-01
      :ARG1 (s / string-entity :value "pda")
      :ARG2 (a / amr-unknown))

# ::snt define organism
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (o / organism))

# ::snt how many euros are in a dollar
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "euros"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "dollar")))

# ::snt help microphone
(h / help-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (m / microphone))

# ::snt have bing's stocks dropped
(d / drop-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "bing")))
      :polarity (a / amr-unknown))

# ::snt which river in germany is the biggest
(h2 / have-degree-91
      :ARG1 (r / river
            :mod (a / amr-unknown))
      :ARG2 (b / big-01
            :ARG1 r)
      :ARG3 (m / most)
      :ARG5 (r2 / river
            :part-of (c / country :name (n2 / name :op1 "germany"))))

# ::snt how tall is tom cruise
(t / tall-01
      :ARG1 (p / person :name (n / name :op1 "tom" :op2 "cruise"))
      :ARG2 (a / amr-unknown))

# ::snt where is yosemite park
(b / be-located-at-91
      :ARG1 (p / park :name (n / name :op1 "yosemite" :op2 "park"))
      :ARG2 (a / amr-unknown))

# ::snt what is three times seven
(e / equal-01
      :ARG1 (p / product-of :op1 3 :op2 7)
      :ARG2 (a / amr-unknown))

# ::snt book me a flight to mars next year
(b / book-03 :mode imperative
      :ARG0 (y / you)
      :ARG1 (f / fly-01
            :ARG1 (i / i)
            :destination (p / planet :name (n / name :op1 "mars")))
      :ARG5 (y2 / year
            :ARG1-of (n2 / next-01)))

# ::snt when did beyonce and jay z. get married
(m / marry-01
      :ARG1 (p / person :name (n / name :op1 "beyonce"))
      :ARG2 (p2 / person :name (n2 / name :op1 "jay" :op2 "z."))
      :time (a / amr-unknown))

# ::snt tell me about price of stock for innova
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "innova")))))
      :ARG2 (i / i))

# ::snt give me the description of smartphone software
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / software
            :purpose (p / phone
                  :ARG1-of (s2 / smart-06))))


# ::snt name the capital of nigeria
(n / name-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c / city
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c2 / country :name (n2 / name :op1 "nigeria"))
                  :ARG2 (c3 / capital))))

# ::snt how old is jennifer anniston
(p / person :name (n / name :op1 "jennifer" :op2 "anniston")
      :age (a / amr-unknown))

# ::snt can you tell me how many stomachs a cow has
(h / have-part-91
      :ARG1 (c / cow)
      :ARG2 (s / stomach
            :quant (a / amr-unknown)))

# ::snt what is a banana
(f / food-dish :name (n / name :op1 "banana")
      :mod (a / amr-unknown))

# ::snt where was kelly clarkson born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "kelly" :op2 "clarkson"))
      :location (a / amr-unknown))

# ::snt tell me the simple interest of seven with interest in two year
(h / have-quant-91
      :ARG1 (i2 / interest
            :ARG1-of (s / simple-02)
            :mod (p / percentage-entity :value 7))
      :ARG2 (a / amr-unknown)
      :time (a2 / after
            :op1 (n / now)
            :quant (t / temporal-quantity :quant 2
                  :unit (y / year))))

# ::snt what's the stock price of this item
(p / price-01
      :ARG1 (s / stock-01
            :ARG1 (i2 / item
                  :mod (t / this)))
      :ARG2 (a / amr-unknown))

# ::snt what's the average elevation of the united states
(e / elevate-01
      :ARG1 (c / country :name (n / name :op1 "united" :op2 "states"))
      :ARG1-of (a / average-01
            :ARG2 (a2 / amr-unknown)))

# ::snt what's trump been on about this week
(p / person :name (n / name :op1 "trump")
      :mod (a / amr-unknown)
      :time (w / week
            :mod (t / this)))

# ::snt ask my adviser
(a / ask-01 :mode imperative
      :ARG0 (y / you)
      :ARG2 (p / person
            :ARG0-of (a2 / advise-01
                  :ARG1 (i / i))))

# ::snt exchange rate i will get with foreign currency
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :mod (f / foreign)))
      :ARG2 (a / amr-unknown))

# ::snt which country's have a border to india
(b / border-01
      :ARG1 (c / country :plural +
            :mod (a / amr-unknown))
      :ARG2 (c2 / country :name (n2 / name :op1 "india")))

# ::snt what's a description of a virtual reality headset
(d / describe-01
      :ARG1 (h / headset
            :purpose (r / reality
                  :mod (v / virtual)))
      :ARG2 (a / amr-unknown))

# ::snt what is the definition of subjegant
(d / define-01
      :ARG1 (s / subjegant)
      :ARG2 (a / amr-unknown))

# ::snt what's the answer to the universe
(a / answer-01
      :ARG1 (u / universe)
      :ARG2 (a2 / amr-unknown))

# ::snt convert one pound to us dollar
(c3 / convert-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c2 / currency :quant 1 :name (n2 / name :op1 "pound"))
      :ARG2 (c / currency :name (n / name :op1 "us" :op2 "dollar")))

# ::snt find a definition
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (d / define-01)))

# ::snt what's kim kardashian's measurements
(m / measure-01
      :ARG1 (p / person :name (n / name :op1 "kim" :op2 "kardashian"))
      :ARG3 (a / amr-unknown))

# ::snt intel company stock price
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "intel")))
      :ARG2 (a / amr-unknown))

# ::snt currency exchange rate
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency))
      :ARG2 (a / amr-unknown))

# ::snt how far away is seattle
(f / far-01
      :ARG1 (c / city :name (n / name :op1 "seattle"))
      :extent (a / amr-unknown))

# ::snt did angelina jolie leave brad pitt
(l / leave-15
      :ARG0 (p / person :name (n / name :op1 "angelina" :op2 "jolie"))
      :ARG1 (p2 / person :name (n2 / name :op1 "brad" :op2 "pitt"))
      :polarity (a / amr-unknown))

# ::snt give me the stock price of apple
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "apple")))
      :ARG2 (a / amr-unknown))

# ::snt what is the rate of inr
(r / rate-01
      :ARG1 (c / currency :name (n / name :op1 "inr"))
      :ARG2 (a / amr-unknown))

# ::snt how old is cher
(p / person :name (n / name :op1 "cher")
      :age (a / amr-unknown))

# ::snt what is channing tatum's birthday
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "channing" :op2 "tatum"))
      :time (a / amr-unknown))

# ::snt how many people live in oxford now
(l / live-01
      :ARG0 (p / person
            :quant (a / amr-unknown))
      :location (c / city :name (n / name :op1 "oxford"))
      :time (n2 / now))

# ::snt olly how many meetings did mahatma gandhi undertake
(h / have-quant-91
      :ARG1 (m / meet-03
            :ARG0 (p / person :name (n / name :op1 "mahatma" :op2 "gandhi")))
      :ARG2 (a / amr-unknown))

# ::snt what is computer
(c / computer
      :mod (a / amr-unknown))

# ::snt what is the residing place of cricketer dhoni
(r / reside-01
      :ARG0 (p / person :name (n / name :op1 "dhoni")
            :ARG0-of (p2 / play-01
                  :ARG1 (c / cricket)))
      :ARG1 (a / amr-unknown))

# ::snt what was the last movie that brad pitt starred in
(m / movie
      :ARG2-of (s / star-01
            :ARG1 (p / person :name (n2 / name :op1 "brad" :op2 "pitt")))
      :mod (l / last)
      :mod (a / amr-unknown))

# ::snt define computer
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c / computer))

# ::snt what's the exchange rate for samsung
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / company :name (n / name :op1 "samsung")))
      :ARG2 (a / amr-unknown))

# ::snt where is stonehenge
(b / be-located-at-91
      :ARG1 (l / location :name (n / name :op1 "stonehenge"))
      :ARG2 (a / amr-unknown))

# ::snt with all of the information you can gather on the internet could you please provide me with the best probable explanation of who killed president kennedy
(k / kill-01
      :ARG0 (a2 / amr-unknown)
      :ARG1 (p2 / person :name (n / name :op1 "president" :op2 "kennedy"))
      :ARG1-of (e / explain-01 :polite + :mode imperative
            :ARG0 (y / you)
            :ARG2 (i / i)
            :ARG1-of (h / have-degree-91
                  :ARG2 (p3 / probable)
                  :ARG3 (m / most))
            :medium (i2 / information
                  :mod (a / all)
                  :ARG1-of (g / gather-01
                        :ARG0 y
                        :location (i3 / internet)
                        :ARG1-of (p4 / possible-01)))))

# ::snt what is sean connery's birthday
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "sean" :op2 "connery"))
      :time (a / amr-unknown))

# ::snt what state is david lynch from
(b / be-from-91
      :ARG1 (p / person :name (n / name :op1 "david" :op2 "lynch"))
      :ARG2 (s / state
            :mod (a / amr-unknown)))

# ::snt what's three plus three hundred and fifty five
(e / equal-01
      :ARG1 (s / sum-of :op1 3 :op2 355)
      :ARG2 (a / amr-unknown))

# ::snt what does it look like
(l / look-02
      :ARG0 (i2 / it)
      :ARG1 (a / amr-unknown))

# ::snt show me popular exchange rates
(s / show-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing :plural +
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01))
            :ARG1-of (p / popular-02))
      :ARG2 (i / i))

# ::snt three times two equals six
(e / equal-01
      :ARG1 (p / product-of :op1 3 :op2 2)
      :ARG2 6)

# ::snt topography melbourne
(t / topography
      :domain (c / city :name (n / name :op1 "melbourne"))
      :mod (a / amr-unknown))

# ::snt how tall is roraima mount
(t / tall-01
      :ARG1 (m / mountain :name (n / name :op1 "roraima" :op2 "mount"))
      :ARG2 (a / amr-unknown))

# ::snt how deep is the pacific ocean
(d / deep-02
      :ARG1 (o / ocean :name (n / name :op1 "pacific" :op2 "ocean"))
      :extent (a / amr-unknown))

# ::snt what is the dollar exchange rate
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "dollar")))
      :ARG2 (a / amr-unknown))

# ::snt what is one dollar in euros
(h / have-quant-91
      :ARG1 (c2 / currency :name (n2 / name :op1 "euros"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c / currency :quant 1 :name (n / name :op1 "dollar")))

# ::snt look up the number of people living in miami florida
(l / look-up-05 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (n / number-01
                  :ARG1 (p / person
                        :ARG0 (l2 / live-01
                              :location (c / city :name (n2 / name :op1 "miami")
                                    :part-of (s / state :name (n3 / name :op1 "florida"))))))))

# ::snt what is twenty four times twenty four
(e / equal-01
      :ARG1 (p / product-of :op1 24 :op2 24)
      :ARG2 (a / amr-unknown))

# ::snt how old is marian carey
(p / person :name (n / name :op1 "marian" :op2 "carey")
      :age (a / amr-unknown))

# ::snt give me the description of a laptop circuit
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c / circuit
            :part-of (l / laptop)))

# ::snt tell me how brexit is going to affect e. u. citizens in the long and mid terms
(a / affect-01
      :ARG0 (e / event :name (n / name :op1 "brexit"))
      :ARG1 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (w / world-region :name (n2 / name :op1 "e." :op2 "u."))
                  :ARG2 (c / citizen)))
      :ARG2 (a2 / amr-unknown)
      :time (a3 / and
            :op1 (l / long-term)
            :op2 (m / mid-term)))

# ::snt what is a basketball
(b / basketball
      :mod (a / amr-unknown))

# ::snt current price of coca-cola stock
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "coca-cola")))
      :ARG2 (a / amr-unknown)
      :time (c2 / current))

# ::snt what dance move is the most attractive
(h / have-degree-91
      :ARG1 (m / move-01
            :manner (d / dance-01)
            :mod (a / amr-unknown))
      :ARG2 (a2 / attract-01
            :ARG2 m)
      :ARG3 (m2 / most))

# ::snt how tall is lebron james
(t / tall-01
      :ARG1 (p / person :name (n / name :op1 "lebron" :op2 "james"))
      :ARG2 (a / amr-unknown))

# ::snt what's the dow jones at today
(h / have-mod-91
      :ARG1 (o / organization :name (n / name :op1 "dow" :op2 "jones"))
      :ARG2 (a / amr-unknown)
      :time (t / today))

# ::snt how much does nestle company cost
(c / cost-01
      :ARG1 (c2 / company :name (n / name :op1 "nestle"))
      :ARG2 (a / amr-unknown))

# ::snt none
(h / have-quant-91
      :ARG2 0)

# ::snt mention the stock price of hdfc
(p / price-01
      :ARG1 (c / company :name (n / name :op1 "hdfc"))
      :ARG2 (a / amr-unknown))

# ::snt who was the first president of united states
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c / country :name (n2 / name :op1 "united" :op2 "states"))
      :ARG2 (p / president)
      :ord (o / ordinal-entity :value 1))

# ::snt location
(l / location)

# ::snt where is stockton california
(b / be-located-at-91
      :ARG1 (c / city :name (n / name :op1 "stockton")
            :location (s / state :name (n2 / name :op1 "california")))
      :ARG2 (a / amr-unknown))

# ::snt is pink recording a new album
(r / record-01
      :ARG0 (p / person :name (n / name :op1 "pink"))
      :ARG1 (a / album
            :ARG1-of (n2 / new-01))
      :polarity (a2 / amr-unknown))

# ::snt what is the capital of mexico
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c2 / country :name (n2 / name :op1 "mexico"))
      :ARG2 (c / capital))

# ::snt what color is a dragon fruit
(c / color-01
      :ARG1 (f / food-dish :name (n / name :op1 "dragon" :op2 "fruit"))
      :ARG2 (a / amr-unknown))

# ::snt what's the closing price of apple
(p / price-01
      :ARG1 (c / company :name (n / name :op1 "apple"))
      :ARG2 (a / amr-unknown)
      :time (c2 / close-02))

# ::snt the following question asks you to analyze teacher goals and actions intended
(a / ask-01
      :ARG1 (a2 / analyze-01
            :ARG0 y
            :ARG1 (a3 / and
                  :op1 (g / goal
                        :poss (p / person
                              :ARG0-of (t / teach-01)))
                  :op2 (a4 / act-02
                        :ARG0 p
                        :ARG1-of (i2 / intend-01
                              :ARG0 p))))
      :ARG2 (y / you)
      :ARG1-of (q / question-01
            :ARG1-of (f / follow-01)))

# ::snt give me the age of chuck norris
(p / person :name (n / name :op1 "chuck" :op2 "norris")
      :age (a / amr-unknown))

# ::snt when was last academy award winning movie
(b / be-temporally-at-91
      :ARG1 (m / movie
            :ARG2-of (w / win-01
                  :ARG1 (a / award :name (n / name :op1 "academy" :op2 "award")))
            :mod (l / last))
      :ARG2 (a2 / amr-unknown))

# ::snt what is computer game
(g / game
      :mod (a / amr-unknown)
      :mod (c / computer))

# ::snt show geographic details of pyramids
(s / show-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing :plural +
            :ARG1-of (d / detail-01)
            :topic (g / geography
                  :domain (p / pyramid :plural +))))

# ::snt meaning of word
(m / mean-01
      :ARG1 (w / word)
      :ARG2 (a / amr-unknown))

# ::snt siri describe a rainbow
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (r / rainbow))

# ::snt how many times was richard nixon married
(m / marry-01
      :ARG1 (p / person :name (n / name :op1 "richard" :op2 "nixon"))
      :frequency (a / amr-unknown))

# ::snt what is the yen us dollar exchange rate
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "yen"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "us" :op2 "dollar")))
      :ARG2 (a / amr-unknown))

# ::snt please tell me about the historic facts about india
(t2 / tell-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (f / fact :plural +
            :mod (h / history)
            :topic (c / country :name (n / name :op1 "india")))
      :ARG2 (i / i))

# ::snt did the stock prices of google go up or down
(a / amr-choice
      :op1 (u / up-02
            :ARG1 (t / thing
                  :ARG2-of (p / price-01
                        :ARG1 (s / stock
                              :mod (c / company :name (n / name :op1 "google"))))))
      :op2 (d / down-03
            :ARG1 t))

# ::snt tell me about martin luther king junior
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (p / person :name (n / name :op1 "martin" :op2 "luther" :op3 "king" :op4 "junior")))
      :ARG2 (i / i))

# ::snt calculate distance from boston to new york
(c3 / calculate-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (d2 / distance-quantity
            :extent-of (d / distant-02
                  :ARG1 (c / city :name (n / name :op1 "boston"))
                  :ARG2 (c2 / city :name (n2 / name :op1 "new" :op2 "york")))))

# ::snt alexa what is google
(c / company :name (n / name :op1 "google")
      :mod (a / amr-unknown))

# ::snt define this
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :mod (t2 / this)))

# ::snt search on his interests
(s / search-01 :mode imperative
      :ARG0 (y / you)
      :ARG2 (t / thing
            :ARG2-of (i2 / interest-01
                  :ARG1 (h / he))))

# ::snt where do the rocky mountains start
(s / start-01
      :ARG1 (m / mountain :name (n / name :op1 "rocky" :op2 "mountains"))
      :location (a / amr-unknown))

# ::snt how many mega pixel is listed in the description of the canon
(h / have-quant-91
      :ARG1 (p / pixel
            :ARG1-of (l / list-01
                  :ARG2 (d / describe-01
                        :ARG1 (p2 / product :name (n / name :op1 "canon"))))
            :mod (m / mega))
      :ARG2 (a / amr-unknown))

# ::snt what are the synonyms of placid
(s / synonym :plural +
      :mod (a / amr-unknown)
      :topic (p / placid))

# ::snt when can you use word set
(u / use-01
      :ARG0 (y / you)
      :ARG1 (s / set
            :mod (w / word))
      :ARG2 (a / amr-unknown))

# ::snt how much does elton john pay for his suits
(p / pay-01
      :ARG0 (p2 / person :name (n / name :op1 "elton" :op2 "john"))
      :ARG1 (m / monetary-quantity
            :quant (a / amr-unknown))
      :ARG3 (s / suit :plural +
            :poss p2))

# ::snt exchange rate for converting ten dollar to euro
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :quant 10 :name (n / name :op1 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "euro")))
      :ARG2 (a / amr-unknown))

# ::snt how tall is the empire state building
(t / tall-01
      :ARG1 (b / building :name (n / name :op1 "empire" :op2 "state" :op3 "building"))
      :ARG2 (a / amr-unknown))

# ::snt what is the rate for g. b. p. to u. s. d.
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "g." :op2 "b." :op3 "p."))
            :ARG3 (c2 / currency :name (n2 / name :op1 "u." :op2 "s." :op3 "d.")))
      :ARG2 (a / amr-unknown))

# ::snt what year did michael jackson die
(d / die-01
      :ARG1 (p / person :name (n / name :op1 "michael" :op2 "jackson"))
      :time (d2 / date-entity
            :year (a / amr-unknown)))

# ::snt what is the definition of timeliness
(d / define-01
      :ARG1 (t / timeliness)
      :ARG2 (a / amr-unknown))

# ::snt tell me about barack obama
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing :plural +
            :topic (p / person :name (n / name :op1 "barack" :op2 "obama")))
      :ARG2 (i / i))

# ::snt was einstein married
(m / marry-01
      :ARG1 (p / person :name (n / name :op1 "einstein"))
      :polarity (a / amr-unknown))

# ::snt how much is amazon stock
(v / value-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "amazon")))
      :ARG2 (a / amr-unknown))

# ::snt what is the current stock price of rolls royce
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "rolls" :op2 "royce")))
      :ARG2 (a / amr-unknown)
      :time (n2 / now))

# ::snt describe the general topography of central park
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / topography
            :ARG1-of (g / general-02)
            :domain (p / park :name (n / name :op1 "central" :op2 "park"))))

# ::snt alexa how large is the universe in miles
(l / large-01
      :ARG1 (u / universe)
      :extent (d / distance-quantity
            :quant (a / amr-unknown)
            :unit (m / mile)))

# ::snt what is the largest desk
(h2 / have-degree-91
      :ARG1 (d / desk
            :mod (a / amr-unknown))
      :ARG2 (l / large-01
            :ARG1 d)
      :ARG3 (m / most))

# ::snt birth date for movie star keanu reeves
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "keanu" :op2 "reeves")
            :ARG1-of (s / star-01
                  :ARG2 (m / movie)))
      :time (a / amr-unknown))

# ::snt explain to me how gravity works
(e / explain-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (m / manner
            :manner-of (w / work-09
                  :ARG1 (g / gravity)))
      :ARG2 (i / i))

# ::snt what is the definition of mutual
(d / define-01
      :ARG1 (m / mutual)
      :ARG2 (a / amr-unknown))

# ::snt in this country what is the exchange rate
(r / rate-01
      :ARG1 (e / exchange-01)
      :ARG2 (a / amr-unknown)
      :location (c / country
            :mod (t / this)))

# ::snt could you explain the meaning of exorbitant for me please
(e / explain-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (m / mean-01
                  :ARG1 (e2 / exorbitant)))
      :ARG2 (i / i))

# ::snt what is the name of a lake that has dried up over the years
(n / name-01
      :ARG1 (l / lake
            :ARG1-of (d / dry-02
                  :duration (m / multiple
                        :op1 (t / temporal-quantity :quant 1
                              :unit (y / year)))))
      :ARG2 (a / amr-unknown))

# ::snt show me share price of amazon
(s2 / show-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / share
                        :mod (c / company :name (n / name :op1 "amazon")))))
      :ARG2 (i / i))

# ::snt origin of word
(o / originate-01
      :ARG1 (w / word)
      :ARG2 (a / amr-unknown))

# ::snt olly how many rivers are there in europe
(h / have-quant-91
      :ARG1 (r / river
            :part-of (c / continent :name (n / name :op1 "europe")))
      :ARG2 (a / amr-unknown))

# ::snt how expensive is google stock
(e / expensive-02
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "google")))
      :ARG2 (a / amr-unknown))

# ::snt show various plants in earth
(s / show-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / plant :plural +
            :mod (v / various)
            :location (p2 / planet :name (n / name :op1 "earth"))))

# ::snt what does apple of my eye mean
(m / mean-01
      :ARG1 (s / string-entity :value "apple of my eye")
      :ARG2 (a / amr-unknown))

# ::snt is it true the gym is seven miles away
(t / true-01
      :ARG1 (d / distant-02
            :ARG1 (g / gym)
            :extent (d2 / distance-quantity :quant 7
                  :unit (m / mile)))
      :polarity (a / amr-unknown))

# ::snt what is the longest river in spain
(h2 / have-degree-91
      :ARG1 (r / river
            :mod (a / amr-unknown))
      :ARG2 (l / long-03
            :ARG1 r)
      :ARG3 (m / most)
      :ARG5 (r2 / river
            :part-of (c / country :name (n2 / name :op1 "spain"))))

# ::snt who is the current us treasury secretary
(h2 / have-org-role-91
      :ARG0 (a2 / amr-unknown)
      :ARG1 (g / government-organization :name (n / name :op1 "us" :op2 "treasury"))
      :ARG2 (s / secretary)
      :time (c / current))

# ::snt tell me the stock rate of hyundai
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (r / rate-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "hyundai")))))
      :ARG2 (i / i))

# ::snt if i have five u. s. d. how much is that in aud
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "aud"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 5 :name (n2 / name :op1 "u." :op2 "s." :op3 "d.")))

# ::snt what does turbulence mean
(m / mean-01
      :ARG1 (t / turbulence)
      :ARG2 (a / amr-unknown))

# ::snt please defined about printing works
(w / work-09 :polite +
      :ARG1 (p / print-01)
      :manner (a / amr-unknown))

# ::snt alexa tell me the exchange rate of ten dollar to euro
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :quant 10 :name (n / name :op1 "dollar"))
                        :ARG3 (c2 / currency :name (n2 / name :op1 "euro")))))
      :ARG2 (i / i))

# ::snt what is the result of one hundred minus fifty
(e / equal-01
      :ARG1 (d / difference-of :op1 100 :op2 50)
      :ARG2 (a / amr-unknown))

# ::snt how big is the stashable cinch bag and what does it look like
(a / and
      :op1 (b / big-01
            :ARG1 (b2 / bag
                  :part (t / thing
                        :ARG1-of (c / cinch-01))
                  :ARG1-of (s / stash-01
                        :ARG1-of (p / possible-01)))
            :ARG2 (a2 / amr-unknown))
      :op2 (l / look-02
            :ARG0 b2
            :ARG1 (a3 / amr-unknown)))

# ::snt please find description of the newest canon rebel camera
(d / describe-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (p / product :name (n / name :op1 "canon" :op2 "rebel" :op3 "camera")
            :ARG1-of (h / have-degree-91
                  :ARG2 (n2 / new-01
                        :ARG1 p)
                  :ARG3 (m / most))))

# ::snt what is a workhouse
(w / workhouse
      :mod (a / amr-unknown))

# ::snt dollar to euro exchange rate
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "euro")))
      :ARG2 (a / amr-unknown))

# ::snt hey olly what is the definition of recipe
(d / define-01
      :ARG1 (r / recipe)
      :ARG2 (a / amr-unknown))

# ::snt try following these steps to select the correct answer
(t / try-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (f / follow-02
            :ARG0 y
            :ARG1 (t2 / thing :plural +
                  :ARG4-of (s / step-01))
            :purpose (s2 / select-01
                  :ARG0 y
                  :ARG1 (t3 / thing
                        :ARG2-of (a / answer-01)
                        :ARG1-of (c / correct-02)))))

# ::snt what is the net worth of the celebrity
(w / worth-01
      :ARG1 (c / celebrity)
      :ARG2 (a / amr-unknown)
      :ARG1-of (n / net-out-01))

# ::snt what does obligatory mean
(m / mean-01
      :ARG1 (o / obligate-01)
      :ARG2 (a / amr-unknown))

# ::snt what is the price of ford stock
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "ford")))
      :ARG2 (a / amr-unknown))

# ::snt geo info
(i3 / information
      :topic (g / geography)
      :mod (a / amr-unknown))

# ::snt how is iron made
(m / make-01
      :ARG1 (e / element :name (n / name :op1 "iron"))
      :manner (a / amr-unknown))

# ::snt dollar rate of philippiness peso
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "philippiness" :op2 "peso"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "dollar")))
      :ARG2 (a / amr-unknown))

# ::snt what does pro bono mean
(m / mean-01
      :ARG1 (s / string-entity :value "pro bono")
      :ARG2 (a / amr-unknown))

# ::snt do you know actor surya
(k / know-02
      :ARG0 (y / you)
      :ARG1 (p / person :name (n / name :op1 "surya")
            :ARG0-of (a / act-01))
      :polarity (a2 / amr-unknown))

# ::snt is the largest ocean in the world the pacific
(h / have-degree-91
      :ARG1 (o / ocean :name (n / name :op1 "pacific"))
      :ARG2 (l / large-01
            :ARG1 o)
      :ARG3 (m / most)
      :ARG5 (o2 / ocean
            :part-of (w / world))
      :polarity (a / amr-unknown))

# ::snt how many euros can i get for one dollar
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "euros"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "dollar")))

# ::snt what does speaker mean
(m / mean-01
      :ARG1 (s / speaker)
      :ARG2 (a / amr-unknown))

# ::snt angelina has a birthday when
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "angelina"))
      :time (a / amr-unknown))

# ::snt resolve this thirty twelve
(r / resolve-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / string-entity :value "thirty twelve"
            :mod (t / this)))

# ::snt tvs stock price
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "tvs")))
      :ARG2 (a / amr-unknown))

# ::snt tell me what subterranean means
(m / mean-01
      :ARG1 (s / subterranean)
      :ARG2 (a / amr-unknown))

# ::snt what does this word means
(m / mean-01
      :ARG1 (w / word
            :mod (t / this))
      :ARG2 (a / amr-unknown))

# ::snt what is one hundred and twenty three times one hundred and twenty three
(e / equal-01
      :ARG1 (p / product-of :op1 123 :op2 123)
      :ARG2 (a / amr-unknown))

# ::snt foreign exchange rates
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :mod (f / foreign)))
      :ARG2 (a / amr-unknown))

# ::snt define economics
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (e / economics))

# ::snt find me info on
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (i2 / inform-01
                  :ARG1 (i / i)))
      :ARG2 i)

# ::snt what is immigrant
(i2 / immigrant
      :mod (a / amr-unknown))

# ::snt what's the cheapest price for zoella's first book
(h / have-degree-91
      :ARG1 (p / price-01
            :ARG1 (b / book
                  :ord (o / ordinal-entity :value 1)
                  :poss (p2 / person :name (n / name :op1 "zoella"))))
      :ARG2 (c / cheap-02
            :ARG1 p)
      :ARG3 (m / most)
      :ARG5 (p3 / price-01
            :ARG1 b))

# ::snt how old is barack obaba
(p / person :name (n / name :op1 "barack" :op2 "obaba")
      :age (a / amr-unknown))

# ::snt can you help me find the answer to this question
(a / answer-01 :polite +
      :ARG1 (t / thing
            :ARG1-of (q / question-01)
            :mod (t2 / this))
      :ARG2 (a2 / amr-unknown))

# ::snt turn on notification for all news on the stock market
(t / turn-on-13 :mode imperative
      :ARG0 (y / you)
      :ARG1 (n / notify-01
            :ARG2 (n2 / news
                  :topic (m / market-01
                        :ARG1 (s / stock))
                  :mod (a / all))))

# ::snt when was richard nixon born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "richard" :op2 "nixon"))
      :time (a / amr-unknown))

# ::snt what's bob scrote's net worth
(w / worth-01
      :ARG1 (p / person :name (n / name :op1 "bob" :op2 "scrote"))
      :ARG2 (a / amr-unknown)
      :ARG1-of (n2 / net-02))

# ::snt define a stronomy
(d / define-01
      :ARG1 (a / astronomy)
      :ARG2 (a2 / amr-unknown))

# ::snt what was the first movie of morgan freeman
(m / movie
      :ord (o / ordinal-entity :value 1)
      :poss (p / person :name (n2 / name :op1 "morgan" :op2 "freeman"))
      :mod (a / amr-unknown))

# ::snt tell me about medieval war engines
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (e / engine
                  :instrument-of (w / war-01
                        :time (h / historical-period :name (n / name :op1 "middle" :op2 "ages")))))
      :ARG2 (i / i))

# ::snt what does settle mean
(m / mean-01
      :ARG1 (s / settle)
      :ARG2 (a / amr-unknown))

# ::snt what's going to be the cure for cancer
(c / cure-01
      :ARG2 (d / disease :name (n / name :op1 "cancer"))
      :ARG3 (a / amr-unknown))

# ::snt send me the stock market updates for today
(s2 / send-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (u / update-02
                  :time (t / today))
            :topic (m / market-01
                  :ARG1 (s / stock)))
      :ARG2 (i / i))

# ::snt what is clint eastwood doing these days
(d / do-02
      :ARG0 (p / person :name (n / name :op1 "clint" :op2 "eastwood"))
      :ARG1 (a / amr-unknown)
      :time (d2 / day
            :mod (t / this)))

# ::snt olly what is the definition of the word snafu
(d / define-01
      :ARG1 (s / snafu
            :mod (w / word))
      :ARG2 (a / amr-unknown))

# ::snt tell me background family of selena gomez
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (b / background
            :topic (p / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG1 (p2 / person :name (n / name :op1 "selena" :op2 "gomez"))
                        :ARG2 (f / family))))
      :ARG2 (i / i))

# ::snt what does joke mean
(m / mean-01
      :ARG1 (j / joke-01)
      :ARG2 (a / amr-unknown))

# ::snt please describe the new harley davidson street bike
(d / describe-01 :polite + :mode imperative
      :ARG0 (y / you)
      :ARG1 (b / bike
            :mod (s / street)
            :mod (c / company :name (n / name :op1 "harley" :op2 "davidson"))
            :ARG1-of (n2 / new-01)))

# ::snt how far away is
(f / far-01)

# ::snt tell exchange rate of pound
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :name (n / name :op1 "pound"))))))

# ::snt how is the current stock price looking for charmin
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "charmin")))
      :ARG2 (a / amr-unknown)
      :time (c2 / current))

# ::snt what's the capital of new york
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (s / state :name (n2 / name :op1 "new" :op2 "york"))
      :ARG2 (c / capital))

# ::snt define loquaciousness
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (l / loquaciousness))

# ::snt could you please give me the birthday of mahatma gandhiji
(b / bear-02 :polite +
      :ARG1 (p / person :name (n / name :op1 "mahatma" :op2 "gandhiji"))
      :time (a / amr-unknown))

# ::snt what is the dollar price in inr
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "inr"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "dollar")))

# ::snt what is the definition of marinara
(d / define-01
      :ARG1 (f / food-dish :name (n / name :op1 "marinara"))
      :ARG2 (a / amr-unknown))

# ::snt what is the current dollar to euro conversion rate
(r / rate-01
      :ARG1 (c / convert-01
            :ARG1 (c2 / currency :name (n / name :op1 "dollar"))
            :ARG2 (c3 / currency :name (n2 / name :op1 "euro")))
      :ARG2 (a / amr-unknown)
      :time (c4 / current))

# ::snt how many rupies are in a dollar
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "rupies"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "dollar")))

# ::snt what is the google stock at
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "google")))
      :ARG2 (a / amr-unknown))

# ::snt i've got dollars for the month how much can i spend every day this month
(p / possible-01
      :ARG1 (s / spend-01
            :ARG0 (i / i)
            :ARG3 (m / monetary-quantity
                  :quant (a / amr-unknown))
            :frequency (r / rate-entity-91
                  :ARG1 (t2 / temporal-quantity :quant 1
                        :unit (d2 / day))
                  :ARG2 (t3 / temporal-quantity :quant 1
                        :unit (m3 / month))))
      :condition (h / have-03
            :ARG0 i
            :ARG1 (d / dollar
                  :ARG1-of (h2 / have-degree-91
                        :ARG3 (e / enough)
                        :ARG6 (t / temporal-quantity :quant 1
                              :unit (m2 / month))))))

# ::snt browsing centers
(c / center :plural +
      :purpose (b / browse-01))

# ::snt convert the american dollar to the euro
(c3 / convert-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c2 / currency :quant 1 :name (n2 / name :op1 "american" :op2 "dollar"))
      :ARG2 (c / currency :name (n / name :op1 "euro")))

# ::snt how old is j. k. rowling
(p / person :name (n / name :op1 "j." :op2 "k." :op3 "rowling")
      :age (a / amr-unknown))

# ::snt what is the exchange between dollar and british pound
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "british" :op2 "pound")))
      :ARG2 (a / amr-unknown))

# ::snt what is the euro to dollar exchange rate
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "euro"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "dollar")))
      :ARG2 (a / amr-unknown))

# ::snt can you describe a credit card
(d / describe-01
      :ARG0 (y / you)
      :ARG1 (c / card
            :purpose (c2 / credit-02))
      :ARG2 (a / amr-unknown))

# ::snt what color is a basketball
(c / color-01
      :ARG1 (b / basketball)
      :ARG2 (a / amr-unknown))

# ::snt how the eiffel tower looks like
(l / look-02
      :ARG0 (f / facility :name (n / name :op1 "eiffel" :op2 "tower"))
      :ARG1 (a / amr-unknown))

# ::snt what is burmuda triangle
(w / world-region :name (n / name :op1 "burmuda" :op2 "triangle")
      :mod (a / amr-unknown))

# ::snt how much is starbuck's stock these days
(v / value-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "starbucks")))
      :ARG2 (a / amr-unknown)
      :time (d / day
            :mod (t / this)))

# ::snt show me current exchange rate between euros and other currencies
(s / show-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :name (n / name :op1 "euros"))
                        :ARG3 (c2 / currency :plural +
                              :mod (o / other)))
                  :time (c3 / current)))
      :ARG2 (i / i))

# ::snt where is leah remini from
(b / be-from-91
      :ARG1 (p / person :name (n / name :op1 "leah" :op2 "remini"))
      :ARG2 (a / amr-unknown))

# ::snt what is the mass of a microwave
(w / weigh-01
      :ARG1 (t / thing
            :instrument-of (m / microwave-01))
      :ARG3 (m2 / mass-quantity
            :quant (a / amr-unknown)))

# ::snt what is the weight of an elephant
(w / weigh-01
      :ARG1 (e / elephant)
      :ARG3 (a / amr-unknown))

# ::snt what is the dollar equivalent in pesos
(h / have-quant-91
      :ARG1 (c2 / currency :name (n2 / name :op1 "pesos"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c / currency :quant 1 :name (n / name :op1 "dollar")))

# ::snt what is the capital of new hampshire
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (s / state :name (n2 / name :op1 "new" :op2 "hampshire"))
      :ARG2 (c / capital))

# ::snt what road is longest
(h2 / have-degree-91
      :ARG1 (r / road
            :mod (a / amr-unknown))
      :ARG2 (l / long-03
            :ARG1 r)
      :ARG3 (m / most))

# ::snt notify me of the latest news on the stock market
(n2 / notify-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (i / i)
      :ARG2 (n / news
            :topic (m / market-01
                  :ARG1 (s / stock))
            :mod (l / last)))

# ::snt what is the value of the yen right now
(v / value-01
      :ARG1 (c / currency :name (n / name :op1 "yen"))
      :ARG2 (a / amr-unknown)
      :time (n2 / now
            :time (r / right-yy)))

# ::snt what is apple's stock price
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "apple")))
      :ARG2 (a / amr-unknown))

# ::snt how tall was abraham lincoln
(t / tall-01
      :ARG1 (p / person :name (n / name :op1 "abraham" :op2 "lincoln"))
      :ARG2 (a / amr-unknown))

# ::snt what is the current exchange rate of euro to dollar
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "euro"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "dollar")))
      :ARG2 (a / amr-unknown)
      :time (c3 / current))

# ::snt how do you define problematic
(d / define-01
      :ARG0 (y / you)
      :ARG1 (p / problematic)
      :ARG2 (a / amr-unknown))

# ::snt how much was airtel sold for sometime back
(s / sell-01
      :ARG1 (c / company :name (n / name :op1 "airtel"))
      :ARG3 (a / amr-unknown)
      :time (b / before
            :op1 (n2 / now)))

# ::snt olly tell me about it
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (i2 / it))
      :ARG2 (i / i))

# ::snt what is a sloth
(s / sloth
      :mod (a / amr-unknown))

# ::snt what is the exchange rate between pound sterling and the u. s. dollar
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "pound" :op2 "sterling"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "u." :op2 "s." :op3 "dollar")))
      :ARG2 (a / amr-unknown))

# ::snt open map
(o / open-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :instrument-of (m / map-01)))

# ::snt what time zone is arizona in
(b / be-located-at-91
      :ARG1 (s / state :name (n / name :op1 "arizona"))
      :ARG2 (z / zone
            :purpose (t / time-01)
            :mod (a / amr-unknown)))

# ::snt what is the yen worth
(w / worth-01
      :ARG1 (c / currency :name (n / name :op1 "yen"))
      :ARG2 (a / amr-unknown))

# ::snt have i made loss in which stocks
(l / lose-02
      :ARG0 (i / i)
      :ARG1 (a / amr-unknown)
      :ARG3 (s / stock :plural +))

# ::snt tell me about chuck norris
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (p / person :name (n / name :op1 "chuck" :op2 "norris")))
      :ARG2 (i / i))

# ::snt what movies has casey affleck starred in
(s / star-01
      :ARG1 (p / person :name (n / name :op1 "casey" :op2 "affleck"))
      :ARG2 (m / movie :plural +
            :mod (a / amr-unknown)))

# ::snt alexa tell me keywords about usain bolt
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (k / keyword :plural +
            :topic (p / person :name (n / name :op1 "usain" :op2 "bolt")))
      :ARG2 (i / i))

# ::snt what is the coldest state in the us
(h2 / have-degree-91
      :ARG1 (s / state
            :mod (a / amr-unknown))
      :ARG2 (c / cold-01
            :ARG1 s)
      :ARG3 (m / most)
      :ARG5 (s2 / state
            :location (c2 / country :name (n2 / name :op1 "us"))))

# ::snt where is channing tatum from
(b / be-from-91
      :ARG1 (p / person :name (n / name :op1 "channing" :op2 "tatum"))
      :ARG2 (a / amr-unknown))

# ::snt what is the answer to two times three
(e / equal-01
      :ARG1 (p / product-of :op1 2 :op2 3)
      :ARG2 (a / amr-unknown))

# ::snt what is a neutral density filter and would i want a gradient one or a solid one also which would be better in style between the screw on one and the square ones
(a / and
      :op1 (t / thing
            :ARG0-of (f / filter-02)
            :ARG0-of (n / neutral-02)
            :mod (d / density)
            :mod (a2 / amr-unknown))
      :op2 (w / want-01
            :ARG0 (i / i)
            :ARG1 (a3 / amr-choice
                  :op1 (g / gradient
                        :domain t)
                  :op2 (s / solid-02
                        :ARG1 t)))
      :op3 (a4 / amr-choice
            :op1 (h / have-degree-91
                  :ARG1 (s2 / screw-04
                        :ARG1 t)
                  :ARG2 (g2 / good-02
                        :ARG1 s2
                        :topic (s4 / style-01))
                  :ARG3 (m / more)
                  :ARG4 (s3 / square-04
                        :ARG1 t))
            :op2 (h2 / have-degree-91
                  :ARG1 s3
                  :ARG2 (g3 / good-02
                        :ARG1 s3
                        :topic s4)
                  :ARG3 (m2 / more)
                  :ARG4 s2)))

# ::snt explain bob dylan
(e / explain-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / person :name (n / name :op1 "bob" :op2 "dylan")))

# ::snt what video game should i play next
(r / recommend-01
      :ARG1 (p / play-01
            :ARG0 (i / i)
            :ARG1 (g / game
                  :mod (v / video)
                  :mod (a / amr-unknown))
            :ARG1-of (n / next-01)))

# ::snt has sally fields ever won an academy award
(w / win-01
      :ARG0 (p / person :name (n / name :op1 "sally" :op2 "fields"))
      :ARG1 (a / award :name (n2 / name :op1 "academy" :op2 "award"))
      :time (e / ever)
      :polarity (a2 / amr-unknown))

# ::snt list me the stock of apple right now
(l / list-01
      :ARG0 (y / you)
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "apple")))
      :time (n2 / now
            :degree (r / right-yy)))

# ::snt how tall is hulk hogan
(t / tall-01
      :ARG1 (p / person :name (n / name :op1 "hulk" :op2 "hogan"))
      :ARG2 (a / amr-unknown))

# ::snt what is elvis favorite ride
(h2 / have-degree-91
      :ARG1 (t / thing
            :ARG1-of (r / ride-01
                  :ARG0 (p / person :name (n / name :op1 "elvis")))
            :mod (a / amr-unknown))
      :ARG2 (f / favor-01
            :ARG0 p
            :ARG1 t)
      :ARG3 (m / most))

# ::snt tell me the info about india's geography
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (i3 / information
            :topic (g / geography
                  :domain (c / country :name (n / name :op1 "india"))))
      :ARG2 (i / i))

# ::snt tell me when will indians economy touch that of americas
(t2 / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t3 / time
            :time-of (t / touch-01
                  :ARG0 (e / economy
                        :poss (c / country :name (n / name :op1 "india")))
                  :ARG1 (e2 / economy
                        :poss (c2 / country :name (n2 / name :op1 "americas")))))
      :ARG2 (i / i))

# ::snt change dollar to rupees rates
(r / rate-01
      :ARG1 (c / change-01
            :ARG1 (c2 / currency :name (n / name :op1 "dollar"))
            :ARG2 (c3 / currency :name (n2 / name :op1 "rupees")))
      :ARG2 (a / amr-unknown))

# ::snt how much is one u. s. d. in inr
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "inr"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "u." :op2 "s." :op3 "d.")))

# ::snt what volcanoes are currently active
(v / volcano :plural +
      :ARG0-of (a / activity-06
            :time (c / current))
      :mod (a2 / amr-unknown))

# ::snt what are the different types of round objects
(i2 / include-91
      :ARG1 (t / thing :plural +
            :ARG1-of (t2 / type-03
                  :ARG2 o)
            :ARG1-of (d / differ-02)
            :mod (a / amr-unknown))
      :ARG2 (o / object
            :ARG1-of (r / round-06)))

# ::snt alexa define television
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / television))

# ::snt where is the largest volcano in the world
(b / be-located-at-91
      :ARG1 (v / volcano
            :ARG1-of (h / have-degree-91
                  :ARG2 (l / large-01
                        :ARG1 v)
                  :ARG3 (m / most)
                  :ARG5 (v2 / volcano
                        :location (w / world))))
      :ARG2 (a / amr-unknown))

# ::snt please provide geographic information about taiwan
(p / provide-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (i3 / information
            :topic (g / geography
                  :domain (c / country :name (n / name :op1 "taiwan")))))

# ::snt convert czk to euro
(c / convert-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c2 / currency :name (n / name :op1 "czk"))
      :ARG2 (c3 / currency :name (n2 / name :op1 "euro")))

# ::snt what is rock
(r / rock
      :mod (a / amr-unknown))

# ::snt what is the stock price for lexmark
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "lexmark")))
      :ARG2 (a / amr-unknown))

# ::snt when does the super bowl officially start
(s / start-01
      :ARG1 (g / game :name (n / name :op1 "super" :op2 "bowl"))
      :time (a / amr-unknown)
      :mod (o / official))

# ::snt synonym of word
(s / synonym
      :domain (w / word)
      :mod (a / amr-unknown))


# ::snt will it be good to buy nike stock today
(g / good-02
      :ARG1 (b / buy-01
            :ARG1 (s / stock
                  :mod (c / company :name (n / name :op1 "nike")))
            :time (t / today))
      :polarity (a / amr-unknown))

# ::snt please give me information about john abraham lincon
(g / give-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (i3 / information
            :topic (p / person :name (n / name :op1 "john" :op2 "abraham" :op3 "lincon")))
      :ARG2 (i / i))

# ::snt what color is the sky
(c / color-01
      :ARG1 (s / sky)
      :ARG2 (a / amr-unknown))

# ::snt describe about the computer hard disk
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (d2 / disk
            :ARG1-of (h / hard-04)
            :part-of (c / computer)))

# ::snt have halifax shares gone up today
(u / up-02
      :ARG1 (s / share
            :mod (c / company :name (n / name :op1 "halifax")))
      :time (t / today)
      :polarity (a / amr-unknown))

# ::snt what is an organism
(o / organism
      :mod (a / amr-unknown))

# ::snt what us state is farthest north
(s / state
      :ARG1-of (h / have-degree-91
            :ARG2 (f / far-01
                  :ARG1 s)
            :ARG3 (m / most)
            :ARG5 (s2 / state
                  :location (c / country :name (n2 / name :op1 "us")))
            :direction (n3 / north))
      :mod (a / amr-unknown))

# ::snt how many pesos to an american dollar
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "pesos"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "american" :op2 "dollar")))

# ::snt blanket definition
(d / define-01
      :ARG1 (b / blanket)
      :ARG2 (a / amr-unknown))

# ::snt how you will define religion
(d / define-01
      :ARG0 (y / you)
      :ARG1 (r / religion)
      :ARG2 (a / amr-unknown))

# ::snt has the dollar rate increased
(i2 / increase-01
      :ARG1 (r / rate-01
            :ARG1 (c / currency :name (n / name :op1 "dollar")))
      :polarity (a / amr-unknown))

# ::snt where is the best vacation spot in california
(b / be-located-at-91
      :ARG1 (s / spot
            :ARG1-of (h / have-degree-91
                  :ARG2 (g / good-02
                        :ARG1 s)
                  :ARG3 (m / most)
                  :ARG5 (s3 / spot
                        :ARG1-of (v / vacation-01)
                        :location (s2 / state :name (n / name :op1 "california")))))
      :ARG2 (a / amr-unknown))

# ::snt what is the stock price for
(h / have-purpose-91
      :ARG1 (p / price-01
            :ARG1 (s / stock))
      :ARG2 (a / amr-unknown))

# ::snt which part of the country has tropical forest
(b / be-located-at-91
      :ARG1 (f / forest
            :mod (t / tropic))
      :ARG2 (p / part
            :location (c / country)
            :mod (a / amr-unknown)))

# ::snt what kinds of sunglasses are considered aviators
(s / sunglasses
      :mod (a / aviator)
      :mod (a2 / amr-unknown))

# ::snt what is the meaning of a stethoscope
(m / mean-01
      :ARG1 (s / stethoscope)
      :ARG2 (a / amr-unknown))

# ::snt how many legs does a dog have
(h2 / have-quant-91
      :ARG1 (l / leg
            :part-of (d / dog))
      :ARG2 (a2 / amr-unknown))

# ::snt what is the meaning of
(m / mean-01)

# ::snt give me the exchange rate for dollar in euros
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "euros")))
      :ARG2 (a / amr-unknown))

# ::snt africa info
(i3 / information
      :topic (c / continent :name (n / name :op1 "africa"))
      :mod (a / amr-unknown))

# ::snt exchange rates between dollar and euro
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "euro")))
      :ARG2 (a / amr-unknown))

# ::snt please tell me what a crankshaft is
(t / tell-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :domain (c / crankshaft))
      :ARG2 (i / i))

# ::snt what area has at least a thousand miles of open desert
(h / have-part-91
      :ARG1 (a / area
            :mod (a2 / amr-unknown))
      :ARG2 (d / desert
            :ARG1-of (o / open-06)
            :ARG1-of (m / measure-01
                  :ARG3 (a3 / at-least
                        :op1 (a4 / area-quantity :quant 1000
                              :unit (s / square-mile))))))

# ::snt find details about u. s. a.
(d / detail-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing :plural +
            :topic (c / country :name (n / name :op1 "u." :op2 "s." :op3 "a."))))

# ::snt i need to know the highest mountain in the world
(n2 / need-01
      :ARG0 (i / i)
      :ARG1 (k / know-01
            :ARG0 i
            :ARG1 (m / mountain
                  :ARG1-of (h / have-degree-91
                        :ARG2 (h2 / high-02
                              :ARG1 m)
                        :ARG3 (m2 / most)
                        :ARG5 (m3 / mountain
                              :part-of (w / world))))))

# ::snt how crowded is los angeles
(c2 / crowd-01
      :ARG1 (c / city :name (n / name :op1 "los" :op2 "angeles"))
      :degree (a / amr-unknown))

# ::snt what is the exchange rate between us dollars and yen is
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollars"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "yen")))
      :ARG2 (a / amr-unknown))

# ::snt please check the exchange rates of the us dollar versus the euro
(c3 / check-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
                        :ARG3 (c2 / currency :name (n2 / name :op1 "euro"))))))

# ::snt what's a wicker chair
(c / chair
      :mod (w / wicker)
      :mod (a / amr-unknown))

# ::snt find twitter handle of tom cruise
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG1-of (h / handle-01
                  :ARG0 (p / person :name (n2 / name :op1 "tom" :op2 "cruise")))
            :medium (p2 / publication :name (n3 / name :op1 "twitter"))))

# ::snt has pound value decreased
(d / decrease-01
      :ARG1 (t / thing
            :ARG2-of (v / value-01
                  :ARG1 (c / currency :name (n / name :op1 "pound"))))
      :polarity (a / amr-unknown))

# ::snt what is the size of a small cub
(s / size-01
      :ARG1 (c / cub
            :ARG1-of (s2 / small-01))
      :ARG2 (a / amr-unknown))

# ::snt what region is miami located
(b / be-located-at-91
      :ARG1 (c / city :name (n / name :op1 "miami"))
      :ARG2 (r / region
            :mod (a / amr-unknown)))

# ::snt describe blanket
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (b / blanket))

# ::snt please tell me the definition of home
(t / tell-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (d / define-01
                  :ARG1 (h / home)))
      :ARG2 (i / i))

# ::snt how far above sea level is denver
(a / above-01
      :ARG1 (c / city :name (n / name :op1 "denver"))
      :ARG2 (l / level
            :mod (s / sea))
      :extent (a2 / amr-unknown))

# ::snt divide seventy six in two parts
(e / equal-01
      :ARG1 (q / quotient-of :op1 76 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt where is kansas located
(b / be-located-at-91
      :ARG1 (s / state :name (n / name :op1 "kansas"))
      :ARG2 (a / amr-unknown))

# ::snt what is the square root of one hundred and forty eight thousand five hundred and eighty seven
(e / equal-01
      :ARG1 (r / root-of :op1 148587 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt what does oscillate mean
(m / mean-01
      :ARG1 (o / oscillate)
      :ARG2 (a / amr-unknown))

# ::snt what is the shallowest piece of land
(h2 / have-degree-91
      :ARG1 (l / land
            :mod (a / amr-unknown))
      :ARG2 (s / shallow-01
            :ARG1 l)
      :ARG3 (m / most))

# ::snt what is ten divided by five
(e / equal-01
      :ARG1 (q / quotient-of :op1 10 :op2 5)
      :ARG2 (a / amr-unknown))


# ::snt facebook current stock rate
(r / rate-01
      :ARG1 (s / stock :name (n / name :op1 "facebook"))
      :ARG2 (a / amr-unknown)
      :time (c / current))

# ::snt can you tell me about wayne gretszky
(t / tell-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (p / person :name (n / name :op1 "wayne" :op2 "gretszky")))
      :ARG2 (i / i))

# ::snt how much money in us would i need to have a thousand pesos
(n3 / need-01
      :ARG0 (i / i)
      :ARG1 (c / currency
            :mod (c2 / country :name (n / name :op1 "us"))
            :quant (a / amr-unknown))
      :purpose (h2 / have-03
            :ARG0 i
            :ARG1 (c3 / currency :quant 1000 :name (n2 / name :op1 "pesos"))))

# ::snt who was john dillinger
(p / person :name (n / name :op1 "john" :op2 "dillinger")
      :mod (a / amr-unknown))

# ::snt how many miles is new york city from los angeles
(f / far-01
      :ARG1 (c / city :name (n / name :op1 "new" :op2 "york" :op3 "city"))
      :ARG2 (c2 / city :name (n2 / name :op1 "los" :op2 "angeles"))
      :extent (d / distance-quantity
            :quant (a / amr-unknown)
            :unit (m / mile)))

# ::snt what's the highest mountain in italy
(h / have-degree-91
      :ARG1 (m / mountain
            :mod (a / amr-unknown))
      :ARG2 (h2 / high-02
            :ARG1 m)
      :ARG3 (m2 / most)
      :ARG5 (m3 / mountain
            :part-of (c / country :name (n / name :op1 "italy"))))

# ::snt where is ashwin
(b / be-located-at-91
      :ARG1 (p / person :name (n / name :op1 "ashwin"))
      :ARG2 (a / amr-unknown))

# ::snt stock rate of facebook
(r / rate-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "facebook")))
      :ARG2 (a / amr-unknown))

# ::snt what is by plus y.
(e / equal-01
      :ARG1 (s / sum-of
            :op1 (s2 / string-entity :value "by")
            :op2 (s3 / string-entity :value "y"))
      :ARG2 (a / amr-unknown))

# ::snt find the mass of the sun
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (m / mass-quantity
            :domain (s / star :name (n / name :op1 "sun"))))

# ::snt stock details
(s / stock :plural +
      :mod (a / amr-unknown)
      :ARG1-of (d / detail-01))

# ::snt what is the exchange rate for mexico money
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :mod (c2 / country :name (n / name :op1 "mexico"))))
      :ARG2 (a / amr-unknown))

# ::snt where is san francisco
(b / be-located-at-91
      :ARG1 (c / city :name (n / name :op1 "san" :op2 "francisco"))
      :ARG2 (a / amr-unknown))

# ::snt what is the exchange rate of rupee for dollar
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "rupee"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "dollar")))
      :ARG2 (a / amr-unknown))

# ::snt what is the definition of plethora
(d / define-01
      :ARG1 (p / plethora)
      :ARG2 (a / amr-unknown))

# ::snt siri what is one american dollar in japanese yen
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "japenese" :op2 "yen"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "american" :op2 "dollar")))

# ::snt where jackie chan currently live
(l / live-01
      :ARG0 (p / person :name (n / name :op1 "jackie" :op2 "chan"))
      :location (a / amr-unknown)
      :time (n2 / now))

# ::snt can you list the stock on sony
(l / list-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "sony"))))

# ::snt what is the exchange rate of u. s. d. to cad
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
            :ARG3 (c2 / currency :name (n2 / name :op1 "cad")))
      :ARG2 (a / amr-unknown))

# ::snt how many square miles is the average country on earth
(a / average-01
      :ARG1 (c / country
            :part-of (p / planet :name (n / name :op1 "earth")))
      :ARG2 (a2 / area-quantity
            :quant (a3 / amr-unknown)
            :unit (s / square-mile)))

# ::snt how much is one dollar us in canadian
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "canadian"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "dollar" :op2 "us")))

# ::snt where is
(b / be-located-at-91)

# ::snt how many songs did michael jackson write
(h2 / have-quant-91
      :ARG1 (t / thing
            :ARG1-of (s2 / sing-01)
            :ARG1-of (w / write-01
                  :ARG0 (p / person :name (n / name :op1 "michael" :op2 "jackson"))))
      :ARG2 (a / amr-unknown))

# ::snt something
(s / something)

# ::snt how far does my dollar go in japan
(g / go-07
      :ARG1 (c / currency :name (n / name :op1 "dollar")
            :poss (i / i))
      :ARG3 (a / amr-unknown)
      :location (c3 / country :name (n2 / name :op1 "japan")))

# ::snt look up the meaning of logic
(l2 / look-up-05 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (m / mean-01
                  :ARG1 (l / logic))))

# ::snt what is the current stock price for amazon
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "amazon")))
      :ARG2 (a / amr-unknown)
      :time (c2 / current))

# ::snt olly give me the definition of arrow
(d / define-01
      :ARG1 (a / arrow)
      :ARG2 (a2 / amr-unknown))

# ::snt what does the shirt look like
(l / look-02
      :ARG0 (s / shirt)
      :ARG1 (a / amr-unknown))

# ::snt describe what a poltergeist is
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / poltergeist))

# ::snt how much is one dollar in euros
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "euros"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "dollar")))

# ::snt where is the worlds highest falls
(b / be-located-at-91
      :ARG1 (f / falls
            :ARG1-of (h / have-degree-91
                  :ARG2 (h2 / high-02
                        :ARG1 f)
                  :ARG3 (m / most)
                  :ARG5 (f2 / falls
                        :location (w / world))))
      :ARG2 (a / amr-unknown))

# ::snt where is located the biggest waterfall in the world
(b / be-located-at-91
      :ARG1 (w / waterfall
            :ARG1-of (h / have-degree-91
                  :ARG2 (b2 / big-01
                        :ARG1 w)
                  :ARG3 (m / most)
                  :ARG5 (w2 / waterfall
                        :location (w3 / world))))
      :ARG2 (a / amr-unknown))

# ::snt what is the total number of islands in the united states
(h / have-quant-91
      :ARG1 (i2 / island
            :location (c / country :name (n / name :op1 "united" :op2 "states")))
      :ARG2 (a / amr-unknown)
      :ARG1-of (t / total-01))

# ::snt how tall is a giraffe
(t / tall-01
      :ARG1 (g / giraffe)
      :ARG2 (a / amr-unknown))

# ::snt what does regal mean
(m / mean-01
      :ARG1 (r / regal)
      :ARG2 (a / amr-unknown))

# ::snt where is raleigh
(b / be-located-at-91
      :ARG1 (c / city :name (n / name :op1 "raleigh"))
      :ARG2 (a / amr-unknown))

# ::snt abdul k. a. l. a. m. president
(h / have-org-role-91
      :ARG0 (p / person :name (n / name :op1 "abdul" :op2 "k." :op3 "a." :op4 "l." :op5 "a." :op6 "m."))
      :ARG2 (p2 / president))

# ::snt which continent has highest growth of cotton and what is average production
(a / and
      :op1 (b / be-located-at-91
            :ARG1 (g / grow-03
                  :ARG1 (f / fiber :name (n / name :op1 "cotton"))
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (h / high-02
                              :ARG1 g)
                        :ARG3 (m / most)))
            :ARG2 (c / continent
                  :mod (a2 / amr-unknown)))
      :op2 (p / produce-01
            :ARG1 f
            :location c
            :ARG1-of (a3 / average-04
                  :ARG2 (a4 / amr-unknown))))

# ::snt what is the exchange rate for the english pound and u. s. dollar
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "english" :op2 "pound"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "u." :op2 "s." :op3 "dollar")))
      :ARG2 (a / amr-unknown))

# ::snt who built the prado museum
(b / build-01
      :ARG0 (a / amr-unknown)
      :ARG1 (m / museum :name (n / name :op1 "prado")))

# ::snt where is the hottest desert located
(b / be-located-at-91
      :ARG1 (d / desert
            :ARG1-of (h / have-degree-91
                  :ARG2 (h2 / hot-05
                        :ARG1 d)
                  :ARG3 (m / most)))
      :ARG2 (a / amr-unknown))

# ::snt what does bling mean
(m / mean-01
      :ARG1 (b / bling)
      :ARG2 (a / amr-unknown))

# ::snt how strong is the dollar compared to the peso
(s / strong-02
      :ARG1-of (c / currency :name (n / name :op1 "dollar"))
      :ARG1-of (c2 / compare-01
            :ARG2 (c3 / currency :name (n2 / name :op1 "peso")))
      :degree (a / amr-unknown))

# ::snt how many meetings did mahatma gandhi undertake
(m / meet-03
      :ARG0 (p / person :name (n / name :op1 "mahatma" :op2 "gandhi"))
      :frequency (a / amr-unknown))

# ::snt what year did george clooney start acting
(s / start-01
      :ARG1 (a / act-01
            :ARG0 (p / person :name (n / name :op1 "george" :op2 "clooney")))
      :time (d / date-entity
            :year (a2 / amr-unknown)))

# ::snt what is a hypothesis
(h / hypothesis
      :mod (a / amr-unknown))

# ::snt convert currency calculator
(t / thing
      :instrument-of (c / calculate-01)
      :purpose (c2 / convert-01
            :ARG1 (c3 / currency)))

# ::snt can you tell me what haggis looks like
(t / tell-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG1-of (l / look-02
                  :ARG0 (f / food-dish :name (n / name :op1 "haggis"))))
      :ARG2 (i / i))

# ::snt how many people live in takjistan
(l / live-01
      :ARG0 (p / person
            :quant (a / amr-unknown))
      :location (c / country :name (n / name :op1 "takjistan")))

# ::snt where is statue of liberty
(b / be-located-at-91
      :ARG1 (m / monument :name (n / name :op1 "statue" :op2 "of" :op3 "liberty"))
      :ARG2 (a / amr-unknown))

# ::snt what is the square root of ninety seven
(e / equal-01
      :ARG1 (r / root-of :op1 97 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt what new movie is jennifer lawrence working on
(w / work-01
      :ARG0 (p / person :name (n / name :op1 "jennifer" :op2 "lawrence"))
      :ARG1 (m / movie
            :ARG1-of (n2 / new-01)
            :mod (a / amr-unknown)))

# ::snt is colombo on the coast of sri lanka
(b / be-located-at-91
      :ARG1 (c / city :name (n / name :op1 "colombo"))
      :ARG2 (c2 / coast
            :part-of (c3 / country :name (n2 / name :op1 "sri" :op2 "lanka")))
      :polarity (a / amr-unknown))

# ::snt define schadenfraude
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / schadenfreude))

# ::snt what is i. b. m. stock at
(v / value-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "i." :op2 "b." :op3 "m.")))
      :ARG2 (a / amr-unknown))

# ::snt tell me the exchange rate of ten dollar to euro
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :quant 10 :name (n / name :op1 "dollar"))
                        :ARG3 (c2 / currency :name (n2 / name :op1 "euro")))))
      :ARG2 (i / i))

# ::snt what is skynet
(s / skynet
      :mod (a / amr-unknown))

# ::snt how's microsoft's stock
(s / stock
      :mod (c / company :name (n / name :op1 "microsoft"))
      :mod (a / amr-unknown))

# ::snt what is the meaning of placid
(m / mean-01
      :ARG1 (p / placid)
      :ARG2 (a / amr-unknown))

# ::snt how did george rogers clark die
(c / cause-01
      :ARG0 (a / amr-unknown)
      :ARG1 (d / die-01
            :ARG1 (p / person :name (n / name :op1 "george" :op2 "rogers"))))

# ::snt how tall is micheal jackson
(t / tall-01
      :ARG1 (p / person :name (n / name :op1 "micheal" :op2 "jackson"))
      :ARG2 (a / amr-unknown))

# ::snt what's my stock fluctuations
(f / fluctuate-01
      :ARG1 (s / stock
            :poss (i / i))
      :manner (a / amr-unknown))

# ::snt which bank will give better rate for currencies i have
(i2 / include-91
      :ARG1 (b / bank
            :mod (a / amr-unknown)
            :ARG0-of (g / give-01
                  :ARG1 (t / thing
                        :ARG2-of (r / rate-01
                              :ARG1 (c / currency
                                    :ARG1-of (h / have-03
                                          :ARG0 (i / i))))
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (g2 / good-02
                                    :ARG1 t)
                              :ARG3 (m / more)))))
      :ARG2 (b2 / bank))

# ::snt what is the definition of pwd
(d / define-01
      :ARG1 (s / string-entity :value "pwd")
      :ARG2 (a / amr-unknown))


# ::snt tell me who the thirty second president is
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG2 (p2 / president)
                  :ord (o / ordinal-entity :value 32))
            :mod (a / amr-unknown))
      :ARG2 (i / i))

# ::snt tell me the highest mountain in the world
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (m / mountain
            :ARG1-of (h / have-degree-91
                  :ARG2 (h2 / high-02
                        :ARG1 m)
                  :ARG3 (m2 / most)
                  :ARG5 (m3 / mountain
                        :part-of (w / world))))
      :ARG2 (i / i))

# ::snt how much is ten u. s. d. in indian rupees
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "indian" :op2 "rupee"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 10 :name (n2 / name :op1 "u." :op2 "s." :op3 "d.")))

# ::snt what does a banana look like
(l / look-02
      :ARG0 (f / food-dish :name (n / name :op1 "banana"))
      :ARG1 (a / amr-unknown))

# ::snt please let me know the exchange rate between indian rupees and us
(l / let-know-07 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (i / i)
      :ARG2 (t / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :name (n / name :op1 "indian" :op2 "rupees"))
                        :ARG3 (c2 / currency :name (n2 / name :op1 "us"))))))

# ::snt what's the stock price for tesco
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "tesco")))
      :ARG2 (a / amr-unknown))

# ::snt who is obama
(p / person :name (n / name :op1 "obama")
      :mod (a / amr-unknown))

# ::snt show me share price of tata
(s2 / show-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / share
                        :mod (c / company :name (n / name :op1 "tata")))))
      :ARG2 (i / i))

# ::snt is warren buffet is investing in my listed stocks
(i2 / invest-01
      :ARG0 (p / person :name (n / name :op1 "warren" :op2 "buffet"))
      :ARG2 (s / stock :plural +
            :ARG1-of (l / list-01
                  :ARG0 (i / i)))
      :polarity (a / amr-unknown))

# ::snt celeb info
(i2 / inform-01
      :ARG2 (a / amr-unknown
            :topic (c / celebrity :plural +)))

# ::snt what is the circumference of the earth
(c / circumference
      :domain (p / planet :name (n / name :op1 "earth"))
      :mod (a / amr-unknown))

# ::snt what is the capital of jordan
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c2 / country :name (n2 / name :op1 "jordan"))
      :ARG2 (c / capital))

# ::snt search this object's definition
(s / search-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (d / define-01
                  :ARG1 (o / object
                        :mod (t2 / this)))))

# ::snt i want some information on john lennon
(w / want-01
      :ARG0 (i / i)
      :ARG1 (t / thing
            :ARG2-of (i2 / inform-01)
            :topic (p / person :name (n / name :op1 "john" :op2 "lennon"))
            :mod (s / some)))

# ::snt what is the definition of the word snafu
(d / define-01
      :ARG1 (s2 / snafu
            :mod (w / word))
      :ARG2 (a / amr-unknown))

# ::snt what is six divided by two
(e / equal-01
      :ARG1 (q / quotient-of :op1 6 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt give me a description of a boeing seven four seven
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (a / aircraft :name (n / name :op1 "boeing" :op2 "seven" :op3 "four" :op4 "seven")))

# ::snt calculate a close integral of exponential function from zero to five
(c / calculate-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (i2 / integral
            :ARG1-of (c2 / close-01)
            :mod (f / function :name (n / name :op1 "exponent"))
            :mod (v / value-interval :op1 0 :op2 5)))

# ::snt explain what g. d. p. means
(e / explain-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (m / mean-01
                  :ARG1 (t2 / thing :name (n / name :op1 "g." :op2 "d." :op3 "p.")))))

# ::snt is i. b. m. up today
(u / up-02
      :ARG1 (c / company :name (n / name :op1 "i." :op2 "b." :op3 "m."))
      :polarity (a / amr-unknown)
      :time (t / today))

# ::snt give the stock price details of motorolla
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "motorolla")))
      :ARG2 (a / amr-unknown)
      :ARG1-of (d / detail-01))

# ::snt what is three plus four
(e / equal-01
      :ARG1 (s / sum-of :op1 3 :op2 4)
      :ARG2 (a / amr-unknown))

# ::snt how many oceans are there
(h / have-quant-91
      :ARG1 (o / ocean)
      :ARG2 (a / amr-unknown))

# ::snt mean
(m / mean-01)

# ::snt if a pencil cost four dollars and a book ten dollars cost how much i should pay if i buy two pencil and three book
(p / pay-01
      :ARG0 (i / i)
      :ARG1 (m / monetary-quantity
            :quant (a / amr-unknown)
            :unit (d / dollar))
      :ARG3 (a2 / and
            :op1 (p2 / pencil
                  :ARG1-of (h / have-quant-91
                        :ARG2 2))
            :op2 (b / book
                  :ARG1-of (h2 / have-quant-91
                        :ARG2 3)))
      :ARG1-of (r / recommend-01)
      :condition (a3 / and
            :op1 (c / cost-01
                  :ARG1 (h3 / have-quant-91
                        :ARG1 p2
                        :ARG2 1)
                  :ARG2 (m2 / monetary-quantity :quant 4
                        :unit (d2 / dollar)))
            :op2 (c2 / cost-01
                  :ARG1 (h4 / have-quant-91
                        :ARG1 b
                        :ARG2 1)
                  :ARG2 (m3 / monetary-quantity :quant 10
                        :unit (d3 / dollar)))))

# ::snt how old is clint eastwood
(p / person :name (n / name :op1 "clint" :op2 "eastwood")
      :age (a / amr-unknown))

# ::snt tell me about new york
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (c / city :name (n / name :op1 "new" :op2 "york")))
      :ARG2 (i / i))

# ::snt define love without invoking the term love
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (l / love-01)
      :manner (i2 / invoke-01 :polarity -
            :ARG0 y
            :ARG1 (l2 / love-01
                  :mod (t / term))))

# ::snt how much can chris helmsworth bench press
(p / press-01
      :ARG0 (p2 / person :name (n / name :op1 "chris" :op2 "helmsworth"))
      :ARG1 (t / thing
            :ARG1-of (w / weigh-01
                  :ARG3 (a / amr-unknown)))
      :location (b / bench))

# ::snt tell me about the stock for shell
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (s / stock
                  :mod (c / company :name (n / name :op1 "shell"))))
      :ARG2 (i / i))

# ::snt where in the world is carmen san diego
(b / be-located-at-91
      :ARG1 (p / product :name (n / name :op1 "carmen" :op2 "san" :op3 "diego"))
      :ARG2 (a / amr-unknown))

# ::snt details on person
(d / detail-01
      :ARG1 (t / thing
            :topic (p / person)
            :mod (a / amr-unknown)))

# ::snt stock price for gss energy
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "gss" :op2 "energy")))
      :ARG2 (a / amr-unknown))

# ::snt what is a calone worth compared to a u. s. dollar
(w2 / worth-01
      :ARG1 (c / currency :name (n / name :op1 "calone"))
      :ARG2 (a / amr-unknown)
      :ARG1-of (c3 / compare-01
            :ARG2 (t / thing
                  :ARG2-of (w / worth-01
                        :ARG1 (c2 / currency :name (n2 / name :op1 "u." :op2 "s." :op3 "dollar"))))))

# ::snt what is robin williams birthday
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "robin" :op2 "williams"))
      :time (a / amr-unknown))

# ::snt what is twelve plus one hundred and ninety six
(e / equal-01
      :ARG1 (s / sum-of :op1 12 :op2 196)
      :ARG2 (a / amr-unknown))

# ::snt how long is the nile river
(l / long-03
      :ARG1 (r / river :name (n / name :op1 "nile" :op2 "river"))
      :ARG2 (a / amr-unknown))

# ::snt does kim kardashian wear converse
(w / wear-01
      :ARG0 (p / person :name (n / name :op1 "kim" :op2 "kardashian"))
      :ARG1 (p2 / product :name (n2 / name :op1 "converse"))
      :polarity (a / amr-unknown))

# ::snt how does merriam webster define ultra
(d / define-01
      :ARG1 (u / ultra)
      :ARG2 (a / amr-unknown)
      :medium (b / book :name (n / name :op1 "merriam" :op2 "webster")))

# ::snt hey google can you tell me what the white house is
(t / tell-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :domain (b / building :name (n / name :op1 "white" :op2 "house")))
      :ARG2 (i / i))

# ::snt search on his locality
(s / search-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (l / locality
            :location-of (h / he)))

# ::snt who was in the beatles
(c / consist-01
      :ARG1 (m / music-group :name (n / name :op1 "the" :op2 "beatles"))
      :ARG2 (p / person
            :mod (a / amr-unknown)))

# ::snt siri what does survey mean
(m / mean-01
      :ARG1 (s / survey)
      :ARG2 (a / amr-unknown))

# ::snt where is los angeles
(b / be-located-at-91
      :ARG1 (c / city :name (n / name :op1 "los" :op2 "angeles"))
      :ARG2 (a / amr-unknown))

# ::snt what does this stitch long sleeved shirt look like
(l / look-02
      :ARG0 (s / shirt
            :part (s2 / sleeve
                  :ARG1-of (l2 / long-03))
            :ARG1-of (s3 / stitch-01)
            :mod (t / this))
      :ARG1 (a / amr-unknown))

# ::snt what city does anthony keidis live in
(l / live-01
      :ARG0 (p / person :name (n / name :op1 "anthony" :op2 "kiedis"))
      :location (c / city
            :mod (a / amr-unknown)))

# ::snt what's the exchange rate between czk and euro
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "czk"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "euro")))
      :ARG2 (a / amr-unknown))

# ::snt the definition of life
(d / define-01
      :ARG1 (l / life)
      :ARG2 (a / amr-unknown))

# ::snt look up a lamp
(l2 / look-up-05 :mode imperative
      :ARG0 (y / you)
      :ARG1 (l / lamp))

# ::snt describe hell
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (h / hell))

# ::snt dollar rupees exchange rate
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "rupees")))
      :ARG2 (a / amr-unknown))

# ::snt tell me the latest stock of pepsi
(t / tell-01
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (s / stock
                  :mod (c / company :name (n / name :op1 "pepsi")))
            :mod (l / last))
      :ARG2 (i / i))

# ::snt tell me why bill bur is a better comedian than iliza schleshinger
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG0-of (c / cause-01
                  :ARG1 (h / have-degree-91
                        :ARG1 (c2 / comedian
                              :domain (p / person :name (n / name :op1 "bill" :op2 "bur")))
                        :ARG2 (g / good-02
                              :ARG1 c2)
                        :ARG3 (m / more)
                        :ARG4 (c3 / comedian
                              :domain (p2 / person :name (n2 / name :op1 "iliza" :op2 "schleshinger"))))))
      :ARG2 (i / i))

# ::snt what is angelina jolie's birthday
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "angelina" :op2 "jolie"))
      :time (a / amr-unknown))

# ::snt show conversion rate of u. s. d. and euro
(s / show-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (r / rate-01
                  :ARG1 (c3 / convert-01
                        :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
                        :ARG2 (c2 / currency :name (n2 / name :op1 "euro"))))))

# ::snt what is the sixteenth president
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG2 (p / president)
      :ord (o / ordinal-entity :value 16))

# ::snt i need the stock price for amazon
(n3 / need-01
      :ARG0 (i / i)
      :ARG1 (t / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "amazon"))))))

# ::snt how many bases has nick swisher stolen in his career
(h / have-quant-91
      :ARG1 (b / base
            :ARG1-of (s / steal-01
                  :ARG0 (p / person :name (n / name :op1 "nick" :op2 "swisher"))
                  :duration (c / career
                        :poss p)))
      :ARG2 (a / amr-unknown))

# ::snt what is the home city of the bolshoi theater
(b / be-located-at-91
      :ARG1 (t / theater :name (n / name :op1 "bolshoi" :op2 "theater"))
      :ARG2 (c / city
            :mod (h / home)
            :domain (a / amr-unknown)))

# ::snt alexa what are amd stock prices
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "amd")))
      :ARG2 (a / amr-unknown))

# ::snt who is janet jackson currently dating or married to
(o / or
      :op1 (p / person
            :ARG1-of (d / date-02
                  :ARG0 (p2 / person :name (n2 / name :op1 "janet" :op2 "jackson"))
                  :time (c / current))
            :mod (a / amr-unknown))
      :op2 (p3 / person
            :ARG2-of (m / marry-01
                  :ARG1 p2
                  :time (c2 / current))
            :mod (a2 / amr-unknown)))

# ::snt what year was chuck norris born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "chuck" :op2 "norris"))
      :time (d / date-entity
            :year (a / amr-unknown)))

# ::snt what does animal mean
(m / mean-01
      :ARG1 (a / animal)
      :ARG2 (a2 / amr-unknown))

# ::snt who is napoleon hill
(p / person :name (n / name :op1 "napoleon" :op2 "hill")
      :mod (a / amr-unknown))

# ::snt what is burmuda tiangle
(w / world-region :name (n / name :op1 "burmuda" :op2 "triangle")
      :mod (a / amr-unknown))

# ::snt exchange euro to dollar
(e / exchange-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c / currency :name (n / name :op1 "euro"))
      :ARG3 (c2 / currency :name (n2 / name :op1 "dollar")))

# ::snt how do you describe a capabara
(d / describe-01
      :ARG0 (y / you)
      :ARG1 (c / capabara)
      :ARG2 (a2 / amr-unknown))

# ::snt what t. v. show is jennifer aniston on
(s / show-04
      :ARG1 (a / amr-unknown)
      :ARG3 (t / television)
      :mod (p / person :name (n / name :op1 "jennifer" :op2 "aniston")))

# ::snt calculator
(t / thing
      :instrument-of (c / calculate-01))

# ::snt perpetual meaning
(m / mean-01
      :ARG1 (p / perpetual)
      :ARG2 (a / amr-unknown))

# ::snt what is the exchange rate of euro and dollar
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "euro"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "dollar")))
      :ARG2 (a / amr-unknown))

# ::snt where is yellowstone park located
(b / be-located-at-91
      :ARG1 (p / park :name (n / name :op1 "yellowstone" :op2 "park"))
      :ARG2 (a / amr-unknown))

# ::snt exchange rate with these currencies
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :mod (t / this))
            :ARG3 (c2 / currency
                  :mod (t2 / this)))
      :ARG2 (a / amr-unknown))

# ::snt does selena gomez has a scandal
(s / scandalize-01
      :ARG0 (p / person :name (n / name :op1 "selena" :op2 "gomez"))
      :polarity (a / amr-unknown))

# ::snt how much does the f. flat stock cost
(c / cost-01
      :ARG1 (s / stock
            :mod (c2 / company :name (n / name :op1 "f." :op2 "flat")))
      :ARG2 (a / amr-unknown))

# ::snt exchange rate from cad to u. s. d.
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "cad"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "u." :op2 "s." :op3 "d.")))
      :ARG2 (a / amr-unknown))

# ::snt tell me about narendra modi
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (p / person :name (n / name :op1 "narendra" :op2 "modi")))
      :ARG2 (i / i))

# ::snt tell about computer definition
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (d / define-01
                  :ARG1 (c / computer))))

# ::snt what is the longest day of the year
(h2 / have-degree-91
      :ARG1 (d / day
            :mod (a / amr-unknown))
      :ARG2 (l / long-03
            :ARG1 d)
      :ARG3 (m / most)
      :ARG5 (d2 / day
            :ARG2-of (c / consist-01
                  :ARG1 (y / year))))

# ::snt what is the us dollar and euro exchange rate
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "euro")))
      :ARG2 (a / amr-unknown))

# ::snt longest river in the world
(h2 / have-degree-91
      :ARG1 (r / river
            :mod (a / amr-unknown))
      :ARG2 (l / long-03
            :ARG1 r)
      :ARG3 (m / most)
      :ARG5 (r2 / river
            :part-of (w / world)))

# ::snt alexa amd's current stock prices
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "amd")))
      :ARG2 (a / amr-unknown)
      :time (c2 / current))

# ::snt where is justin bieber's home base
(b / be-located-at-91
      :ARG1 (b2 / base
            :location-of (h / home
                  :poss (p / person :name (n / name :op1 "justin" :op2 "bieber"))))
      :ARG2 (a / amr-unknown))

# ::snt define alarm
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (a / alarm))

# ::snt what is the meaning of the word sanctimonious
(m / mean-01
      :ARG1 (s / sanctimonious
            :mod (w / word))
      :ARG2 (a / amr-unknown))

# ::snt ok google what is a ferrari
(c / car-make :name (n / name :op1 "ferrari")
      :mod (a / amr-unknown))

# ::snt what is the definition of the word perpetual
(d / define-01
      :ARG1 (p / perpetual
            :mod (w / word))
      :ARG2 (a / amr-unknown))

# ::snt who was appointed as deputy centimeter of uttar pradesh
(a2 / appoint-01
      :ARG1 (p / person
            :mod (a / amr-unknown))
      :ARG2 (h / have-org-role-91
            :ARG0 p
            :ARG1 (s / state :name (n2 / name :op1 "uttar" :op2 "pradesh"))
            :ARG2 (m / minister
                  :mod (c / chief)
                  :mod (d / deputy))))

# ::snt how old is mariah carey
(p / person :name (n / name :op1 "mariah" :op2 "carey")
      :age (a / amr-unknown))

# ::snt find me a description of morel mushrooms
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / species :name (n / name :op1 "morel" :op2 "mushroom")))

# ::snt what is the definition of a home run
(d / define-01
      :ARG1 (r / run-02
            :destination (h / home))
      :ARG2 (a / amr-unknown))

# ::snt how much is twelve divided by four
(e / equal-01
      :ARG1 (q / quotient-of :op1 12 :op2 4)
      :ARG2 (a / amr-unknown))

# ::snt how much does the average car weigh
(w / weigh-01
      :ARG1 (c / car
            :ARG1-of (a / average-04))
      :ARG3 (a2 / amr-unknown))

# ::snt find exchange rate for u. s. d. to dollar
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
                        :ARG3 (c2 / currency :name (n2 / name :op1 "dollar"))))))

# ::snt olly find me the perfect girlfriend
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / person
            :ARG0-of (h / have-rel-role-91
                  :ARG1 (i / i)
                  :ARG2 (g / girlfriend))
            :ARG1-of (p2 / perfect-02
                  :ARG2 i))
      :ARG2 i)

# ::snt what is the root of six hundred and twenty five
(e / equal-01
      :ARG1 (r / root-of :op1 625 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt when is shakira's birthday
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "shakira"))
      :time (a / amr-unknown))

# ::snt look up what this word means
(l / look-up-05 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (m / mean-01
                  :ARG1 (w / word
                        :mod (t2 / this)))))


# ::snt is there any affairs of ileana d'cruz
(a / affair-01
      :ARG0 (p / person :name (n / name :op1 "ileana" :op2 "d'cruz"))
      :ARG1 (a2 / amr-unknown))

# ::snt what is kevin spacey doing
(d / do-02
      :ARG0 (p / person :name (n / name :op1 "kevin" :op2 "spacey"))
      :ARG1 (a / amr-unknown))

# ::snt show me the exchange rate between czk and dollar
(s / show-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :name (n / name :op1 "czk"))
                        :ARG3 (c2 / currency :name (n2 / name :op1 "dollar")))))
      :ARG2 (i / i))

# ::snt how big is the cosmos
(b / big-01
      :ARG1 (l / location :name (n2 / name :op1 "cosmos"))
      :ARG2 (a / amr-unknown))

# ::snt how to calculate trigonametry
(c / calculate-01
      :ARG1 (t / thing
            :mod (m / mathematics :name (n / name :op1 "trigonometry")))
      :manner (a / amr-unknown))

# ::snt what does one plus
(e / equal-01
      :ARG1 (s / sum-of :op1 1)
      :ARG2 (a / amr-unknown))

# ::snt where was president madison born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "madison")
            :ARG0-of (h / have-org-role-91
                  :ARG2 (p2 / president)))
      :location (a / amr-unknown))

# ::snt where is the prime meridian
(b / be-located-at-91
      :ARG1 (m / meridian :name (n / name :op1 "prime" :op2 "meridian"))
      :ARG2 (a / amr-unknown))

# ::snt what is the capital of china
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c2 / country :name (n2 / name :op1 "china"))
      :ARG2 (c / capital))

# ::snt i want to know how many feet are in a mile
(w / want-01
      :ARG0 (i / i)
      :ARG1 (k / know-01
            :ARG0 i
            :ARG1 (q / quantity
                  :ARG2-of (h / have-quant-91
                        :ARG1 (d / distance-quantity
                              :unit (f / foot))
                        :ARG4 (d2 / distance-quantity :quant 1
                              :unit (m / mile))))))

# ::snt what is a pressure washer
(t / thing
      :instrument-of (w / wash-01)
      :manner (p / pressure-01)
      :mod (a / amr-unknown))

# ::snt i want the exact definition of school
(w / want-01
      :ARG0 (i / i)
      :ARG1 (t / thing
            :ARG2-of (d / define-01
                  :ARG1 (s / school))
            :mod (e / exact)))

# ::snt olly is a dollar worth more or less in brazil
(a / amr-choice
      :op1 (h / have-degree-91
            :ARG1 (c / currency :name (n / name :op1 "dollar"))
            :ARG2 (w / worth-01
                  :ARG1 c)
            :ARG3 (m / more)
            :location (c2 / country :name (n2 / name :op1 "brazil")))
      :op2 (h2 / have-degree-91
            :ARG1 c
            :ARG2 w
            :ARG3 (l / less)
            :location c2))

# ::snt what was the stock price for google yesterday
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "google")))
      :ARG2 (a / amr-unknown)
      :time (y / yesterday))

# ::snt define this object
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (o / object
            :mod (t / this)))

# ::snt what an umbrella means
(m / mean-01
      :ARG1 (u / umbrella)
      :ARG2 (a / amr-unknown))

# ::snt how is a typhoon defined
(d / define-01
      :ARG1 (t / typhoon-01)
      :ARG2 (a / amr-unknown))

# ::snt describe what a sphere is
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / sphere))

# ::snt where did mahatma gandhi born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "mahatma" :op2 "gandhi"))
      :location (a / amr-unknown))

# ::snt is elizabeth taylor still alive
(l / live-01
      :ARG0 (p / person :name (n / name :op1 "elizabeth" :op2 "taylor"))
      :mod (s / still)
      :polarity (a / amr-unknown))

# ::snt give me the opening stock price of apple
(g / give-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "apple")))
                  :time (o / open-02)))
      :ARG2 (i / i))

# ::snt where is justin beiber from
(b / be-from-91
      :ARG1 (p / person :name (n / name :op1 "justin" :op2 "beiber"))
      :ARG2 (a / amr-unknown))

# ::snt define session
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / session))

# ::snt is it true that asia has only two countries
(t / true-01
      :ARG1 (h / have-part-91
            :ARG1 (c / continent :name (n / name :op1 "asia"))
            :ARG2 (c2 / country :quant 2)
            :mod (o / only))
      :polarity (a / amr-unknown))

# ::snt what is the result of two by two
(e / equal-01
      :ARG1 (p / product-of :op1 2 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt what is worth more a u. s. d. or aus
(a / amr-choice
      :op1 (h / have-degree-91
            :ARG1 (t / thing
                  :ARG2-of (w / worth-01
                        :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))))
            :ARG3 (m / more)
            :ARG4 (t2 / thing
                  :ARG2-of (w2 / worth-01
                        :ARG1 (c2 / currency :name (n2 / name :op1 "aus")))))
      :op2 (h2 / have-degree-91
            :ARG1 t2
            :ARG3 (m2 / more)
            :ARG4 t))

# ::snt tell me about donald trumps early life
(t / tell-01
      :ARG1 (l2 / life
            :ARG1-of (l / live-01
                  :ARG0 (p / person :name (n / name :op1 "donald" :op2 "trump")))
            :mod (a / amr-unknown))
      :ARG2 (i / i))

# ::snt google michael jackson
(g / google-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / person :name (n / name :op1 "michael" :op2 "jackson")))

# ::snt what is the meaning of ultra
(m / mean-01
      :ARG1 (u / ultra)
      :ARG2 (a / amr-unknown))

# ::snt would like to know the description of a car
(l / like-02
      :ARG1 (t / thing
            :ARG2-of (d / describe-01
                  :ARG1 (c / car))))

# ::snt please tell who invented telephone and what is the date
(t2 / tell-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (a / and
            :op1 (p / person
                  :ARG0-of (i2 / invent-01
                        :ARG1 (d / device
                              :instrument-of (t / telephone-01))))
            :op2 (d2 / date-entity
                  :ARG2-of (b / be-temporally-at-91
                        :ARG1 i2))))

# ::snt find geographic details of this place
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG1-of (d / detail-01
                  :topic (g / geography
                        :domain (p / place
                              :mod (t / this))))))

# ::snt do you know math
(k / know-03
      :ARG0 (y / you)
      :ARG1 (m / mathematics)
      :polarity (a / amr-unknown))

# ::snt find out for me what the topic is of each oswald chambers book
(f / find-out-03 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :topic (b / book :plural +
                  :poss (p / person :name (n / name :op1 "oswald" :op2 "chambers"))
                  :mod (e / each))))

# ::snt when you ask it to schedule an appointment that it can email the specific person and provide available dates from your calendar
(p / possible-01
      :ARG1 (a / and
            :op1 (e / email-01
                  :ARG0 (t / thing)
                  :ARG2 (p2 / person
                        :ARG1-of (s / specific-02)))
            :op2 (p3 / provide-01
                  :ARG0 t
                  :ARG1 (d / date-entity
                        :ARG2-of (a2 / available-02)
                        :source (c / calendar
                              :poss (y / you)))))
      :time (a3 / ask-02
            :ARG0 y
            :ARG1 (s2 / schedule-01
                  :ARG0 t
                  :ARG1 (a4 / appointment-02))
            :ARG2 t))

# ::snt tell me one euro equals dollars
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (q / quant
            :ARG2-of (h / have-quant-91
                  :ARG1 (c2 / currency :name (n2 / name :op1 "dollar"))
                  :ARG4 (c / currency :quant 1 :name (n / name :op1 "euro"))))
      :ARG2 (i / i))

# ::snt where is it hottest on earth
(b / be-located-at-91
      :ARG1 (l / location
            :ARG1-of (h / have-degree-91
                  :ARG2 (h2 / hot-05
                        :ARG1 l)
                  :ARG3 (m / most)
                  :ARG5 (l2 / location
                        :location (p / planet :name (n / name :op1 "earth")))))
      :ARG2 (a / amr-unknown))

# ::snt what city was elvis born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "elvis"))
      :location (c / city
            :mod (a / amr-unknown)))

# ::snt what are the current stock prices for google
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "google")))
      :ARG2 (a / amr-unknown)
      :time (c2 / current))

# ::snt definition of arrow please
(d / define-01 :polite +
      :ARG1 (a / arrow)
      :ARG2 (a2 / amr-unknown))

# ::snt how far is california from georgia
(f / far-01
      :ARG1 (s / state :name (n / name :op1 "california"))
      :ARG2 (s2 / state :name (n2 / name :op1 "georgia"))
      :extent (a / amr-unknown))

# ::snt what is the composition of our nails
(c / compose-01
      :ARG1 (n / nail
            :part-of (w / we))
      :ARG2 (a / amr-unknown))

# ::snt current currency rate
(r / rate-01
      :ARG1 (c / currency)
      :ARG2 (a / amr-unknown)
      :time (c2 / current))

# ::snt what is the location of moldova
(b / be-located-at-91
      :ARG1 (c / country :name (n / name :op1 "moldova"))
      :ARG2 (a / amr-unknown))

# ::snt achievements of sachin tendulkar
(a / achieve-01
      :ARG0 (p / person :name (n / name :op1 "sachin" :op2 "tendulkar"))
      :ARG1 (a2 / amr-unknown))

# ::snt exchange rate dirham and rupees
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "dirham"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "rupees")))
      :ARG2 (a / amr-unknown))

# ::snt alexa what is computer
(c / computer
      :mod (a / amr-unknown))

# ::snt what's the one night with paris
(b / broadcast-program :name (n / name :op1 "one" :op2 "night" :op3 "with" :op4 "paris")
      :mod (a / amr-unknown))

# ::snt what is the population of los angeles
(p / populate-01
      :ARG1 (c / city :name (n / name :op1 "los" :op2 "angeles"))
      :ARG2 (a / amr-unknown))

# ::snt what is the plot of the most recent will smith movie
(p / plot
      :mod (a / amr-unknown)
      :topic-of (m / movie
            :mod (p2 / person :name (n / name :op1 "will" :op2 "smith"))
            :time (r / recent
                  :ARG2-of (h / have-degree-91
                        :ARG3 (m2 / most)))))

# ::snt show me the stock prices of target today
(s2 / show-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing :plural +
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "target")))
                  :time (t / today)))
      :ARG2 (i / i))

# ::snt how are the top ten stocks at the moment
(h / have-mod-91
      :ARG1 (s / stock :plural + :quant 10
            :ARG2-of (t / top-01))
      :ARG2 (a / amr-unknown)
      :time (n / now))

# ::snt how old is emma watson newest boyfriend
(p / person
      :ARG0-of (h / have-rel-role-91
            :ARG1 (p2 / person :name (n / name :op1 "emma" :op2 "watson"))
            :ARG2 (b / boyfriend)
            :ARG1-of (h2 / have-degree-91
                  :ARG2 (n2 / new-01
                        :ARG1 h)
                  :ARG3 (m / most)))
      :age (a / amr-unknown))

# ::snt define blanket
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (b / blanket))

# ::snt what is an orange like
(f / food-dish :name (n / name :op1 "orange")
      :mod (a / amr-unknown))

# ::snt ask my brokers
(a / ask-01 :mode imperative
      :ARG0 (y / you)
      :ARG2 (p / person
            :ARG0-of (b / broker-01
                  :ARG2 (i / i))))

# ::snt how does a cheetah look
(l / look-02
      :ARG0 (c / cheetah)
      :ARG1 (a / amr-unknown))

# ::snt how many months in a year
(h / have-quant-91
      :ARG1 (t2 / temporal-quantity
            :unit (m / month))
      :ARG2 (a / amr-unknown)
      :ARG4 (t / temporal-quantity :quant 1
            :unit (y / year)))

# ::snt please define textual
(d / define-01 :polite + :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / textual))

# ::snt how many inches make one feet
(h / have-quant-91
      :ARG1 (d2 / distance-quantity
            :unit (i2 / inch))
      :ARG2 (a / amr-unknown)
      :ARG4 (d / distance-quantity :quant 1
            :unit (f / foot)))

# ::snt please tell me news related to the stock market
(t / tell-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (n / news
            :topic (m / market-01
                  :ARG1 (s / stock)))
      :ARG2 (i / i))

# ::snt is the dow up or down
(a / amr-choice
      :op1 (u / up-02
            :ARG1 (m / market-sector :name (n / name :op1 "dow")))
      :op2 (d / down-03
            :ARG1 m))

# ::snt who is the prime minister of india
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c / country :name (n2 / name :op1 "india"))
      :ARG2 (m / minister
            :mod (p2 / prime)))

# ::snt what is a cell tower
(t / tower
      :purpose (c / cellular)
      :mod (a / amr-unknown))

# ::snt how much is a dollar worth compared to a yen
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "dollar"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "yen")))

# ::snt how much does stock cost in walmart
(c / cost-01
      :ARG1 (s / stock
            :mod (c2 / company :name (n / name :op1 "walmart")))
      :ARG2 (a / amr-unknown))

# ::snt what is the longest river on earth
(h / have-degree-91
      :ARG1 (r / river)
      :ARG2 (l / long-03
            :ARG1 r)
      :ARG3 (m / most)
      :ARG5 (r2 / river
            :part-of (p / planet :name (n / name :op1 "earth"))))

# ::snt what is the financial capital of canada
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c2 / country :name (n / name :op1 "canada"))
      :ARG2 (c / capital
            :purpose (f / finance-01)))

# ::snt where is montana
(b / be-located-at-91
      :ARG1 (s / state :name (n / name :op1 "montana"))
      :ARG2 (a / amr-unknown))

# ::snt what year did elvis die
(d / die-01
      :ARG1 (p / person :name (n / name :op1 "elvis"))
      :time (d2 / date-entity
            :year (a / amr-unknown)))

# ::snt depending on the role you are going for this will affect your answer
(a / affect-01
      :ARG0 (t / thing
            :mod (t2 / this))
      :ARG1 (t3 / thing
            :ARG2-of (a2 / answer-01
                  :ARG0 (y / you)))
      :ARG0-of (d / depend-01
            :ARG1 (r / role
                  :ARG1-of (g / go-03
                        :ARG0 y))))

# ::snt tell what is the value of sin thirty
(e / equal-01
      :ARG1 (s / sine-of :op1 30)
      :ARG2 (a / amr-unknown))

# ::snt how do i
(h / have-manner-91)

# ::snt how many floors does the empire state building have
(h / have-quant-91
      :ARG1 (f / floor
            :part-of (b / building :name (n / name :op1 "empire" :op2 "state" :op3 "building")))
      :ARG2 (a / amr-unknown))

# ::snt who is the prettiest actress in the world in this century
(h2 / have-degree-91
      :ARG1 (p2 / person
            :ARG0-of (a3 / act-01)
            :mod (f / female)
            :mod (a5 / amr-unknown))
      :ARG2 (p / pretty-01
            :ARG1 p2)
      :ARG3 (m / most)
      :ARG5 (p3 / person
            :ARG0-of (a / act-01)
            :mod (f2 / female)
            :time (c / century
                  :mod (t / this))
            :location (w / world)))

# ::snt look up etymology in google
(l / look-up-05 :mode imperative
      :ARG0 (y / you)
      :ARG1 (e / etymology)
      :ARG2 (c / company :name (n / name :op1 "google")))

# ::snt what is the price of euro to u. s. d.
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "euro")))

# ::snt what is twenty percent of one hundred and twenty
(e / equal-01
      :ARG1 (p / product-of
            :op1 (p2 / percentage-entity :value 20) :op2 120)
      :ARG2 (a / amr-unknown))

# ::snt what is the total number of oceans in the world
(h / have-quant-91
      :ARG1 (o / ocean
            :part-of (w / world))
      :ARG2 (a / amr-unknown)
      :ARG1-of (t / total-01))

# ::snt what is the closing price of axle company
(p / price-01
      :ARG1 (c / company :name (n / name :op1 "axle"))
      :time (c2 / close-02))

# ::snt please describe that object for me
(d / describe-01 :polite + :mode imperative
      :ARG0 (y / you)
      :ARG1 (o / object
            :mod (t / that)))

# ::snt what is exchange for the us and euro
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :location (c2 / country :name (n / name :op1 "us")))
            :ARG3 (c3 / currency :name (n2 / name :op1 "euro")))
      :ARG2 (a / amr-unknown))

# ::snt how many kilometers are in a mile
(h / have-quant-91
      :ARG1 (d / distance-quantity
            :unit (k / kilometer))
      :ARG2 (a / amr-unknown)
      :ARG4 (d2 / distance-quantity :quant 1
            :unit (m / mile)))

# ::snt describe a rotor
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (r / rotor))

# ::snt is jackie chan married
(m / marry-01
      :ARG1 (p / person :name (n / name :op1 "jackie" :op2 "chan"))
      :polarity (a / amr-unknown))

# ::snt what does triumph mean
(m / mean-01
      :ARG1 (t / triumph)
      :ARG2 (a / amr-unknown))

# ::snt what are the chances of the stock market closing below the two hundred moving average in the next fourteen days
(c / chance-02
      :ARG1 (c2 / close-02
            :ARG1 (m / market-01
                  :ARG1 (s / stock))
            :manner (b / below
                  :op1 (a / average-01
                        :ARG2 200
                        :ARG1-of (m2 / move-01))))
      :ARG2 (a2 / amr-unknown)
      :time (a3 / after
            :op1 (n / now)
            :duration (t / temporal-quantity :quant 14
                  :unit (d / day))))

# ::snt what is ten u. s. d. in euros
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "euro"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 10 :name (n2 / name :op1 "u." :op2 "s." :op3 "d.")))

# ::snt why has politics become so polarized recently
(p / polarize-01
      :ARG0 (a / amr-unknown)
      :ARG1 (p2 / politics)
      :degree (s / so)
      :time (r / recent))

# ::snt what is piramid
(p / pyramid
      :mod (a / amr-unknown))

# ::snt when was the bolshoi theater constructed
(c / construct-01
      :ARG1 (t / theater :name (n / name :op1 "bolshoi" :op2 "theater"))
      :time (a / amr-unknown))

# ::snt where is burmuda triangle
(b / be-located-at-91
      :ARG1 (w / world-region :name (n / name :op1 "burmuda" :op2 "triangle"))
      :ARG2 (a / amr-unknown))

# ::snt google i. b. m. stock prices
(g / google-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing :plural +
            :ARG2-of (p / price-01
                  :ARG1 (s2 / stock
                        :mod (c2 / company :name (n2 / name :op1 "i." :op2 "b." :op3 "m."))))))

# ::snt tell me when the next big earthquake will hit california
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / time
            :time-of (e2 / earthquake-01
                  :ARG1 (s / state :name (n2 / name :op1 "california"))
                  :ARG1-of (n / next-01)
                  :ARG1-of (b2 / big-01)))
      :ARG2 (i / i))

# ::snt i would like my to tell me the trend on foreign exchange rates
(l / like-02
      :ARG0 (i / i)
      :ARG1 (t / tell-01
            :ARG0 (y / you)
            :ARG1 (t2 / thing
                  :ARG2-of (t3 / trend-01
                        :ARG1 (r / rate-01
                              :ARG1 (e / exchange-01
                                    :mod (f / foreign)))))
            :ARG2 i))

# ::snt show me the stock price for google
(s2 / show-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "google")))))
      :ARG2 (i / i))

# ::snt currency rate of indian rupee and singapore dollar
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "indian" :op2 "rupee"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "singapore" :op2 "dollar")))
      :ARG2 (a / amr-unknown))

# ::snt find world meaning in dictionary
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (m / mean-01
                  :ARG1 (w / world)))
      :location (d / dictionary))

# ::snt how much long is atlanta
(l / long-03
      :ARG1 (c / city :name (n / name :op1 "atlanta"))
      :ARG2 (a / amr-unknown))

# ::snt tell me about fjords
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (f / fjord))
      :ARG2 (i / i))

# ::snt has my stock increased in value
(i2 / increase-01
      :ARG1 (t / thing
            :ARG2-of (v / value-01
                  :ARG1 (s / stock
                        :poss (i / i))))
      :polarity (a / amr-unknown))

# ::snt define acceleration
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (a / acceleration))

# ::snt what's the highest mountain range in the world
(h3 / have-degree-91
      :ARG1 (r / range
            :part (m / mountain)
            :mod (a / amr-unknown))
      :ARG2 (h2 / high-02
            :ARG1 r)
      :ARG3 (m2 / most)
      :ARG5 (w / world))

# ::snt what does problematic mean
(m / mean-01
      :ARG1 (p / problematic)
      :ARG2 (a / amr-unknown))

# ::snt earth info
(i2 / information
      :topic (p / planet :name (n / name :op1 "earth"))
      :mod (a / amr-unknown))

# ::snt what movies has emma watson acted in
(a3 / act-01
      :ARG0 (p / person :name (n2 / name :op1 "emma" :op2 "watson"))
      :subevent-of (m / movie :plural +
            :mod (a2 / amr-unknown)))

# ::snt who is president of poland
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c / country :name (n2 / name :op1 "poland"))
      :ARG2 (p / president))

# ::snt what is twenty three times fifty two
(e / equal-01
      :ARG1 (p / product-of :op1 23 :op2 52)
      :ARG2 (a / amr-unknown))

# ::snt where do most celebrities hang out
(h / hang-out-06
      :ARG1 (c / celebrity
            :mod (m / most))
      :location (a / amr-unknown))

# ::snt find me some celebrities that are capricorns
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / person :plural +
            :mod (c / celebrity)
            :mod (a / astrology :name (n2 / name :op1 "capricorn")))
      :ARG2 (i / i))

# ::snt when is the birth date of taylor lautner
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "taylor" :op2 "lautner"))
      :time (a / amr-unknown))

# ::snt give me the definition of school
(g / give-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (d / define-01
                  :ARG1 (s / school)))
      :ARG2 (i / i))

# ::snt can cats eat fish
(p / possible-01
      :ARG1 (e / eat-01
            :ARG0 (c / cat)
            :ARG1 (f / fish))
      :polarity (a / amr-unknown))

# ::snt hey what is the definition of passive
(d / define-01
      :ARG1 (p / passive)
      :ARG2 (a / amr-unknown))

# ::snt where is obama from
(b / be-from-91
      :ARG1 (p / person :name (n / name :op1 "obama"))
      :ARG2 (a / amr-unknown))

# ::snt update me on stock price of this company stock
(u / update-02 :mode imperative
      :ARG0 (y / you)
      :ARG1 (i / i)
      :ARG2 (t / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company
                              :mod (t2 / this))))))

# ::snt tell me the best exchange rate
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01)
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 t2)
                        :ARG3 (m / most))))
      :ARG2 (i / i))

# ::snt please give me address of salman khan apartment
(s / street-address-91
      :ARG1 (a / amr-unknown)
      :ARG2 (a2 / amr-unknown)
      :ARG3 (a3 / amr-unknown)
      :ARG4 (a4 / amr-unknown)
      :ARG5 (a5 / amr-unknown)
      :ARG6 (a6 / amr-unknown)
      :ARG7 (a7 / amr-unknown)
      :location-of (a8 / apartment
            :mod (p / person :name (n / name :op1 "salman" :op2 "khan"))))

# ::snt where can i use this word
(u / use-01
      :ARG0 (i / i)
      :ARG1 (w / word
            :mod (t / this))
      :ARG2 (a / amr-unknown)
      :ARG1-of (p / possible-01))

# ::snt is california between nevada and new york
(b / be-located-at-91
      :ARG1 (s / state :name (n / name :op1 "california"))
      :ARG2 (b2 / between-02
            :ARG1 (s2 / state :name (n2 / name :op1 "nevada"))
            :ARG2 (s3 / state :name (n3 / name :op1 "new" :op2 "york")))
      :polarity (a / amr-unknown))

# ::snt explain me about rock
(e / explain-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (r / rock)
      :ARG2 (i / i))

# ::snt stock exchange rates
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (s / stock :plural +))
      :ARG2 (a / amr-unknown))

# ::snt who is the current president of united states
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c / country :name (n2 / name :op1 "united" :op2 "states"))
      :ARG2 (p / president)
      :time (c2 / current))

# ::snt today's closing price for google
(p / price-01
      :ARG1 (c / company :name (n / name :op1 "google"))
      :ARG2 (a / amr-unknown)
      :time (c2 / close-02)
      :time (t / today))

# ::snt what is souffle
(f / food-dish :name (n / name :op1 "souffle")
      :mod (a / amr-unknown))

# ::snt how tall is jobe bryant
(t / tall-01
      :ARG1 (p / person :name (n / name :op1 "kobe" :op2 "bryant"))
      :ARG2 (a / amr-unknown))

# ::snt what exchange rate does the us dollar and the euro have
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "euro")))
      :ARG2 (a / amr-unknown))

# ::snt how much is apple stock worth
(w / worth-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "apple")))
      :ARG2 (a / amr-unknown))

# ::snt what is the definition for the word pontificate
(d / define-01
      :ARG1 (p / pontificate-01
            :mod (w / word))
      :ARG2 (a / amr-unknown))

# ::snt siri what are the definitions of orange
(d / define-01
      :ARG1 (o / orange)
      :ARG2 (a / amr-unknown))

# ::snt what is the exchange rate from english currency to yen
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "english" :op2 "currency"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "yen")))
      :ARG2 (a / amr-unknown))

# ::snt what's thirteen plus fourteen
(e / equal-01
      :ARG1 (s / sum-of :op1 13 :op2 14)
      :ARG2 (a / amr-unknown))

# ::snt what is the definition of precocious
(d / define-01
      :ARG1 (p / precocious)
      :ARG2 (a / amr-unknown))

# ::snt what is the distance to the moon
(d / distant-02
      :ARG1 (m / moon :name (n / name :op1 "moon"))
      :extent (a / amr-unknown))

# ::snt and the pound is doing how badly against the euro
(a / and
      :op2 (h / have-quant-91
            :ARG1 (c / currency :name (n / name :op1 "pound"))
            :ARG2 (a2 / amr-unknown)
            :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "euro"))))

# ::snt how big is the tower of london
(b / big-01
      :ARG1 (b2 / building :name (n / name :op1 "tower" :op2 "of" :op3 "london"))
      :ARG2 (a / amr-unknown))

# ::snt what happened to the dow jones today
(o / organization :name (n / name :op1 "dow" :op2 "jones")
      :mod (a / amr-unknown)
      :time (t / today))

# ::snt tell me about lisa ann
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (p / person :name (n / name :op1 "lisa" :op2 "ann")))
      :ARG2 (i / i))

# ::snt how long has princess kate been pregnant
(i2 / impregnate-01
      :ARG1 (p / person :name (n / name :op1 "princess" :op2 "kate"))
      :duration (a / amr-unknown))

# ::snt solve math issue
(s / solve-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (i2 / issue-02
            :ARG0 (m / mathematics)))

# ::snt what voices has alan tudek played
(p / play-02
      :ARG0 (p2 / person :name (n / name :op1 "alan" :op2 "tudek"))
      :ARG1 (v / voice-01 :plural +
            :ARG0 (a / amr-unknown)))

# ::snt meaning of
(m / mean-01)

# ::snt exchange rates
(r / rate-01
      :ARG1 (e / exchange-01)
      :ARG2 (a / amr-unknown))

# ::snt what is the geographic region of madagascar
(r / region
      :mod (g / geography)
      :part (c / country :name (n / name :op1 "madagascar"))
      :mod (a / amr-unknown))

# ::snt what is the tallest mountain in tucson
(h2 / have-degree-91
      :ARG1 (m / mountain
            :mod (a / amr-unknown))
      :ARG2 (t / tall-01
            :ARG1 m)
      :ARG3 (m2 / most)
      :ARG5 (m3 / mountain
            :part-of (c / city :name (n2 / name :op1 "tucson"))))

# ::snt what are amd stock prices
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "amd")))
      :ARG2 (a / amr-unknown))

# ::snt how to spell the word giraffe
(s / spell-01
      :ARG1 (g / giraffe
            :mod (w / word))
      :ARG2 (a / amr-unknown))

# ::snt describe the heart stone card game
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (g / game :name (n2 / name :op1 "heart" :op2 "stone")
            :consist-of (c / card)))

# ::snt where did rama go on his final journey
(g / go-02
      :ARG0 (p / person :name (n / name :op1 "rama"))
      :ARG1 (j / journey-01
            :ARG0 p
            :mod (f / final))
      :ARG4 (a / amr-unknown))

# ::snt describe rock sand
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / sand
            :consist-of (r / rock)))

# ::snt what is terranova stock going for
(v / value-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "terranova")))
      :ARG2 (a / amr-unknown))

# ::snt exchange rate of yan with dollar
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "yan"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "dollar")))
      :ARG2 (a / amr-unknown))

# ::snt where is artic ocean
(b / be-located-at-91
      :ARG1 (o / ocean :name (n / name :op1 "artic" :op2 "ocean"))
      :ARG2 (a / amr-unknown))

# ::snt when is president's day
(b / be-temporally-at-91
      :ARG1 (e / event :name (n / name :op1 "president's" :op2 "day"))
      :ARG2 (a / amr-unknown))

# ::snt tell me about donald trump
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (p / person :name (n / name :op1 "donald" :op2 "trump")))
      :ARG2 (i / i))

# ::snt check stock price for dinky donuts
(c2 / check-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "dinky" :op2 "donuts"))))))

# ::snt object identifier
(t / thing
      :instrument-of (i2 / identify-01
            :ARG1 (o / object)))

# ::snt where is steven spielberg living
(l / live-01
      :ARG0 (p / person :name (n / name :op1 "steven" :op2 "spielberg"))
      :location (a / amr-unknown))

# ::snt siri please check exchange rates
(c / check-01 :polite +
      :ARG0 (y / you)
      :ARG1 (t / thing :plural +
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01))))

# ::snt what does serendipitous mean
(m / mean-01
      :ARG1 (s / serendipitous)
      :ARG2 (a / amr-unknown))

# ::snt siri what is the elevation of denver colorado
(e / elevate-01
      :ARG1 (c / city :name (n / name :op1 "denver")
            :part-of (s / state :name (n2 / name :op1 "colorado")))
      :extent (a / amr-unknown))

# ::snt what's the price of ge right now
(p / price-01
      :ARG1 (c / company :name (n / name :op1 "ge"))
      :ARG2 (a / amr-unknown)
      :time (n2 / now
            :degree (r / right-yy)))

# ::snt what is the daily price of johnson and johnson stock
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "johnson" :op2 "and" :op3 "johnson")))
      :ARG2 (a / amr-unknown)
      :frequency (r / rate-entity-91
            :ARG3 (t / temporal-quantity :quant 1
                  :unit (d / day))))

# ::snt can you give me some idea about dance bar
(g / give-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (i2 / idea
            :mod (s / some)
            :topic (b / bar
                  :purpose (d / dance-01)))
      :ARG2 (i / i))

# ::snt how much money did bill gates make
(m / make-05
      :ARG0 (p / person :name (n / name :op1 "bill" :op2 "gates"))
      :ARG1 (m2 / monetary-quantity
            :quant (a / amr-unknown)
            :unit (d / dollar)))

# ::snt what is the definition of a probiotic
(d / define-01
      :ARG1 (p / probiotic)
      :ARG2 (a / amr-unknown))

# ::snt google who was the last president who didn't own a dog
(h2 / have-org-role-91
      :ARG0 (p / person
            :ARG0-of (o / own-01 :polarity -
                  :ARG1 (d / dog))
            :mod (a2 / amr-unknown))
      :ARG2 (p2 / president)
      :mod (l / last))

# ::snt alexa how would you describe a ball
(d / describe-01
      :ARG0 (y / you)
      :ARG1 (b / ball)
      :ARG2 (a / amr-unknown))

# ::snt can you find and tell me the prices of facebook stock
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "facebook")))))
      :ARG2 (i / i))

# ::snt what is the highest mountain range in the us
(h3 / have-degree-91
      :ARG1 (m / mountain-range
            :mod (a / amr-unknown))
      :ARG2 (h2 / high-02
            :ARG1 m)
      :ARG3 (m2 / most)
      :ARG5 (m3 / mountain-range
            :part-of (c / country :name (n2 / name :op1 "us"))))

# ::snt how old is rod stewart
(p / person :name (n / name :op1 "rod" :op2 "stewart")
      :age (a / amr-unknown))

# ::snt list top five movies of emma watson
(l / list-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (m / movie
            :ARG2-of (t / top-01
                  :mod (v / value-interval :op1 1 :op2 5))
            :poss (p / person :name (n / name :op1 "emma" :op2 "watson"))))

# ::snt how big is ohio
(b / big-01
      :ARG1 (s / state :name (n / name :op1 "ohio"))
      :ARG2 (a2 / amr-unknown))

# ::snt how tall is mount everest
(t / tall-01
      :ARG1 (m / mountain :name (n / name :op1 "mount" :op2 "everest"))
      :ARG2 (a / amr-unknown))

# ::snt what is the exchange rate of us dollar today for rupee
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "rupee")))
      :ARG2 (a / amr-unknown)
      :time (t / today))

# ::snt tell me the current price of exxon mobil stock
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "exxon" :op2 "mobil")))
                  :time (c2 / current)))
      :ARG2 (i / i))

# ::snt open stock price for name
(p / price-01
      :ARG1 (s / stock
            :ARG1-of (n / name-01))
      :time (o / open-02))

# ::snt were the stocks rising or declining
(a / amr-choice
      :op1 (r / rise-01
            :ARG1 (s / stock :plural +))
      :op2 (d / decline-01
            :ARG1 s))

# ::snt how old are cristiano ronaldo
(p / person :name (n / name :op1 "cristiano" :op2 "ronaldo")
      :age (a / amr-unknown))

# ::snt what does situation mean
(m / mean-01
      :ARG1 (s / situation)
      :ARG2 (a / amr-unknown))

# ::snt look up the definition to ambulance
(l / look-up-05 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (d / define-01
                  :ARG1 (a / ambulance))))

# ::snt who is barack obama
(p / person :name (n / name :op1 "barack" :op2 "obama")
      :mod (a / amr-unknown))

# ::snt f. flat stocks
(s / stock :plural +
      :mod (a / amr-unknown)
      :mod (c / company :name (n / name :op1 "f." :op2 "flat")))

# ::snt how old is ellen
(p / person :name (n / name :op1 "ellen")
      :age (a / amr-unknown))

# ::snt what is one plus one
(e / equal-01
      :ARG1 (s / sum-of :op1 1 :op2 1)
      :ARG2 (a / amr-unknown))

# ::snt how is the stock going in general
(g / go-07
      :ARG1 (s / stock)
      :ARG1-of (g2 / general-02)
      :manner (a / amr-unknown))

# ::snt who is donald trump
(p / person :name (n / name :op1 "donald" :op2 "trump")
      :mod (a / amr-unknown))

# ::snt meaning of name
(m / mean-01
      :ARG1 (n / name-01)
      :ARG2 (a / amr-unknown))

# ::snt from dollar to euro
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "euro")))
      :ARG2 (a / amr-unknown))

# ::snt where is pategonia
(b / be-located-at-91
      :ARG1 (c / country-region :name (n / name :op1 "pategonia"))
      :ARG2 (a / amr-unknown))

# ::snt please describe about microwave
(d / describe-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (m / microwave-01))

# ::snt how many ounces is in a quart
(h / have-quant-91
      :ARG1 (v / volume-quantity
            :unit (f / fluid-ounce))
      :ARG2 (a / amr-unknown)
      :ARG4 (v2 / volume-quantity :quant 1
            :unit (q / quart)))

# ::snt how much is the us dollar worth in canada
(w / worth-01
      :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
      :ARG2 (a / amr-unknown)
      :location (c2 / country :name (n2 / name :op1 "canada")))

# ::snt area of north america
(c / continent :name (n / name :op1 "north" :op2 "america")
      :mod (a / area-quantity
            :quant (a2 / amr-unknown)))

# ::snt what is the exchange rate between us and mexico
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :mod (c3 / country :name (n / name :op1 "us")))
            :ARG3 (c2 / currency
                  :mod (c4 / country :name (n2 / name :op1 "mexico"))))
      :ARG2 (a / amr-unknown))

# ::snt what is the value of apple
(v / value-01
      :ARG1 (c / company :name (n2 / name :op1 "apple"))
      :ARG2 (a / amr-unknown))

# ::snt sum of five and two
(e / equal-01
      :ARG1 (s / sum-of :op1 5 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt calculate two multiplied by two
(e / equal-01
      :ARG1 (p / product-of :op1 2 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt what do pink ribbons support
(s / support-01
      :ARG0 (r / ribbon :plural +
            :ARG1-of (p / pink-04))
      :ARG1 (a / amr-unknown))

# ::snt honda stock price
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "honda")))
      :ARG2 (a / amr-unknown))

# ::snt what's the exchange rates between u. s. a. and china
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :mod (c2 / country :name (n / name :op1 "u." :op2 "s." :op3 "a.")))
            :ARG3 (c3 / currency
                  :mod (c4 / country :name (n2 / name :op1 "china"))))
      :ARG2 (a / amr-unknown))

# ::snt which part of antarctica belongs to the us
(b / belong-01
      :ARG0 (p / part
            :part-of (c / continent :name (n / name :op1 "antarctica"))
            :mod (a / amr-unknown))
      :ARG1 (c2 / country :name (n2 / name :op1 "us")))

# ::snt what is the largest continent in the world
(h2 / have-degree-91
      :ARG1 (c / continent
            :mod (a / amr-unknown))
      :ARG2 (l / large-01
            :ARG1 c)
      :ARG3 (m / most)
      :ARG5 (c2 / continent
            :part-of (w / world)))

# ::snt what is six times sixty eight
(e / equal-01
      :ARG1 (p / product-of :op1 6 :op2 68)
      :ARG2 (a / amr-unknown))

# ::snt what is the capital city of colorado
(h / have-org-role-91
      :ARG0 (c / city
            :mod (a / amr-unknown))
      :ARG1 (s / state :name (n2 / name :op1 "colorado"))
      :ARG2 (c2 / capital))

# ::snt how do you solve three two
(s / solve-01
      :ARG1 (s2 / string-entity :value "three two")
      :ARG2 (a / amr-unknown))

# ::snt is ll cool j. still rapping
(r / rap-02
      :ARG0 (p / person :name (n / name :op1 "ll" :op2 "cool" :op3 "j."))
      :mod (s / still)
      :polarity (a / amr-unknown))

# ::snt rowan atkinson info
(i3 / information
      :topic (p / person :name (n / name :op1 "rowan" :op2 "atkinson"))
      :mod (a / amr-unknown))

# ::snt when was justin bieber born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "justin" :op2 "bieber"))
      :time (a / amr-unknown))

# ::snt where was keith urban born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "keith" :op2 "urban"))
      :location (a / amr-unknown))

# ::snt what currency does croatia use
(u / use-01
      :ARG1 (c / currency
            :mod (a / amr-unknown))
      :location (c2 / country :name (n2 / name :op1 "croatia")))

# ::snt please check this companies stock
(c / check-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (s / stock
            :mod (c2 / company
                  :mod (t / this))))

# ::snt can you take five and divide it by three
(e / equal-01
      :ARG1 (q / quotient-of :op1 5 :op2 3)
      :ARG2 (a / amr-unknown))

# ::snt where do cows come from
(c / come-03
      :ARG1 (c2 / cow)
      :ARG2 (a / amr-unknown))

# ::snt what is the increase in stock value over the past week of disney
(i2 / increase-01
      :ARG1 (t / thing
            :ARG2-of (v / value-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "disney")))))
      :ARG2 (a / amr-unknown)
      :time (b / before
            :op1 (n2 / now)
            :duration (t2 / temporal-quantity :quant 1
                  :unit (w / week))))

# ::snt what is definition of plot
(d / define-01
      :ARG1 (p / plot)
      :ARG2 (a / amr-unknown))

# ::snt what is the price of apple stock today
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "apple")))
      :ARG2 (a / amr-unknown)
      :time (t / today))

# ::snt what is arnold schwarzenegger's birthday
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "arnold" :op2 "schwarzenegger"))
      :time (a / amr-unknown))

# ::snt tell me the brief definition of evacuation
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (d / define-01
                  :ARG1 (e / evacuate-01))
            :ARG2-of (b / brief-01))
      :ARG2 (i / i))

# ::snt is yellowstone park the largest park
(h / have-degree-91
      :ARG1 (p / park :name (n / name :op1 "yellowstone" :op2 "park"))
      :ARG2 (l / large-01
            :ARG1 p)
      :ARG3 (m / most)
      :polarity (a / amr-unknown))

# ::snt is the stocks which i have invested are increasing
(i2 / increase-01
      :ARG1 (s / stock :plural +
            :ARG2-of (i3 / invest-01
                  :ARG0 (i / i)))
      :polarity (a / amr-unknown))

# ::snt someone
(s / someone)

# ::snt when was dolly parton born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "dolly" :op2 "parton"))
      :time (a / amr-unknown))

# ::snt where is fiji
(b / be-located-at-91
      :ARG1 (c / country :name (n / name :op1 "fiji"))
      :ARG2 (a / amr-unknown))

# ::snt how old was albert einstein when he came up with relativity theory
(a / age-01
      :ARG1 (p / person :name (n / name :op1 "albert" :op2 "einstein"))
      :ARG2 (a2 / amr-unknown)
      :time (c / come-up-11
            :ARG0 p
            :ARG1 (t / theory :name (n2 / name :op1 "relativity" :op2 "theory"))))

# ::snt what does a geranium look like
(l / look-02
      :ARG0 (g / geranium)
      :ARG1 (a / amr-unknown))

# ::snt which is the highest peak in the world
(h3 / have-degree-91
      :ARG1 (p / peak
            :mod (a / amr-unknown))
      :ARG2 (h2 / high-02
            :ARG1 p)
      :ARG3 (m / most)
      :ARG5 (p2 / peak
            :part-of (w / world)))

# ::snt find stock price for name
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "name")))
      :ARG2 (a / amr-unknown))

# ::snt find details about president barrack obama
(d2 / detail-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing :plural +
            :topic (p / person :name (n / name :op1 "barrack" :op2 "obama")
                  :ARG0-of (h / have-org-role-91
                        :ARG2 (p2 / president)))))

# ::snt how is the spouse of obama
(p / person
      :ARG0-of (h / have-rel-role-91
            :ARG1 (p2 / person :name (n / name :op1 "obama"))
            :ARG2 (s / spouse))
      :mod (a / amr-unknown))

# ::snt how many g. b. p. can i get for one dollar
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "g." :op2 "b." :op3 "p."))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "dollar")))

# ::snt how far is canada from my current location
(f / far-01
      :ARG1 (c / country :name (n / name :op1 "canada"))
      :ARG2 (l / location
            :location-of (i / i)
            :time (c2 / current))
      :extent (a / amr-unknown))

# ::snt what's the capital of kazakhstan
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c2 / country :name (n2 / name :op1 "kazakhstan"))
      :ARG2 (c3 / capital))

# ::snt keanu reeves date of birth
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "keanu" :op2 "reeves"))
      :time (a / amr-unknown))

# ::snt does spain share its border with morrocco
(b / border-01
      :ARG1 (c / country :name (n / name :op1 "spain"))
      :ARG2 (c2 / country :name (n2 / name :op1 "morrocco"))
      :polarity (a / amr-unknown))

# ::snt ok google where does sophia vergara live
(l / live-01
      :ARG0 (p / person :name (n / name :op1 "sophia" :op2 "vergara"))
      :location (a / amr-unknown))

# ::snt how big is england
(b / big-01
      :ARG1 (c / country :name (n / name :op1 "england"))
      :ARG2 (a / amr-unknown))

# ::snt what does two plus two equal
(e / equal-01
      :ARG1 (s / sum-of :op1 2 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt when will tesla come to my town
(c / come-01
      :ARG1 (c2 / company :name (n / name :op1 "tesla"))
      :ARG4 (t / town
            :location-of (i / i))
      :time (a / amr-unknown))

# ::snt denmark geographic location
(b / be-located-at-91
      :ARG1 (c / country :name (n / name :op1 "denmark"))
      :ARG2 (a / amr-unknown))

# ::snt how much is the dollar worth compared to the euro
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "dollar"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "euro")))

# ::snt define philosophy
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / philosophy))

# ::snt how much would it cost to buy a share of target
(c / cost-01
      :ARG1 (b / buy-01
            :ARG1 (s / share
                  :mod (c2 / company :name (n / name :op1 "target"))))
      :ARG2 (a / amr-unknown))

# ::snt look up economy in the dictionary
(l / look-up-05 :mode imperative
      :ARG0 (y / you)
      :ARG1 (e / economy)
      :ARG2 (d / dictionary))

# ::snt can you convert my this money into
(c / convert-01
      :ARG1 (m / money
            :mod (t / this))
      :polarity (a / amr-unknown))

# ::snt what is us dollar today
(h / have-mod-91
      :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
      :ARG2 (a / amr-unknown)
      :time (t / today))

# ::snt tell me the answer for two plus two
(e / equal-01
      :ARG1 (s / sum-of :op1 2 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt how much is lebron james worth
(w / worth-01
      :ARG1 (p / person :name (n / name :op1 "lebron" :op2 "james"))
      :ARG2 (a / amr-unknown))

# ::snt how old is tom cruise
(p / person :name (n / name :op1 "tom" :op2 "cruise")
      :age (a / amr-unknown))

# ::snt where is mount rushmore located
(b / be-located-at-91
      :ARG1 (l / location :name (n / name :op1 "mount" :op2 "rushmore"))
      :ARG2 (a / amr-unknown))

# ::snt please check the recent trend in stocks
(c / check-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (t2 / trend-01
                  :ARG1 (s / stock)
                  :time (r / recent))))

# ::snt beach
(b / beach)

# ::snt give me the description of laptop circuit
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c / circuit
            :part-of (l / laptop)))

# ::snt define and describe an ultraviolet ray
(a / and
      :op1 (d / define-01 :mode imperative
            :ARG0 (y / you)
            :ARG1 (r / ray
                  :mod (u / ultraviolet)))
      :op2 (d2 / describe-01 :mode imperative
            :ARG0 y
            :ARG1 r))

# ::snt what are pounds worth right now
(w / worth-01
      :ARG1 (c / currency :name (n / name :op1 "pounds"))
      :ARG2 (a / amr-unknown)
      :time (n2 / now
            :degree (r / right-yy)))

# ::snt check wikipedia for a definition of the word homosapien
(c / check-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (o / organization :name (n / name :op1 "wikipedia"))
      :ARG2 (t / thing
            :ARG2-of (d / define-01
                  :ARG1 (h / homosapien
                        :mod (w / word)))))

# ::snt how does the dollar compare to the pound
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "dollar"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "pound")))

# ::snt actor who acts a role
(p / person
      :ARG0-of (a / act-01
            :ARG1 (r / role)))

# ::snt what's the us dollar rate today
(r / rate-01
      :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
      :ARG2 (a / amr-unknown)
      :time (t / today))

# ::snt identify object
(i2 / identify-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (o / object))

# ::snt did kim kardashian go to the paris fashion shows this year
(g / go-02
      :ARG0 (p / person :name (n / name :op1 "kim" :op2 "kardashian"))
      :ARG4 (s / show-04
            :ARG1 (f / fashion)
            :location (c / city :name (n2 / name :op1 "paris")))
      :time (y / year
            :mod (t / this))
      :polarity (a / amr-unknown))

# ::snt give details of rock sand
(d2 / detail-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :topic (s / sand
                  :consist-of (r / rock))))

# ::snt what is a mango
(f / food-dish :name (n / name :op1 "mango")
      :mod (a / amr-unknown))

# ::snt what currency does england use
(c / currency
      :mod (a / amr-unknown)
      :ARG1-of (u / use-01
            :location (c2 / country :name (n / name :op1 "england"))))

# ::snt how many canadian dollars are in a u. s. dollar
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "canadian" :op2 "dollars"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "u." :op2 "s." :op3 "dollar")))

# ::snt list exchange rate information for the day for u. s. d. to jpy
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
            :ARG3 (c2 / currency :name (n2 / name :op1 "jpy")))
      :ARG2 (a / amr-unknown)
      :time (t / today))

# ::snt can you tell me what flabbergasted means
(m / mean-01
      :ARG1 (f / flabbergast-01)
      :ARG2 (a / amr-unknown))

# ::snt what year did robin williams pass away
(p / pass-away-16
      :ARG1 (p2 / person :name (n / name :op1 "robin" :op2 "williams"))
      :time (d / date-entity
            :year (a / amr-unknown)))

# ::snt tell me tom hanks middle name
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (n / name-01
                  :ARG1 (p / person :name (n2 / name :op1 "tom" :op2 "hanks")))
            :mod (m / middle))
      :ARG2 (i / i))

# ::snt what year did tim burton divorce helena
(d / divorce-01
      :ARG0 (p / person :name (n / name :op1 "tim" :op2 "burton"))
      :ARG1 (p2 / person :name (n2 / name :op1 "helena"))
      :time (d2 / date-entity
            :year (a / amr-unknown)))

# ::snt convert one us dollar to euro
(c / convert-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c2 / currency :quant 1 :name (n / name :op1 "us" :op2 "dollar"))
      :ARG2 (c3 / currency :name (n2 / name :op1 "euro")))

# ::snt what is the tallest mountain
(h2 / have-degree-91
      :ARG1 (m / mountain
            :mod (a / amr-unknown))
      :ARG2 (t / tall-01
            :ARG1 m)
      :ARG3 (m2 / most))

# ::snt does pink have a new baby
(h / have-03
      :ARG0 (p / person :name (n / name :op1 "pink"))
      :ARG1 (p2 / person
            :ARG1-of (n2 / new-01)
            :ARG0-of (h2 / have-rel-role-91
                  :ARG1 p
                  :ARG2 (b / baby)))
      :polarity (a / amr-unknown))

# ::snt where is new zealand located on a map
(b / be-located-at-91
      :ARG1 (c / country :name (n / name :op1 "new" :op2 "zealand"))
      :ARG2 (a / amr-unknown))

# ::snt define swerving
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / swerve-01))

# ::snt four divided by two equals two
(e / equal-01
      :ARG1 (q / quotient-of :op1 4 :op2 2)
      :ARG2 2)

# ::snt olly how old is tom cruise
(p / person :name (n / name :op1 "tom" :op2 "cruise")
      :age (a / amr-unknown))

# ::snt check currencies
(c / check-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c2 / currency :plural +))

# ::snt tell what the definition of the word massive
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (d / define-01
                  :ARG1 (m / massive
                        :mod (w / word)))))

# ::snt where is india located
(b / be-located-at-91
      :ARG1 (c / country :name (n / name :op1 "india"))
      :ARG2 (a / amr-unknown))

# ::snt how many number of fans does that person have approximately
(h / have-quant-91
      :ARG1 (p / person
            :ARG1-of (h2 / have-rel-role-91
                  :ARG0 (p2 / person
                        :mod (t / that))
                  :ARG2 (f / fan)))
      :ARG2 (a / amr-unknown)
      :ARG1-of (a2 / approximate-01))

# ::snt can you add up thirteen plus five plus nine for me
(e / equal-01
      :ARG1 (s / sum-of :op1 13 :op2 5 :op3 9)
      :ARG2 (a / amr-unknown))

# ::snt find me the definition of indefatigable
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (d / define-01
                  :ARG1 (i2 / indefatigable)))
      :ARG2 (i / i))

# ::snt what is a trebuchet
(t / trebuchet
      :mod (a / amr-unknown))

# ::snt money exchange
(e / exchange-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (m / money))

# ::snt i need the exchange rate for the us dollar and the euro
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "us" :op2 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "euro")))
      :ARG2 (a / amr-unknown))

# ::snt hey what's a head cheese
(c / cheese
      :location (h / head)
      :mod (a / amr-unknown))

# ::snt how many rivers are there in the world
(h / have-quant-91
      :ARG1 (r / river
            :part-of (w / world))
      :ARG2 (a / amr-unknown))

# ::snt which ocean touches at our continent
(t / touch-01
      :ARG1 (o / ocean
            :mod (a / amr-unknown))
      :ARG2 (c / continent
            :location-of (w / we)))

# ::snt give me the birth details of abraham lincoln
(d / detail-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing :plural +
            :topic (b / bear-02
                  :ARG1 (p / person :name (n / name :op1 "abraham" :op2 "lincoln")))))

# ::snt give me the description of a television circuit
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (c / circuit
            :part-of (t / television)))

# ::snt what is the current exchange rate between the dollar and the euro
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "dollar"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "euro")))
      :ARG2 (a / amr-unknown)
      :time (c3 / current))

# ::snt siri what does jon snow's handsome face look like
(l / look-02
      :ARG0 (f / face
            :part-of (p / person :name (n / name :op1 "jon" :op2 "snow"))
            :mod (h / handsome))
      :ARG1 (a / amr-unknown))

# ::snt give me the opening stock price of infosys technologies today
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "infosys" :op2 "technologies")))
      :ARG2 (a / amr-unknown)
      :time (o / open-02
            :time (t / today)))

# ::snt tell me why relationships are so hard
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG0-of (c / cause-01
                  :ARG1 (h / hard-02
                        :ARG1 (r / relation-03)
                        :degree (s / so))))
      :ARG2 (i / i))

# ::snt where is south asia located
(b / be-located-at-91
      :ARG1 (w / world-region :name (n / name :op1 "south" :op2 "asia"))
      :ARG2 (a / amr-unknown))

# ::snt how much rate will be calculated
(c / calculate-01
      :ARG1 (r / rate-01
            :quant (a / amr-unknown)))

# ::snt what year was bill pullman born
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "bill" :op2 "pullman"))
      :time (d / date-entity
            :year (a / amr-unknown)))

# ::snt please find out the share price of microsoft in nasdaq
(f / find-out-03 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / share
                        :mod (c / company :name (n / name :op1 "microsoft")))
                  :medium (o / organization :name (n2 / name :op1 "nasdaq")))))

# ::snt description of iphone seven
(d / describe-01
      :ARG1 (p / product :name (n / name :op1 "iphone" :op2 "seven"))
      :ARG2 (a / amr-unknown))

# ::snt how effective will be to buy nike stock
(e / effective-04
      :ARG0 (b / buy-01
            :ARG1 (s / stock
                  :mod (c / company :name (n / name :op1 "nike"))))
      :degree (a / amr-unknown))

# ::snt bypass certain passwords
(b / bypass-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / password :plural +
            :ARG1-of (k / know-01)))

# ::snt where is george w. bush from
(b / be-from-91
      :ARG1 (p / person :name (n / name :op1 "george" :op2 "w." :op3 "bush"))
      :ARG2 (a / amr-unknown))

# ::snt what is the exchange rate between us and france
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :mod (c2 / country :name (n / name :op1 "us")))
            :ARG3 (c3 / currency
                  :mod (c4 / country :name (n2 / name :op1 "france"))))
      :ARG2 (a / amr-unknown))

# ::snt how many inches are in a foot
(h / have-quant-91
      :ARG1 (d / distance-quantity
            :unit (i2 / inch))
      :ARG2 (a / amr-unknown)
      :ARG4 (d2 / distance-quantity :quant 1
            :unit (f / foot)))

# ::snt when did the statue of liberty made
(m / make-01
      :ARG1 (m2 / monument :name (n / name :op1 "statue" :op2 "of" :op3 "liberty"))
      :time (a / amr-unknown))

# ::snt what is the stock price of hdfc
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "hdfc")))
      :ARG2 (a / amr-unknown))

# ::snt how much is the euro versus the canadian dollar
(h / have-quant-91
      :ARG1 (c / currency :name (n / name :op1 "euro"))
      :ARG2 (a / amr-unknown)
      :ARG4 (c2 / currency :quant 1 :name (n2 / name :op1 "canadian" :op2 "dollar")))

# ::snt define word
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (w / word))

# ::snt for how many years did mahatma gandhi live
(l / live-01
      :ARG0 (p / person :name (n / name :op1 "mahatma" :op2 "gandhi"))
      :duration (t / temporal-quantity
            :quant (a / amr-unknown)
            :unit (y / year)))

# ::snt how long will it take to travel to japan from south korea
(l / long-03
      :ARG1 (t / travel-01
            :ARG2 (c / country :name (n / name :op1 "south" :op2 "korea"))
            :ARG4 (c2 / country :name (n2 / name :op1 "japan")))
      :ARG2 (a / amr-unknown))

# ::snt where is the coldest place in the world
(b / be-located-at-91
      :ARG1 (p / place
            :ARG1-of (h / have-degree-91
                  :ARG2 (c / cold-01
                        :ARG1 p)
                  :ARG3 (m / most)
                  :ARG5 (p2 / place
                        :location (w / world))))
      :ARG2 (a / amr-unknown))

# ::snt describe joe for me please
(d / describe-01 :polite + :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / person :name (n / name :op1 "joe")))

# ::snt what are the coordinates of the equator
(b / be-located-at-91
      :ARG1 (l / location :name (n / name :op1 "equator"))
      :ARG2 (c / coordinate :plural +
            :mod (a / amr-unknown)))

# ::snt where does brad pitt live
(l / live-01
      :ARG0 (p / person :name (n / name :op1 "brad" :op2 "pitt"))
      :location (a / amr-unknown))

# ::snt how many miles is it between illinois and louisiana alexa
(d / distant-02
      :ARG1 (s / state :name (n / name :op1 "illinois"))
      :ARG2 (s2 / state :name (n2 / name :op1 "louisiana"))
      :extent (d2 / distance-quantity
            :quant (a / amr-unknown)
            :unit (m / mile)))

# ::snt what's that object about
(o / object
      :mod (t / that)
      :mod (a / amr-unknown))

# ::snt current stock price intel
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "intel")))
      :ARG2 (a / amr-unknown)
      :time (c2 / current))

# ::snt one plus two equal
(e / equal-01
      :ARG1 (s / sum-of :op1 1 :op2 2)
      :ARG2 (a / amr-unknown))

# ::snt what is the exchange rate between u. s. d. and inr
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
            :ARG3 (c2 / currency :name (n2 / name :op1 "inr")))
      :ARG2 (a / amr-unknown))

# ::snt how many miles in five kilometers
(h / have-quant-91
      :ARG1 (d / distance-quantity
            :unit (m / mile))
      :ARG2 (a / amr-unknown)
      :ARG4 (d2 / distance-quantity :quant 5
            :unit (k / kilometer)))

# ::snt what is the highest mountain in asia
(h3 / have-degree-91
      :ARG1 (m / mountain
            :mod (a / amr-unknown))
      :ARG2 (h2 / high-02
            :ARG1 m)
      :ARG3 (m2 / most)
      :ARG5 (m3 / mountain
            :part-of (c / continent :name (n2 / name :op1 "asia"))))

# ::snt how do i check my currency exchange rate
(h / have-manner-91
      :ARG1 (c / check-01
            :ARG0 (i / i)
            :ARG1 (t / thing
                  :ARG2-of (r / rate-01
                        :ARG1 (e / exchange-01
                              :ARG1 (c2 / currency
                                    :poss i)))))
      :ARG2 (a / amr-unknown))

# ::snt tell me amd stock prices
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "amd")))))
      :ARG2 (i / i))

# ::snt new exchange rate
(r / rate-01
      :ARG1 (e / exchange-01)
      :ARG1-of (n / new-01))

# ::snt how far in steps is home from here
(f / far-01
      :ARG1 (h / home)
      :ARG2 (h2 / here)
      :extent (d / distance-quantity
            :quant (a / amr-unknown)
            :unit (s2 / step)))

# ::snt how many centimeter make one foot
(h / have-quant-91
      :ARG1 (d / distance-quantity
            :unit (c / centimeter))
      :ARG2 (a / amr-unknown)
      :ARG4 (d2 / distance-quantity :quant 1
            :unit (f / foot)))

# ::snt who is the prime minister of russia
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (c / country :name (n2 / name :op1 "russia"))
      :ARG2 (m / minister
            :mod (p2 / prime)))

# ::snt what is the definition of succinct
(d / define-01
      :ARG1 (s / succinct)
      :ARG2 (a / amr-unknown))

# ::snt give me the definition of the word haughty
(d / define-01
      :ARG1 (h / haughty
            :mod (w / word))
      :ARG2 (a / amr-unknown))

# ::snt olly what is the capital of california
(h / have-org-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (s / state :name (n / name :op1 "california"))
      :ARG2 (c2 / capital))

# ::snt what are the measurements of a queen mattress
(m / measure-01
      :ARG1 (m2 / mattress
            :mod (q / queen))
      :ARG3 (a / amr-unknown))

# ::snt where is johncena from
(b / be-from-91
      :ARG1 (p / person :name (n / name :op1 "johncena"))
      :ARG2 (a / amr-unknown))

# ::snt give me the opening stock price of sony
(g / give-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (p / price-01
                  :ARG1 (s / stock
                        :mod (c / company :name (n / name :op1 "sony")))
                  :time (o / open-02)))
      :ARG2 (i / i))

# ::snt where is north dakota
(b / be-located-at-91
      :ARG1 (s / state :name (n / name :op1 "north" :op2 "dakota"))
      :ARG2 (a / amr-unknown))

# ::snt is mount everest the tallest mountain in the united states
(h2 / have-degree-91
      :ARG1 (m / mountain :name (n / name :op1 "mount" :op2 "everest"))
      :ARG2 (t / tall-01
            :ARG1 m)
      :ARG3 (m2 / most)
      :ARG5 (m3 / mountain
            :part-of (c / country :name (n2 / name :op1 "united" :op2 "states")))
      :polarity (a / amr-unknown))

# ::snt tell me the definition of arrow
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (d / define-01
                  :ARG1 (a / arrow)))
      :ARG2 (i / i))

# ::snt can many seashells did sally sell by the seashore
(h / have-quant-91
      :ARG1 (s / seashell
            :ARG1-of (s2 / sell-01
                  :ARG0 (p / person :name (n / name :op1 "sally"))
                  :location (s3 / seashore)))
      :ARG2 (a / amr-unknown))

# ::snt look up someone
(l / look-up-05 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / person
            :mod (s / some)))

# ::snt what does hesitant mean
(m / mean-01
      :ARG1 (h / hesitant)
      :ARG2 (a / amr-unknown))

# ::snt define perpetual
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / perpetual))

# ::snt list the celebrities who have been in my country in the last five years
(p / person :plural +
      :mod (c / celebrity)
      :ARG1-of (b / be-located-at-91
            :ARG2 (c2 / country
                  :location-of (i / i))
            :time (b2 / before
                  :op1 (n2 / now)
                  :duration (t / temporal-quantity :quant 5
                        :unit (y / year))))
      :mod (a / amr-unknown))

# ::snt divide one thousand five hundred by one hundred and sixty
(e / equal-01
      :ARG1 (q / quotient-of :op1 1500 :op2 160)
      :ARG2 (a / amr-unknown))

# ::snt what is the height of mount everest
(h / high-02
      :ARG1 (m / mountain :name (n / name :op1 "mount" :op2 "everest"))
      :extent (a / amr-unknown))

# ::snt awards won by michael jackson
(a / award-01
      :ARG1 (a2 / amr-unknown)
      :ARG2 (p / person :name (n / name :op1 "michael" :op2 "jackson"))
      :ARG1-of (w / win-01
            :ARG0 p))

# ::snt what is a transistor
(t / transistor
      :mod (a / amr-unknown))

# ::snt what is eighty seven minus fourteen
(e / equal-01
      :ARG1 (d / difference-of :op1 87 :op2 14)
      :ARG2 (a / amr-unknown))

# ::snt define flabbergasted
(d / define-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (f / flabbergasted))

# ::snt what is the exchange rates in this region
(r / rate-01
      :ARG1 (e / exchange-01)
      :ARG2 (a / amr-unknown)
      :location (r2 / region
            :mod (t / this)))

# ::snt please solve this math
(s / solve-01 :polite +
      :ARG1 (m / mathematics
            :mod (t / this))
      :ARG2 (a / amr-unknown))

# ::snt what is this thing
(t / thing
      :mod (t2 / this)
      :mod (a / amr-unknown))

# ::snt tell me about india location
(l / locate-01
      :ARG1 (c / country :name (n / name :op1 "india"))
      :location (a / amr-unknown))

# ::snt set notification for news on the stock market
(n / notify-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (i / i)
      :ARG2 (n2 / news
            :topic (m / market-01
                  :ARG1 (s / stock))))

# ::snt please tell me what is the rate for yen to u. s. d.
(t / tell-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :name (n / name :op1 "yen"))
                        :ARG3 (c2 / currency :name (n2 / name :op1 "u." :op2 "s." :op3 "d.")))))
      :ARG2 (i / i))

# ::snt find me the perfect girlfriend
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / person
            :ARG0-of (h / have-rel-role-91
                  :ARG1 i
                  :ARG2 (g / girlfriend)
                  :ARG1-of (p2 / perfect-02)))
      :ARG2 (i / i))

# ::snt what is the birthday of adam gilchrist
(b / bear-02
      :ARG1 (p / person :name (n / name :op1 "adam" :op2 "gilchrist"))
      :time (a / amr-unknown))

# ::snt what is the highest mountain in the world
(h3 / have-degree-91
      :ARG1 (m / mountain
            :mod (a / amr-unknown))
      :ARG2 (h2 / high-02
            :ARG1 m)
      :ARG3 (m2 / most)
      :ARG5 (m3 / mountain
            :part-of (w / world)))

# ::snt where is denmark
(b / be-located-at-91
      :ARG1 (c / country :name (n / name :op1 "denmark"))
      :ARG2 (a / amr-unknown))

# ::snt please tell me what is the definition of cylinder
(t / tell-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :ARG2-of (d / define-01
                  :ARG1 (c / cylinder)))
      :ARG2 (i / i))

# ::snt what's the currency exchange rate for china
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :mod (c2 / country :name (n / name :op1 "china"))))
      :ARG2 (a / amr-unknown))

# ::snt what is the exchange rate between the us and canada
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency
                  :mod (c2 / country :name (n / name :op1 "us")))
            :ARG3 (c3 / currency
                  :mod (c4 / country :name (n2 / name :op1 "canada"))))
      :ARG2 (a / amr-unknown))

# ::snt tell me about amazon's history
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (h / history
            :topic (c / company :name (n / name :op1 "amazon")))
      :ARG2 (i / i))

# ::snt is kim kardashian married
(m / marry-01
      :ARG1 (p / person :name (n / name :op1 "kim" :op2 "kardashian"))
      :polarity (a / amr-unknown))

# ::snt give me a description of iron fist on netflix
(d / describe-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (b / broadcast-program :name (n / name :op1 "iron" :op2 "fist")
            :medium (o / organization :name (n2 / name :op1 "netflix"))))

# ::snt given me the exchange rates between u. s. d. and inr
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
            :ARG3 (c2 / currency :name (n2 / name :op1 "inr")))
      :ARG2 (a / amr-unknown))

# ::snt which was longest buildings in the world
(h2 / have-degree-91
      :ARG1 (b / building :plural +
            :mod (a / amr-unknown))
      :ARG2 (l / long-03
            :ARG1 b)
      :ARG3 (m / most)
      :ARG5 (w / world))

# ::snt what is price of dollar
(p / price-01
      :ARG1 (c / currency :name (n / name :op1 "dollar"))
      :ARG2 (a / amr-unknown))

# ::snt when does iphone stock usually drop
(b / be-temporally-at-91
      :ARG1 (d / drop-01
            :ARG1 (s / stock
                  :mod (p / product :name (n / name :op1 "iphone")))
            :mod (u / usual))
      :ARG2 (a / amr-unknown))

# ::snt tell me about george washington
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t2 / thing
            :topic (p / person :name (n / name :op1 "george" :op2 "washington")))
      :ARG2 (i / i))

# ::snt explain the exchange rate of rupee for dollar
(e2 / explain-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :name (n / name :op1 "rupee"))
                        :ARG3 (c2 / currency :name (n2 / name :op1 "dollar"))))))

# ::snt who won the presidential election this year
(e / elect-01
      :ARG1 (p / person
            :mod (a / amr-unknown))
      :ARG2 (p2 / president)
      :time (y / year
            :mod (t / this)))

# ::snt olly can you tell me the price of google stock
(p / price-01
      :ARG1 (s / stock
            :mod (c / company :name (n / name :op1 "google")))
      :ARG2 (a / amr-unknown))

# ::snt find exchange rate for u. s. d. to pound
(f / find-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (r / rate-01
                  :ARG1 (e / exchange-01
                        :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
                        :ARG3 (c2 / currency :name (n2 / name :op1 "pound"))))))

# ::snt what is the exchange rate between the british pound and the u. s. dollar
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "british" :op2 "pound"))
            :ARG3 (c2 / currency :name (n2 / name :op1 "u." :op2 "s." :op3 "dollar")))
      :ARG2 (a / amr-unknown))

# ::snt math courses
(c / course :plural +
      :topic (m / mathematics))

# ::snt you should know about
(r / recommend-01
      :ARG1 (k / know-01
            :ARG0 (y / you)))

# ::snt where is laos located
(b / be-located-at-91
      :ARG1 (c / country :name (n / name :op1 "laos"))
      :ARG2 (a / amr-unknown))

# ::snt i want to learn about donald trump
(w / want-01
      :ARG0 (i / i)
      :ARG1 (l / learn-01
            :ARG0 i
            :ARG1 (t / thing
                  :topic (p / person :name (n / name :op1 "donald" :op2 "trump")))))

# ::snt what is uber
(c / company :name (n / name :op1 "uber")
      :mod (a / amr-unknown))

# ::snt who is the wife of obama
(h2 / have-rel-role-91
      :ARG0 (a / amr-unknown)
      :ARG1 (p2 / person :name (n2 / name :op1 "obama"))
      :ARG2 (w / wife))

# ::snt what does joke mean
(m / mean-01
      :ARG1 (j / joke-01)
      :ARG2 (a / amr-unknown))

# ::snt what is the exchange rate for u. s. d. to nzd
(r / rate-01
      :ARG1 (e / exchange-01
            :ARG1 (c / currency :name (n / name :op1 "u." :op2 "s." :op3 "d."))
            :ARG3 (c2 / currency :name (n2 / name :op1 "nzd")))
      :ARG2 (a / amr-unknown))

# ::snt tell me who will win the next presidential election
(t / tell-01 :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / person
            :ARG0-of (w / win-01
                  :ARG2 (e / elect-01
                        :ARG1 p
                        :ARG2 (p2 / president)
                        :ARG1-of (n2 / next-01))))
      :ARG2 (i / i))

# ::snt please define word
(d / define-01 :mode imperative :polite +
      :ARG0 (y / you)
      :ARG1 (w / word))

